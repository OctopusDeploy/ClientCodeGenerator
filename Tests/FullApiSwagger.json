{
  "swagger": "2.0",
  "info": {
    "version": "<VERSION>",
    "title": "Octopus Server API"
  },
  "basePath": "/",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/accounts/all": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a list of AccountResources",
        "description": "Lists all of the accounts in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllAccounts",
        "responses": {
          "200": {
            "description": "Load all AccountResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/accounts/all": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a list of AccountResources",
        "description": "Lists all of the accounts in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllAccounts_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all AccountResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a AccountResource by ID",
        "description": "Gets a single account by ID.",
        "operationId": "getAccountById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AccountResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load AccountResource by ID",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Modify a AccountResource by ID",
        "description": "Modifies an existing account.",
        "operationId": "updateAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AccountResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccountResource",
            "in": "body",
            "description": "The AccountResource resource to create",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AccountResource Modified",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete a AccountResource by ID",
        "description": "Deletes an existing account.",
        "operationId": "deleteAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AccountResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/accounts/{id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a AccountResource by ID",
        "description": "Gets a single account by ID.",
        "operationId": "getAccountById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AccountResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load AccountResource by ID",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Modify a AccountResource by ID",
        "description": "Modifies an existing account.",
        "operationId": "updateAccount_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AccountResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccountResource",
            "in": "body",
            "description": "The AccountResource resource to create",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AccountResource Modified",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete a AccountResource by ID",
        "description": "Deletes an existing account.",
        "operationId": "deleteAccount_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the AccountResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a list of AccountResources",
        "description": "Lists accounts in the supplied Octopus Deploy Space in pages. The results will be sorted alphabetically by name.",
        "operationId": "indexAccounts",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[AccountResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[AccountResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create a AccountResource",
        "description": "Creates a new account.",
        "operationId": "createAccount",
        "parameters": [
          {
            "name": "AccountResource",
            "in": "body",
            "description": "The AccountResource resource to create",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "AccountResource Created",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a list of AccountResources",
        "description": "Lists accounts in the supplied Octopus Deploy Space in pages. The results will be sorted alphabetically by name.",
        "operationId": "indexAccounts_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[AccountResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[AccountResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create a AccountResource",
        "description": "Creates a new account.",
        "operationId": "createAccount_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "AccountResource",
            "in": "body",
            "description": "The AccountResource resource to create",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "AccountResource Created",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/azureenvironments": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the Azure Environments provided by the SDK\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAzureEnvironments",
        "responses": {
          "200": {
            "description": "IEnumerable[AzureEnvironmentResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureEnvironmentResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/accounts/azureenvironments": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the Azure Environments provided by the SDK\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAzureEnvironments_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[AzureEnvironmentResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureEnvironmentResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/pk": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Downloads the public key portion of the account's associated certificate, if present.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAccountPublicKeyDownload",
        "produces": [
          "application/x-x509-ca-cert"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/accounts/{id}/pk": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Downloads the public key portion of the account's associated certificate, if present.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAccountPublicKeyDownload_Spaces",
        "produces": [
          "application/x-x509-ca-cert"
        ],
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/storageAccounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the storage accounts asssociated with an Azure account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAzureStorageAccounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account Id for Azure",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AzureStorageAccountResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureStorageAccountResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure account.\r\nNo id parameter was provided.\r\nThis operation is not supported using Azure Management Certificate authentication. Please try again using an Azure Service Account."
          },
          "500": {
            "description": "Azure Error"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/accounts/{id}/storageAccounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the storage accounts asssociated with an Azure account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAzureStorageAccounts_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Account Id for Azure",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AzureStorageAccountResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureStorageAccountResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure account.\r\nNo id parameter was provided.\r\nThis operation is not supported using Azure Management Certificate authentication. Please try again using an Azure Service Account."
          },
          "500": {
            "description": "Azure Error"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/websites": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the websites associated with an Azure account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAzureWebSites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account Id for Azure",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[AzureWebSiteResource[AzureWebSitesListAction]] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureWebSiteResource[AzureWebSitesListAction]"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure account.\r\nNo id parameter was provided.\r\nThis operation is not supported using Azure Management Certificate authentication. Please try again using an Azure Service Account."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/accounts/{id}/websites": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the websites associated with an Azure account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAzureWebSites_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Account Id for Azure",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[AzureWebSiteResource[AzureWebSitesListAction]] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureWebSiteResource[AzureWebSitesListAction]"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure account.\r\nNo id parameter was provided.\r\nThis operation is not supported using Azure Management Certificate authentication. Please try again using an Azure Service Account."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/{resourceGroupName}/websites/{webSiteName}/slots": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the slots associated with an Azure Web Site.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAzureWebSitesSlot",
        "parameters": [
          {
            "name": "webSiteName",
            "in": "path",
            "description": "Web site name",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "Resource Group name",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Account Id for Azure",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[AzureWebSiteSlotResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureWebSiteSlotResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure account.\r\nNo id parameter was provided.\r\nNo resourceGroupName parameter was provided.\r\nNo webSiteName parameter was provided.\r\nThis operation is not supported using Azure Management Certificate authentication. Please try again using an Azure Service Account."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/accounts/{id}/{resourceGroupName}/websites/{webSiteName}/slots": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the slots associated with an Azure Web Site.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAzureWebSitesSlot_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "webSiteName",
            "in": "path",
            "description": "Web site name",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "Resource Group name",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Account Id for Azure",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[AzureWebSiteSlotResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureWebSiteSlotResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure account.\r\nNo id parameter was provided.\r\nNo resourceGroupName parameter was provided.\r\nNo webSiteName parameter was provided.\r\nThis operation is not supported using Azure Management Certificate authentication. Please try again using an Azure Service Account."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/resourceGroups": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the Resource Groups associated with an Azure account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAzureResourceGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account Id for Azure",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AzureResourceGroupResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureResourceGroupResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure account.\r\nNo id parameter was provided.\r\nThis operation is not supported using Azure Management Certificate authentication. Please try again using an Azure Service Account."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/accounts/{id}/resourceGroups": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists the Resource Groups associated with an Azure account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAzureResourceGroups_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Account Id for Azure",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AzureResourceGroupResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AzureResourceGroupResource"
              }
            }
          },
          "400": {
            "description": "Account must be an Azure account.\r\nNo id parameter was provided.\r\nThis operation is not supported using Azure Management Certificate authentication. Please try again using an Azure Service Account."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/accounts/{id}/usages": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists projects and deployments which are using an account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAccountUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AccountUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/AccountUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/accounts/{id}/usages": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Lists projects and deployments which are using an account.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAccountUsage_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "AccountUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/AccountUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/all": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Get a list of ActionTemplateResources",
        "description": "Lists the all of the action templates in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "listAllActionTemplates",
        "responses": {
          "200": {
            "description": "Load all ActionTemplateResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates/all": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Get a list of ActionTemplateResources",
        "description": "Lists the all of the action templates in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "listAllActionTemplates_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all ActionTemplateResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{id}": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Get a ActionTemplateResource by ID",
        "description": "Gets a single action template by ID.",
        "operationId": "getActionTemplateById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ActionTemplateResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ActionTemplateResource by ID",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Modify a ActionTemplateResource by ID",
        "description": "Modifies an existing action template.",
        "operationId": "updateActionTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ActionTemplateResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ActionTemplateResource",
            "in": "body",
            "description": "The ActionTemplateResource resource to create",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource Modified",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Delete a ActionTemplateResource by ID",
        "description": "Deletes an existing action template and all its versions.",
        "operationId": "deleteActionTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ActionTemplateResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates/{id}": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Get a ActionTemplateResource by ID",
        "description": "Gets a single action template by ID.",
        "operationId": "getActionTemplateById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ActionTemplateResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ActionTemplateResource by ID",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Modify a ActionTemplateResource by ID",
        "description": "Modifies an existing action template.",
        "operationId": "updateActionTemplate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ActionTemplateResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ActionTemplateResource",
            "in": "body",
            "description": "The ActionTemplateResource resource to create",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource Modified",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Delete a ActionTemplateResource by ID",
        "description": "Deletes an existing action template and all its versions.",
        "operationId": "deleteActionTemplate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ActionTemplateResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{id}/versions/{version?}": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets specific version of action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplateVersion",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "Template version to get",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned\r\nActionTemplateResource[] resource returned"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates/{id}/versions/{version?}": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets specific version of action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplateVersion_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Template version to get",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned\r\nActionTemplateResource[] resource returned"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{id}/usage": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets a list of all steps/deployment processes that use a given action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplateUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateUsageResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateUsageResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates/{id}/usage": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets a list of all steps/deployment processes that use a given action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplateUsage_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateUsageResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateUsageResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Get a list of ActionTemplateResources",
        "description": "Lists all of the action templates in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexActionTemplates",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ActionTemplateResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ActionTemplateResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Create a ActionTemplateResource",
        "description": "Creates a new action template.",
        "operationId": "createActionTemplate",
        "parameters": [
          {
            "name": "ActionTemplateResource",
            "in": "body",
            "description": "The ActionTemplateResource resource to create",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ActionTemplateResource Created",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Get a list of ActionTemplateResources",
        "description": "Lists all of the action templates in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexActionTemplates_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ActionTemplateResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ActionTemplateResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ActionTemplates"
        ],
        "summary": "Create a ActionTemplateResource",
        "description": "Creates a new action template.",
        "operationId": "createActionTemplate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ActionTemplateResource",
            "in": "body",
            "description": "The ActionTemplateResource resource to create",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ActionTemplateResource Created",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/search": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Lists all available action templates including built-in, custom and community contributed step templates.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplatesSearch",
        "responses": {
          "200": {
            "description": "IEnumerable[ActionTemplateSearchResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateSearchResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates/search": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Lists all available action templates including built-in, custom and community contributed step templates.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplatesSearch_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[ActionTemplateSearchResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateSearchResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/categories": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Lists action template categories.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTemplateCategories",
        "responses": {
          "200": {
            "description": "IEnumerable[ActionTemplateCategoryResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateCategoryResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates/categories": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Lists action template categories.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTemplateCategories_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[ActionTemplateCategoryResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionTemplateCategoryResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{typeOrId}/logo": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets the logo associated with the latest version of action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplateLogo",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "typeOrId",
            "in": "path",
            "description": "Action Type or ID of the action type logo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No typeOrId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates/{typeOrId}/logo": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets the logo associated with the latest version of action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplateLogo_Spaces",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "typeOrId",
            "in": "path",
            "description": "Action Type or ID of the action type logo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No typeOrId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{typeOrId}/versions/{version}/logo": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets the logo associated with specific version of the action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplateLogoVersion",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "typeOrId",
            "in": "path",
            "description": "Action Type or ID of the action type logo",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the action type logo",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No typeOrId parameter was provided.\r\nNo version parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates/{typeOrId}/versions/{version}/logo": {
      "get": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Gets the logo associated with specific version of the action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplateLogoVersion_Spaces",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "typeOrId",
            "in": "path",
            "description": "Action Type or ID of the action type logo",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the action type logo",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No typeOrId parameter was provided.\r\nNo version parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{id}/logo": {
      "put": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Updates the logo associated with the latest version of the action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateActionTemplateLogo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Updates the logo associated with the latest version of the action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createActionTemplateLogo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates/{id}/logo": {
      "put": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Updates the logo associated with the latest version of the action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateActionTemplateLogo_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Updates the logo associated with the latest version of the action template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createActionTemplateLogo_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/actiontemplates/{id}/actionsUpdate": {
      "post": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Updates deployment actions to specific version of action template\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createActionTemplateActions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionUpdateResultResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionUpdateResultResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied.\r\nRequest failed. Please check Details property for more information.\r\nValidation failed."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/actiontemplates/{id}/actionsUpdate": {
      "post": {
        "tags": [
          "ActionTemplates"
        ],
        "description": "Updates deployment actions to specific version of action template\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createActionTemplateActions_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionUpdateResultResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionUpdateResultResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied.\r\nRequest failed. Please check Details property for more information.\r\nValidation failed."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{userId}/apikeys": {
      "get": {
        "tags": [
          "ApiKeys"
        ],
        "summary": "Get a list of ApiKeyResources",
        "description": "Lists all API keys for a user, returning the most recent results first.",
        "operationId": "indexApiKeys",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ApiKeyResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ApiKeyResource]"
            }
          },
          "400": {
            "description": "No userId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ApiKeys"
        ],
        "description": "Generates a new API key for the specified user. The API key returned in the result must be saved by the caller, as it cannot be retrieved subsequently from the Octopus server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createApiKey",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ApiKeyResource resource returned",
            "schema": {
              "$ref": "#/definitions/ApiKeyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied.\r\nNo userId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{userId}/apikeys/{id}": {
      "get": {
        "tags": [
          "ApiKeys"
        ],
        "summary": "Get a ApiKeyResource by ID",
        "description": "Gets a API key by ID.",
        "operationId": "getApiKeyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKeyResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ApiKeyResource by ID",
            "schema": {
              "$ref": "#/definitions/ApiKeyResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ApiKeys"
        ],
        "summary": "Delete a ApiKeyResource by ID",
        "description": "Revokes an existing API key.",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ApiKeyResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/artifacts": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Get a list of ArtifactResources",
        "description": "Lists all of the artifacts in the supplied Octopus Deploy Space, from all releases. The results will be sorted by date from most recently to least recently created.",
        "operationId": "indexArtifacts",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ArtifactResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ArtifactResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Create a ArtifactResource",
        "description": "Creates a new artifact.",
        "operationId": "createArtifact",
        "parameters": [
          {
            "name": "ArtifactResource",
            "in": "body",
            "description": "The ArtifactResource resource to create",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ArtifactResource Created",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/artifacts": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Get a list of ArtifactResources",
        "description": "Lists all of the artifacts in the supplied Octopus Deploy Space, from all releases. The results will be sorted by date from most recently to least recently created.",
        "operationId": "indexArtifacts_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ArtifactResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ArtifactResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Create a ArtifactResource",
        "description": "Creates a new artifact.",
        "operationId": "createArtifact_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ArtifactResource",
            "in": "body",
            "description": "The ArtifactResource resource to create",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ArtifactResource Created",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/artifacts/{id}": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Get a ArtifactResource by ID",
        "description": "Gets a single artifact by ID.",
        "operationId": "getArtifactById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ArtifactResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ArtifactResource by ID",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Modify a ArtifactResource by ID",
        "description": "Modifies an existing artifact.",
        "operationId": "updateArtifact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ArtifactResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ArtifactResource",
            "in": "body",
            "description": "The ArtifactResource resource to create",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ArtifactResource Modified",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Delete a ArtifactResource by ID",
        "description": "Deletes an existing artifact.",
        "operationId": "deleteArtifact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ArtifactResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/artifacts/{id}": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Get a ArtifactResource by ID",
        "description": "Gets a single artifact by ID.",
        "operationId": "getArtifactById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ArtifactResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ArtifactResource by ID",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Modify a ArtifactResource by ID",
        "description": "Modifies an existing artifact.",
        "operationId": "updateArtifact_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ArtifactResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ArtifactResource",
            "in": "body",
            "description": "The ArtifactResource resource to create",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ArtifactResource Modified",
            "schema": {
              "$ref": "#/definitions/ArtifactResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Delete a ArtifactResource by ID",
        "description": "Deletes an existing artifact.",
        "operationId": "deleteArtifact_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ArtifactResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/artifacts/{id}/content": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "description": "Gets the content associated with an artifact.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getArtifactContent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the artifact",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "405": {
            "description": "Artifact content supports GET and PUT methods only."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Artifacts"
        ],
        "description": "Sets the content associated with an artifact.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateArtifactContent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the artifact",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "405": {
            "description": "Artifact content supports GET and PUT methods only."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/artifacts/{id}/content": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "description": "Gets the content associated with an artifact.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getArtifactContent_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the artifact",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "405": {
            "description": "Artifact content supports GET and PUT methods only."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Artifacts"
        ],
        "description": "Sets the content associated with an artifact.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateArtifactContent_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the artifact",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "405": {
            "description": "Artifact content supports GET and PUT methods only."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/authentication": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "description": "Provides the details of the enabled authentication providers.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getAuthentication",
        "responses": {
          "200": {
            "description": "AuthenticationResource resource returned",
            "schema": {
              "$ref": "#/definitions/AuthenticationResource"
            }
          }
        }
      }
    },
    "/api/authentication/checklogininitiated": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Given a url query string, determines whether an external server (.e.g Okta) has initiated login and if so the provider's name\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createLoginInitiated",
        "responses": {
          "200": {
            "description": "LoginInitiatedResource resource returned",
            "schema": {
              "$ref": "#/definitions/LoginInitiatedResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        }
      }
    },
    "/api/build-information": {
      "get": {
        "tags": [
          "BuildInformation"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getBuildInformation",
        "responses": {
          "200": {
            "description": "ResourceCollection[OctopusPackageVersionBuildInformationMappedResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[OctopusPackageVersionBuildInformationMappedResource]"
            }
          },
          "400": {
            "description": "Only one of either packageId or filter may be specified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "BuildInformation"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createBuildInformation",
        "responses": {
          "200": {
            "description": "OctopusPackageVersionBuildInformationMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
            }
          },
          "400": {
            "description": "Invalid package metadata"
          },
          "409": {
            "description": "Metadata for the specified Package ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/build-information": {
      "get": {
        "tags": [
          "BuildInformation"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getBuildInformation_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[OctopusPackageVersionBuildInformationMappedResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[OctopusPackageVersionBuildInformationMappedResource]"
            }
          },
          "400": {
            "description": "Only one of either packageId or filter may be specified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "BuildInformation"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createBuildInformation_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageVersionBuildInformationMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
            }
          },
          "400": {
            "description": "Invalid package metadata"
          },
          "409": {
            "description": "Metadata for the specified Package ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/build-information/{id}": {
      "get": {
        "tags": [
          "BuildInformation"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getBuildInformation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageVersionBuildInformationMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "BuildInformation"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deleteBuildInformationDeleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the build information resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/build-information/{id}": {
      "get": {
        "tags": [
          "BuildInformation"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getBuildInformation_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageVersionBuildInformationMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "BuildInformation"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deleteBuildInformationDeleteById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the build information resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/build-information/bulk": {
      "delete": {
        "tags": [
          "BuildInformation"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deleteBuildInformationDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of IDs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No ids parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/build-information/bulk": {
      "delete": {
        "tags": [
          "BuildInformation"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deleteBuildInformationDeleteByIds_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of IDs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No ids parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/certificates": {
      "get": {
        "tags": [
          "CertificateConfiguration"
        ],
        "summary": "Get a list of CertificateConfigurationResources",
        "description": "Lists all of the X509 certificates in the current Octopus Deploy installation.",
        "operationId": "indexCertificateConfigurations",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[CertificateConfigurationResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[CertificateConfigurationResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/(?<id>(?i)^(certificate-global))": {
      "get": {
        "tags": [
          "CertificateConfiguration"
        ],
        "summary": "Get a CertificateConfigurationResource by ID",
        "description": "Gets a certificate by ID.",
        "operationId": "getCertificateConfigurationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CertificateConfigurationResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load CertificateConfigurationResource by ID",
            "schema": {
              "$ref": "#/definitions/CertificateConfigurationResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/certificates/{id}": {
      "get": {
        "tags": [
          "CertificateConfiguration"
        ],
        "summary": "Get a CertificateConfigurationResource by ID",
        "description": "Gets a certificate by ID.",
        "operationId": "getCertificateConfigurationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CertificateConfigurationResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load CertificateConfigurationResource by ID",
            "schema": {
              "$ref": "#/definitions/CertificateConfigurationResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/certificates/{id}/public-cer": {
      "get": {
        "tags": [
          "CertificateConfiguration"
        ],
        "description": "Downloads the public portion of the certificate in .cer format\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getCertificatePublicCerDownload",
        "produces": [
          "application/x-x509-ca-cert"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get a list of CertificateResources",
        "description": "Lists X.509 certificates managed by Octopus",
        "operationId": "indexCertificates",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[CertificateResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[CertificateResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Certificates"
        ],
        "summary": "Create a CertificateResource",
        "description": "Adds a new certificate",
        "operationId": "createCertificate",
        "parameters": [
          {
            "name": "CertificateResource",
            "in": "body",
            "description": "The CertificateResource resource to create",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CertificateResource Created",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/certificates": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get a list of CertificateResources",
        "description": "Lists X.509 certificates managed by Octopus",
        "operationId": "indexCertificates_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[CertificateResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[CertificateResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Certificates"
        ],
        "summary": "Create a CertificateResource",
        "description": "Adds a new certificate",
        "operationId": "createCertificate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "CertificateResource",
            "in": "body",
            "description": "The CertificateResource resource to create",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CertificateResource Created",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/all": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get a list of CertificateResources",
        "description": "Lists X.509 certificates managed by Octopus",
        "operationId": "listAllCertificates",
        "responses": {
          "200": {
            "description": "Load all CertificateResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CertificateResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/certificates/all": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get a list of CertificateResources",
        "description": "Lists X.509 certificates managed by Octopus",
        "operationId": "listAllCertificates_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all CertificateResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CertificateResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/(?<idOrThumbprint>(?i)^(?!(certificate-global)).*)": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "description": "Get a certificate by ID or thumbprint\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getCertificateByIdOrThumbprint",
        "parameters": [
          {
            "name": "idOrThumbprint",
            "in": "path",
            "description": "ID or thumbprint of certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "No idOrThumbprint parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/certificates/(?<idOrThumbprint>(?i)^(?!(certificate-global)).*)": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "description": "Get a certificate by ID or thumbprint\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getCertificateByIdOrThumbprint_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "idOrThumbprint",
            "in": "path",
            "description": "ID or thumbprint of certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "No idOrThumbprint parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}/usages": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "description": "Get the usages of a certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getCertificateUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/certificates/{id}/usages": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "description": "Get the usages of a certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getCertificateUsage_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}/export": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "description": "Exports the certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getCertificateExport",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid format option.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/certificates/{id}/export": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "description": "Exports the certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getCertificateExport_Spaces",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid format option.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}": {
      "put": {
        "tags": [
          "Certificates"
        ],
        "summary": "Modify a CertificateResource by ID",
        "description": "Modifies an existing certificate",
        "operationId": "updateCertificate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CertificateResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "CertificateResource",
            "in": "body",
            "description": "The CertificateResource resource to create",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource Modified",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Certificates"
        ],
        "summary": "Delete a CertificateResource by ID",
        "description": "Permanently deletes a certificate",
        "operationId": "deleteCertificate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CertificateResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/certificates/{id}": {
      "put": {
        "tags": [
          "Certificates"
        ],
        "summary": "Modify a CertificateResource by ID",
        "description": "Modifies an existing certificate",
        "operationId": "updateCertificate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CertificateResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "CertificateResource",
            "in": "body",
            "description": "The CertificateResource resource to create",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource Modified",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Certificates"
        ],
        "summary": "Delete a CertificateResource by ID",
        "description": "Permanently deletes a certificate",
        "operationId": "deleteCertificate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CertificateResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}/archive": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "description": "Archives a certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createCertificateArchive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/certificates/{id}/archive": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "description": "Archives a certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createCertificateArchive_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}/unarchive": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "description": "Un-archives a certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createCertificateUnArchive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided.\r\nYou cannot unarchive a certificate that has been replaced."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/certificates/{id}/unarchive": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "description": "Un-archives a certificate\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createCertificateUnArchive_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided.\r\nYou cannot unarchive a certificate that has been replaced."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/certificates/{id}/replace": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "description": "Replaces a certificate with another\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createCertificateReplace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Certificate Invalid.\r\nNo Certificate Data was provided.\r\nNo id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/certificates/{id}/replace": {
      "post": {
        "tags": [
          "Certificates"
        ],
        "description": "Replaces a certificate with another\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createCertificateReplace_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CertificateResource resource returned",
            "schema": {
              "$ref": "#/definitions/CertificateResource"
            }
          },
          "400": {
            "description": "Certificate Invalid.\r\nNo Certificate Data was provided.\r\nNo id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/channels/rule-test": {
      "get": {
        "tags": [
          "Channels"
        ],
        "description": "Perform channel version rule test against provided package version\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getVersionRuleTest",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "description": "Perform channel version rule test against provided package version\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createVersionRuleTest",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/channels/rule-test": {
      "get": {
        "tags": [
          "Channels"
        ],
        "description": "Perform channel version rule test against provided package version\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getVersionRuleTest_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "description": "Perform channel version rule test against provided package version\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createVersionRuleTest_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/channels/{id}": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a ChannelResource by ID",
        "description": "Get a channel",
        "operationId": "getChannelById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ChannelResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ChannelResource by ID",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Channels"
        ],
        "summary": "Modify a ChannelResource by ID",
        "description": "Updates an existing channel",
        "operationId": "updateChannel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ChannelResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ChannelResource",
            "in": "body",
            "description": "The ChannelResource resource to create",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ChannelResource Modified",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Channels"
        ],
        "summary": "Delete a ChannelResource by ID",
        "description": "Deletes an existing channel.",
        "operationId": "deleteChannel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ChannelResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/channels/{id}": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a ChannelResource by ID",
        "description": "Get a channel",
        "operationId": "getChannelById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ChannelResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ChannelResource by ID",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Channels"
        ],
        "summary": "Modify a ChannelResource by ID",
        "description": "Updates an existing channel",
        "operationId": "updateChannel_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ChannelResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ChannelResource",
            "in": "body",
            "description": "The ChannelResource resource to create",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ChannelResource Modified",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Channels"
        ],
        "summary": "Delete a ChannelResource by ID",
        "description": "Deletes an existing channel.",
        "operationId": "deleteChannel_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ChannelResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all of the channels in the supplied Octopus Deploy Space, from all projects, sorted by name.",
        "operationId": "indexChannels",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ChannelResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ChannelResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Create a ChannelResource",
        "description": "Creates a new channel",
        "operationId": "createChannel",
        "parameters": [
          {
            "name": "ChannelResource",
            "in": "body",
            "description": "The ChannelResource resource to create",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ChannelResource Created",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all of the channels in the supplied Octopus Deploy Space, from all projects, sorted by name.",
        "operationId": "indexChannels_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ChannelResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ChannelResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Create a ChannelResource",
        "description": "Creates a new channel",
        "operationId": "createChannel_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ChannelResource",
            "in": "body",
            "description": "The ChannelResource resource to create",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ChannelResource Created",
            "schema": {
              "$ref": "#/definitions/ChannelResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/channels/all": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all of the channels in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllChannels",
        "responses": {
          "200": {
            "description": "Load all ChannelResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/channels/all": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all of the channels in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllChannels_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all ChannelResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/channels/{id}/releases": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ReleaseResources",
        "description": "Lists all of the releases that belong to the given channel. Releases will be ordered from most recent to least recent.",
        "operationId": "indexReleases",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Channel",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ReleaseResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ReleaseResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/channels/{id}/releases": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ReleaseResources",
        "description": "Lists all of the releases that belong to the given channel. Releases will be ordered from most recent to least recent.",
        "operationId": "indexReleases_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Channel",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ReleaseResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ReleaseResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all the channels for the given project",
        "operationId": "indexChannels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ChannelResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ChannelResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{id}/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get a list of ChannelResources",
        "description": "Lists all the channels for the given project",
        "operationId": "indexChannels_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ChannelResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ChannelResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/cloudtemplate/{id}/metadata": {
      "post": {
        "tags": [
          "CloudTemplate"
        ],
        "description": "Provides parameter metadata for a cloud (AWS etc) resource template\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createCloudTemplateMetadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "CloudTemplateMetadata resource returned",
            "schema": {
              "$ref": "#/definitions/CloudTemplateMetadata"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/communityactiontemplates/{id}": {
      "get": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "summary": "Get a CommunityActionTemplateResource by ID",
        "description": "Gets a single community step template.",
        "operationId": "getCommunityActionTemplateById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CommunityActionTemplateResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load CommunityActionTemplateResource by ID",
            "schema": {
              "$ref": "#/definitions/CommunityActionTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/communityactiontemplates": {
      "get": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "summary": "Get a list of CommunityActionTemplateResources",
        "description": "",
        "operationId": "indexCommunityActionTemplates",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[CommunityActionTemplateResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[CommunityActionTemplateResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/communityactiontemplates/{id}/actiontemplate/{spaceId?}": {
      "get": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "description": "Gets installed version of the template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getActionTemplateBasedOnCommunityActionTemplate",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "ID of the space",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/communityactiontemplates/{id}/logo": {
      "get": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "description": "Gets the logo associated with the community step template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getCommunityActionTemplateLogo",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/communityactiontemplates/{id}/installation/{spaceId?}": {
      "put": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "description": "Updates installed community step template to the latest version.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateCommunityActionTemplateInstallationPut",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "ID of the space",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Action template not valid.\r\nAction template not yet installed.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "CommunityActionTemplates"
        ],
        "description": "Installs community step template.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createCommunityActionTemplateInstallation",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "ID of the space",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "ActionTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ActionTemplateResource"
            }
          },
          "400": {
            "description": "Action Template already installed.\r\nAction Template is invalid.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getConfigurationSectionList",
        "responses": {
          "200": {
            "description": "ResourceCollection[ConfigurationSectionMetadata] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ConfigurationSectionMetadata]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/{id}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getConfigurationSectionMetadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ConfigurationSectionMetadata resource returned",
            "schema": {
              "$ref": "#/definitions/ConfigurationSectionMetadata"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/{id}/metadata": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getConfigurationItemMetadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata resource returned",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/configuration/{id}/values": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getConfigurationItemValues",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Object resource returned",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Configuration"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateConfigurationItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Object resource returned",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/dashboardconfiguration": {
      "get": {
        "tags": [
          "DashboardConfigurations"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDashboardConfiguration",
        "responses": {
          "200": {
            "description": "DashboardConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "DashboardConfigurations"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateDashboardConfiguration",
        "responses": {
          "200": {
            "description": "DashboardConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardConfigurationResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/dashboardconfiguration": {
      "get": {
        "tags": [
          "DashboardConfigurations"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDashboardConfiguration_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "DashboardConfigurations"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateDashboardConfiguration_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardConfigurationResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/dashboard": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDashboardView",
        "responses": {
          "200": {
            "description": "DashboardResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/dashboard": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDashboardView_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/dashboard/dynamic": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDynamicDashboardView",
        "responses": {
          "200": {
            "description": "DashboardResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/dashboard/dynamic": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDynamicDashboardView_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardResource resource returned",
            "schema": {
              "$ref": "#/definitions/DashboardResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/deploymentprocesses/{id}": {
      "get": {
        "tags": [
          "DeploymentProcesses"
        ],
        "summary": "Get a DeploymentProcessResource by ID",
        "description": "Gets a deployment process by ID.",
        "operationId": "getDeploymentProcessById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentProcessResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load DeploymentProcessResource by ID",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "DeploymentProcesses"
        ],
        "description": "Modifies a deployment process. Only allowed for deployment processes owned by a project (cannot be used to change the deployment process owned by a release).\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateDeploymentProcess",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentProcessResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          },
          "400": {
            "description": "Changes to this deployment process could not be saved, because another user has made changes to the deployment process between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nValidation failed.\r\nYou cannot modify this deployment process because it is frozen. You'll need to create a new deployment process instead."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/deploymentprocesses/{id}": {
      "get": {
        "tags": [
          "DeploymentProcesses"
        ],
        "summary": "Get a DeploymentProcessResource by ID",
        "description": "Gets a deployment process by ID.",
        "operationId": "getDeploymentProcessById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentProcessResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load DeploymentProcessResource by ID",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "DeploymentProcesses"
        ],
        "description": "Modifies a deployment process. Only allowed for deployment processes owned by a project (cannot be used to change the deployment process owned by a release).\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateDeploymentProcess_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentProcessResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentProcessResource"
            }
          },
          "400": {
            "description": "Changes to this deployment process could not be saved, because another user has made changes to the deployment process between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nValidation failed.\r\nYou cannot modify this deployment process because it is frozen. You'll need to create a new deployment process instead."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/deploymentprocesses": {
      "get": {
        "tags": [
          "DeploymentProcesses"
        ],
        "summary": "Get a list of DeploymentProcessResources",
        "description": "Lists all the deployment processes in the supplied Octopus Deploy Space, sorted by Id",
        "operationId": "indexDeploymentProcesses",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentProcessResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentProcessResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/deploymentprocesses": {
      "get": {
        "tags": [
          "DeploymentProcesses"
        ],
        "summary": "Get a list of DeploymentProcessResources",
        "description": "Lists all the deployment processes in the supplied Octopus Deploy Space, sorted by Id",
        "operationId": "indexDeploymentProcesses_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentProcessResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentProcessResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/deploymentprocesses/{id}/template": {
      "get": {
        "tags": [
          "DeploymentProcesses"
        ],
        "description": "Gets all of the information necessary for creating or editing a release using this deployment process.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getReleaseTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseTemplateResource"
            }
          },
          "400": {
            "description": "A channelId must be provided when more than one exists for that project and no default channel has been specified.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/deploymentprocesses/{id}/template": {
      "get": {
        "tags": [
          "DeploymentProcesses"
        ],
        "description": "Gets all of the information necessary for creating or editing a release using this deployment process.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getReleaseTemplate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseTemplateResource"
            }
          },
          "400": {
            "description": "A channelId must be provided when more than one exists for that project and no default channel has been specified.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/deployments": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "Get a list of DeploymentResources",
        "description": "Lists all of the deployments in the supplied Octopus Deploy Space, from projects, releases and environments accessible by the current user. The results will be sorted from most recent to least recent deployment.",
        "operationId": "indexDeployments",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Deployments"
        ],
        "description": "Creates a new deployment.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createDeploymentCreate",
        "responses": {
          "201": {
            "description": "DeploymentResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentResource"
            }
          },
          "400": {
            "description": "Deployment creation failed.\r\nDeployment Schedule is invalid.\r\nLicense is not compliant.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/deployments": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "Get a list of DeploymentResources",
        "description": "Lists all of the deployments in the supplied Octopus Deploy Space, from projects, releases and environments accessible by the current user. The results will be sorted from most recent to least recent deployment.",
        "operationId": "indexDeployments_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Deployments"
        ],
        "description": "Creates a new deployment.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createDeploymentCreate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "DeploymentResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentResource"
            }
          },
          "400": {
            "description": "Deployment creation failed.\r\nDeployment Schedule is invalid.\r\nLicense is not compliant.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/deployments/{id}": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "Get a DeploymentResource by ID",
        "description": "Gets a deployment by ID.",
        "operationId": "getDeploymentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load DeploymentResource by ID",
            "schema": {
              "$ref": "#/definitions/DeploymentResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Deployments"
        ],
        "summary": "Delete a DeploymentResource by ID",
        "description": "Deletes a deployment.",
        "operationId": "deleteDeployment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/deployments/{id}": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "summary": "Get a DeploymentResource by ID",
        "description": "Gets a deployment by ID.",
        "operationId": "getDeploymentById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load DeploymentResource by ID",
            "schema": {
              "$ref": "#/definitions/DeploymentResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Deployments"
        ],
        "summary": "Delete a DeploymentResource by ID",
        "description": "Deletes a deployment.",
        "operationId": "deleteDeployment_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/all": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a list of EnvironmentResources",
        "description": "Lists the name and ID of all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "listAllEnvironments",
        "responses": {
          "200": {
            "description": "Load all EnvironmentResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/environments/all": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a list of EnvironmentResources",
        "description": "Lists the name and ID of all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "listAllEnvironments_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all EnvironmentResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/{id}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a EnvironmentResource by ID",
        "description": "Gets a single environment by ID.",
        "operationId": "getEnvironmentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EnvironmentResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load EnvironmentResource by ID",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Modify a EnvironmentResource by ID",
        "description": "Modifies an existing environment.",
        "operationId": "updateEnvironment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EnvironmentResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "EnvironmentResource",
            "in": "body",
            "description": "The EnvironmentResource resource to create",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EnvironmentResource Modified",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Environments"
        ],
        "summary": "Delete a EnvironmentResource by ID",
        "description": "Deletes an existing environment.",
        "operationId": "deleteEnvironment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EnvironmentResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/environments/{id}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a EnvironmentResource by ID",
        "description": "Gets a single environment by ID.",
        "operationId": "getEnvironmentById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EnvironmentResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load EnvironmentResource by ID",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Modify a EnvironmentResource by ID",
        "description": "Modifies an existing environment.",
        "operationId": "updateEnvironment_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EnvironmentResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "EnvironmentResource",
            "in": "body",
            "description": "The EnvironmentResource resource to create",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EnvironmentResource Modified",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Environments"
        ],
        "summary": "Delete a EnvironmentResource by ID",
        "description": "Deletes an existing environment.",
        "operationId": "deleteEnvironment_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EnvironmentResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/{id}/metadata": {
      "get": {
        "tags": [
          "Environments"
        ],
        "description": "Gets the custom settings metadata from the extensions.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentEnvironmentSettingsMetadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List[DeploymentEnvironmentSettingsMetadata] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentEnvironmentSettingsMetadata"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/environments/{id}/metadata": {
      "get": {
        "tags": [
          "Environments"
        ],
        "description": "Gets the custom settings metadata from the extensions.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentEnvironmentSettingsMetadata_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List[DeploymentEnvironmentSettingsMetadata] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentEnvironmentSettingsMetadata"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a list of EnvironmentResources",
        "description": "Lists all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "indexEnvironments",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[EnvironmentResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[EnvironmentResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Create a EnvironmentResource",
        "description": "Creates a new environment.",
        "operationId": "createEnvironment",
        "parameters": [
          {
            "name": "EnvironmentResource",
            "in": "body",
            "description": "The EnvironmentResource resource to create",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "EnvironmentResource Created",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/environments": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a list of EnvironmentResources",
        "description": "Lists all of the environments in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "indexEnvironments_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[EnvironmentResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[EnvironmentResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Create a EnvironmentResource",
        "description": "Creates a new environment.",
        "operationId": "createEnvironment_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "EnvironmentResource",
            "in": "body",
            "description": "The EnvironmentResource resource to create",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "EnvironmentResource Created",
            "schema": {
              "$ref": "#/definitions/EnvironmentResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/summary": {
      "get": {
        "tags": [
          "Environments"
        ],
        "description": "Lists all environments, including a summary of machine information\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getEnvironmentsSummary",
        "responses": {
          "200": {
            "description": "EnvironmentsSummaryResource resource returned",
            "schema": {
              "$ref": "#/definitions/EnvironmentsSummaryResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/environments/summary": {
      "get": {
        "tags": [
          "Environments"
        ],
        "description": "Lists all environments, including a summary of machine information\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getEnvironmentsSummary_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "EnvironmentsSummaryResource resource returned",
            "schema": {
              "$ref": "#/definitions/EnvironmentsSummaryResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/{id}/machines": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the machines that belong to the given environment.",
        "operationId": "indexDeploymentTargets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Environment",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentTargetResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentTargetResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/environments/{id}/machines": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the machines that belong to the given environment.",
        "operationId": "indexDeploymentTargets_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Environment",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentTargetResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentTargetResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/{id}/singlyScopedVariableDetails": {
      "get": {
        "tags": [
          "Environments"
        ],
        "description": "Lists all the variable set names (projects and library variable sets) that have variables that are scoped to only the given environment\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getVariablesScopedToEnvironment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariablesScopedToEnvironmentResponse resource returned",
            "schema": {
              "$ref": "#/definitions/VariablesScopedToEnvironmentResponse"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/environments/{id}/singlyScopedVariableDetails": {
      "get": {
        "tags": [
          "Environments"
        ],
        "description": "Lists all the variable set names (projects and library variable sets) that have variables that are scoped to only the given environment\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getVariablesScopedToEnvironment_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariablesScopedToEnvironmentResponse resource returned",
            "schema": {
              "$ref": "#/definitions/VariablesScopedToEnvironmentResponse"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/environments/sortorder": {
      "put": {
        "tags": [
          "Environments"
        ],
        "description": "Takes an array of environment IDs as the request body, uses the order of items in the array to sort the environments on the server. The ID of every environment must be specified.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateSortEnvironments",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/environments/sortorder": {
      "put": {
        "tags": [
          "Environments"
        ],
        "description": "Takes an array of environment IDs as the request body, uses the order of items in the array to sort the environments on the server. The ID of every environment must be specified.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateSortEnvironments_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get a EventResource by ID",
        "description": "Gets a single event by ID.",
        "operationId": "getEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EventResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load EventResource by ID",
            "schema": {
              "$ref": "#/definitions/EventResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get a EventResource by ID",
        "description": "Gets a single event by ID.",
        "operationId": "getEventById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EventResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load EventResource by ID",
            "schema": {
              "$ref": "#/definitions/EventResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "List all of the the audit events collected to date. Events can be filtered by various criteria. Events will be ordered by the date of the event, descending.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListEvents",
        "responses": {
          "200": {
            "description": "OK\r\nResourceCollection[EventResource] resource returned"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "List all of the the audit events collected to date. Events can be filtered by various criteria. Events will be ordered by the date of the event, descending.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListEvents_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\r\nResourceCollection[EventResource] resource returned"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/events/categories": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists event categories.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListEventCategories",
        "responses": {
          "200": {
            "description": "IEnumerable[EventCategoryResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventCategoryResource"
              }
            }
          }
        }
      }
    },
    "/api/{baseSpaceId}/events/categories": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists event categories.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListEventCategories_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[EventCategoryResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventCategoryResource"
              }
            }
          }
        }
      }
    },
    "/api/events/agents": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists event agents.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListEventAgents",
        "responses": {
          "200": {
            "description": "IEnumerable[EventAgentResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventAgentResource"
              }
            }
          }
        }
      }
    },
    "/api/{baseSpaceId}/events/agents": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists event agents.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListEventAgents_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[EventAgentResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventAgentResource"
              }
            }
          }
        }
      }
    },
    "/api/events/groups": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists subscription event groups.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListEventGroups",
        "responses": {
          "200": {
            "description": "IEnumerable[EventGroupResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventGroupResource"
              }
            }
          }
        }
      }
    },
    "/api/{baseSpaceId}/events/groups": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists subscription event groups.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListEventGroups_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[EventGroupResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventGroupResource"
              }
            }
          }
        }
      }
    },
    "/api/events/documenttypes": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists subscription event document types.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListEventDocumentTypes",
        "responses": {
          "200": {
            "description": "IEnumerable[DocumentTypeDocument] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentTypeDocument"
              }
            }
          }
        }
      }
    },
    "/api/{baseSpaceId}/events/documenttypes": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Lists subscription event document types.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListEventDocumentTypes_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[DocumentTypeDocument] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentTypeDocument"
              }
            }
          }
        }
      }
    },
    "/api/externalsecuritygroupproviders": {
      "get": {
        "tags": [
          "ExternalSecurityGroups"
        ],
        "description": "Lists the authentication providers that support external group lookups.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListProvidersThatSupportExternalSecurityGroups",
        "responses": {
          "200": {
            "description": "IEnumerable[AuthenticationProviderThatSupportsGroups] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuthenticationProviderThatSupportsGroups"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/featuresconfiguration": {
      "get": {
        "tags": [
          "FeaturesConfiguration"
        ],
        "description": "Gets information about the features configuration in use by the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getFeaturesConfiguration",
        "responses": {
          "200": {
            "description": "FeaturesConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/FeaturesConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "FeaturesConfiguration"
        ],
        "description": "Updates the features configuration used by the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateFeaturesConfiguration",
        "responses": {
          "200": {
            "description": "FeaturesConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/FeaturesConfigurationResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/all": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a list of FeedResources",
        "description": "Lists all the feeds in the specified Octopus Deploy Space.",
        "operationId": "listAllFeeds",
        "responses": {
          "200": {
            "description": "Load all FeedResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeedResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/feeds/all": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a list of FeedResources",
        "description": "Lists all the feeds in the specified Octopus Deploy Space.",
        "operationId": "listAllFeeds_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all FeedResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeedResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/stats": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "description": "Provides statistics for the built-in package repository.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getBuiltInFeedStats",
        "responses": {
          "200": {
            "description": "BuiltInFeedStatsResource resource returned",
            "schema": {
              "$ref": "#/definitions/BuiltInFeedStatsResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/feeds/stats": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "description": "Provides statistics for the built-in package repository.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getBuiltInFeedStats_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "BuiltInFeedStatsResource resource returned",
            "schema": {
              "$ref": "#/definitions/BuiltInFeedStatsResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a FeedResource by ID",
        "description": "Gets a single feed by ID.",
        "operationId": "getFeedById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeedResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load FeedResource by ID",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Feeds"
        ],
        "summary": "Modify a FeedResource by ID",
        "description": "Modifies an existing feed.",
        "operationId": "updateFeed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeedResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "FeedResource",
            "in": "body",
            "description": "The FeedResource resource to create",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FeedResource Modified",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Feeds"
        ],
        "summary": "Delete a FeedResource by ID",
        "description": "Deletes an existing feed.",
        "operationId": "deleteFeed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeedResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/feeds/{id}": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a FeedResource by ID",
        "description": "Gets a single feed by ID.",
        "operationId": "getFeedById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeedResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load FeedResource by ID",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Feeds"
        ],
        "summary": "Modify a FeedResource by ID",
        "description": "Modifies an existing feed.",
        "operationId": "updateFeed_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeedResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "FeedResource",
            "in": "body",
            "description": "The FeedResource resource to create",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FeedResource Modified",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Feeds"
        ],
        "summary": "Delete a FeedResource by ID",
        "description": "Deletes an existing feed.",
        "operationId": "deleteFeed_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeedResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a list of FeedResources",
        "description": "Lists all the feeds used by the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "indexFeeds",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[FeedResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[FeedResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Feeds"
        ],
        "summary": "Create a FeedResource",
        "description": "Creates a feed.",
        "operationId": "createFeed",
        "parameters": [
          {
            "name": "FeedResource",
            "in": "body",
            "description": "The FeedResource resource to create",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "FeedResource Created",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/feeds": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "summary": "Get a list of FeedResources",
        "description": "Lists all the feeds used by the current Octopus installation. The results will be sorted alphabetically by name.",
        "operationId": "indexFeeds_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[FeedResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[FeedResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Feeds"
        ],
        "summary": "Create a FeedResource",
        "description": "Creates a feed.",
        "operationId": "createFeed_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "FeedResource",
            "in": "body",
            "description": "The FeedResource resource to create",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "FeedResource Created",
            "schema": {
              "$ref": "#/definitions/FeedResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}/packages/search": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageSearch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[PackageDescriptionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[PackageDescriptionResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/feeds/{id}/packages/search": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageSearch_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[PackageDescriptionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[PackageDescriptionResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}/packages/versions": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageVersionSearch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageId",
            "in": "query",
            "description": "Package ID to search",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[PackageVersionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[PackageVersionResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo packageId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/feeds/{id}/packages/versions": {
      "get": {
        "tags": [
          "Feeds"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageVersionSearch_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageId",
            "in": "query",
            "description": "Package ID to search",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[PackageVersionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[PackageVersionResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo packageId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api": {
      "get": {
        "tags": [
          "Home"
        ],
        "description": "Returns a document describing the current Octopus Server and links to other parts of the API.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getHome",
        "responses": {
          "200": {
            "description": "RootResource resource returned",
            "schema": {
              "$ref": "#/definitions/RootResource"
            }
          }
        }
      }
    },
    "/api/interruptions": {
      "get": {
        "tags": [
          "Interruptions"
        ],
        "summary": "Get a list of InterruptionResources",
        "description": "Lists interruptions for user attention. The results will be sorted by date from most recently to least recently created.",
        "operationId": "indexInterruptions",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[InterruptionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[InterruptionResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/interruptions": {
      "get": {
        "tags": [
          "Interruptions"
        ],
        "summary": "Get a list of InterruptionResources",
        "description": "Lists interruptions for user attention. The results will be sorted by date from most recently to least recently created.",
        "operationId": "indexInterruptions_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[InterruptionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[InterruptionResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/interruptions/{id}": {
      "get": {
        "tags": [
          "Interruptions"
        ],
        "summary": "Get a InterruptionResource by ID",
        "description": "Gets a single interruption by ID.",
        "operationId": "getInterruptionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the InterruptionResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load InterruptionResource by ID",
            "schema": {
              "$ref": "#/definitions/InterruptionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/interruptions/{id}": {
      "get": {
        "tags": [
          "Interruptions"
        ],
        "summary": "Get a InterruptionResource by ID",
        "description": "Gets a single interruption by ID.",
        "operationId": "getInterruptionById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the InterruptionResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load InterruptionResource by ID",
            "schema": {
              "$ref": "#/definitions/InterruptionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/interruptions/{id}/submit": {
      "post": {
        "tags": [
          "Interruptions"
        ],
        "description": "Submits a dictionary of form values for the interruption. Only the user with responsibility for this interruption can submit this form.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createSubmitInterruption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "InterruptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/InterruptionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied.\r\nSomeone else has taken responsibility for this interruption, and only they are allowed to submit it.\r\nThe interruption has already been submitted.\r\nThere were errors with the form.\r\nYou must take responsibility for this interruption before attempting to submit it."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/interruptions/{id}/submit": {
      "post": {
        "tags": [
          "Interruptions"
        ],
        "description": "Submits a dictionary of form values for the interruption. Only the user with responsibility for this interruption can submit this form.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createSubmitInterruption_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "InterruptionResource resource returned",
            "schema": {
              "$ref": "#/definitions/InterruptionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied.\r\nSomeone else has taken responsibility for this interruption, and only they are allowed to submit it.\r\nThe interruption has already been submitted.\r\nThere were errors with the form.\r\nYou must take responsibility for this interruption before attempting to submit it."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/interruptions/{id}/responsible": {
      "get": {
        "tags": [
          "Interruptions"
        ],
        "description": "Gets the user that is currently responsible for this interruption.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getInterruptionResponsibility",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis interruption has already been submitted, possibly by another user."
          },
          "405": {
            "description": "MethodNotAllowed"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Interruptions"
        ],
        "description": "Allows the current user to take responsibility for this interruption. Only users in one of the responsible teams on this interruption can take responsibility for it.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateInterruptionResponsibility",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis interruption has already been submitted, possibly by another user."
          },
          "405": {
            "description": "MethodNotAllowed"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/interruptions/{id}/responsible": {
      "get": {
        "tags": [
          "Interruptions"
        ],
        "description": "Gets the user that is currently responsible for this interruption.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getInterruptionResponsibility_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis interruption has already been submitted, possibly by another user."
          },
          "405": {
            "description": "MethodNotAllowed"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Interruptions"
        ],
        "description": "Allows the current user to take responsibility for this interruption. Only users in one of the responsible teams on this interruption can take responsibility for it.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateInterruptionResponsibility_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis interruption has already been submitted, possibly by another user."
          },
          "405": {
            "description": "MethodNotAllowed"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/invitations/{id}": {
      "get": {
        "tags": [
          "Invitations"
        ],
        "summary": "Get a InvitationResource by ID",
        "description": "Gets an existing invitation by ID.",
        "operationId": "getInvitationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the InvitationResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load InvitationResource by ID",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/users/invitations/{id}": {
      "get": {
        "tags": [
          "Invitations"
        ],
        "summary": "Get a InvitationResource by ID",
        "description": "Gets an existing invitation by ID.",
        "operationId": "getInvitationById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the InvitationResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load InvitationResource by ID",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/invitations": {
      "post": {
        "tags": [
          "Invitations"
        ],
        "summary": "Create a InvitationResource",
        "description": "Invite a user to register.",
        "operationId": "createInvitation",
        "parameters": [
          {
            "name": "InvitationResource",
            "in": "body",
            "description": "The InvitationResource resource to create",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "InvitationResource Created",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/users/invitations": {
      "post": {
        "tags": [
          "Invitations"
        ],
        "summary": "Create a InvitationResource",
        "description": "Invite a user to register.",
        "operationId": "createInvitation_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "InvitationResource",
            "in": "body",
            "description": "The InvitationResource resource to create",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "InvitationResource Created",
            "schema": {
              "$ref": "#/definitions/InvitationResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/.well-known/acme-challenge//{token}": {
      "get": {
        "tags": [
          "LetsEncrypt"
        ],
        "description": "Returns the computed HTTP challenge for a given token\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLetsEncryptHttpChallenge",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "LetsEncrypt response token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No token parameter was provided."
          }
        }
      }
    },
    "api/letsencryptconfiguration": {
      "get": {
        "tags": [
          "LetsEncrypt"
        ],
        "description": "Returns the current Let's Encrypt configuration\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLetsEncryptConfiguration",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "LetsEncrypt"
        ],
        "description": "Updates the Let's Encrypt configuration used by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateLetsEncryptConfiguration",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/libraryvariablesets/all": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Get a list of LibraryVariableSetResources",
        "description": "Lists all the library variable sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllLibraryVariableSets",
        "responses": {
          "200": {
            "description": "Load all LibraryVariableSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LibraryVariableSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/libraryvariablesets/all": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Get a list of LibraryVariableSetResources",
        "description": "Lists all the library variable sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllLibraryVariableSets_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all LibraryVariableSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LibraryVariableSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/libraryvariablesets": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Get a list of LibraryVariableSetResources",
        "description": "Lists all of the library variable sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexLibraryVariableSets",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[LibraryVariableSetResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[LibraryVariableSetResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Create a LibraryVariableSetResource",
        "description": "Creates a new library variable set.",
        "operationId": "createLibraryVariableSet",
        "parameters": [
          {
            "name": "LibraryVariableSetResource",
            "in": "body",
            "description": "The LibraryVariableSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LibraryVariableSetResource Created",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/libraryvariablesets": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Get a list of LibraryVariableSetResources",
        "description": "Lists all of the library variable sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexLibraryVariableSets_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[LibraryVariableSetResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[LibraryVariableSetResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Create a LibraryVariableSetResource",
        "description": "Creates a new library variable set.",
        "operationId": "createLibraryVariableSet_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "LibraryVariableSetResource",
            "in": "body",
            "description": "The LibraryVariableSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LibraryVariableSetResource Created",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/libraryvariablesets/{id}": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Get a LibraryVariableSetResource by ID",
        "description": "Gets a single library variable set by ID",
        "operationId": "getLibraryVariableSetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LibraryVariableSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load LibraryVariableSetResource by ID",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Modify a LibraryVariableSetResource by ID",
        "description": "Modifies an existing library variable set.",
        "operationId": "updateLibraryVariableSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LibraryVariableSetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "LibraryVariableSetResource",
            "in": "body",
            "description": "The LibraryVariableSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LibraryVariableSetResource Modified",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Delete a LibraryVariableSetResource by ID",
        "description": "Deletes an existing library variable set.",
        "operationId": "deleteLibraryVariableSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LibraryVariableSetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/libraryvariablesets/{id}": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Get a LibraryVariableSetResource by ID",
        "description": "Gets a single library variable set by ID",
        "operationId": "getLibraryVariableSetById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LibraryVariableSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load LibraryVariableSetResource by ID",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Modify a LibraryVariableSetResource by ID",
        "description": "Modifies an existing library variable set.",
        "operationId": "updateLibraryVariableSet_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LibraryVariableSetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "LibraryVariableSetResource",
            "in": "body",
            "description": "The LibraryVariableSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LibraryVariableSetResource Modified",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "LibraryVariableSets"
        ],
        "summary": "Delete a LibraryVariableSetResource by ID",
        "description": "Deletes an existing library variable set.",
        "operationId": "deleteLibraryVariableSet_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LibraryVariableSetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/libraryvariablesets/{id}/usages": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "description": "Lists projects and deployments which are using an library variable set.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLibraryVariableSetUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LibraryVariableSetUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/libraryvariablesets/{id}/usages": {
      "get": {
        "tags": [
          "LibraryVariableSets"
        ],
        "description": "Lists projects and deployments which are using an library variable set.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLibraryVariableSetUsage_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LibraryVariableSetUsageResource resource returned",
            "schema": {
              "$ref": "#/definitions/LibraryVariableSetUsageResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/licenses/licenses-current": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLicenseGetCurrent",
        "responses": {
          "200": {
            "description": "LicenseResource resource returned",
            "schema": {
              "$ref": "#/definitions/LicenseResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Licenses"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateLicensePutCurrent",
        "responses": {
          "200": {
            "description": "LicenseResource resource returned",
            "schema": {
              "$ref": "#/definitions/LicenseResource"
            }
          },
          "400": {
            "description": "No request body was supplied.\r\nPlease provide the text of the license.\r\nThe license you've provided doesn't seem to be valid XML. You should paste in the entire XML document, starting with <License> and ending at </License>.\r\nYou cannot use use this license. Attempting to use it would make this server non-compliant."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/licenses/licenses-current-status": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "description": "Calculates the status of the current Octopus license including compliance and maintenance expiry.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLicenseStatusGetCurrent",
        "responses": {
          "200": {
            "description": "LicenseStatusResource resource returned",
            "schema": {
              "$ref": "#/definitions/LicenseStatusResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/lifecycles/all": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Get a list of LifecycleResources",
        "description": "Lists all the lifecycles in the supplied Octopus Deploy Space.",
        "operationId": "listAllLifecycles",
        "responses": {
          "200": {
            "description": "Load all LifecycleResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LifecycleResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/lifecycles/all": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Get a list of LifecycleResources",
        "description": "Lists all the lifecycles in the supplied Octopus Deploy Space.",
        "operationId": "listAllLifecycles_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all LifecycleResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LifecycleResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/lifecycles/{id}": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Get a LifecycleResource by ID",
        "description": "Gets a single lifecycle by ID.",
        "operationId": "getLifecycleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LifecycleResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load LifecycleResource by ID",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Modify a LifecycleResource by ID",
        "description": "Modifies an existing lifecycle.",
        "operationId": "updateLifecycle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LifecycleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "LifecycleResource",
            "in": "body",
            "description": "The LifecycleResource resource to create",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource Modified",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Delete a LifecycleResource by ID",
        "description": "Deletes an existing lifecycle.",
        "operationId": "deleteLifecycle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LifecycleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/lifecycles/{id}": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Get a LifecycleResource by ID",
        "description": "Gets a single lifecycle by ID.",
        "operationId": "getLifecycleById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LifecycleResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load LifecycleResource by ID",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Modify a LifecycleResource by ID",
        "description": "Modifies an existing lifecycle.",
        "operationId": "updateLifecycle_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LifecycleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "LifecycleResource",
            "in": "body",
            "description": "The LifecycleResource resource to create",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource Modified",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Delete a LifecycleResource by ID",
        "description": "Deletes an existing lifecycle.",
        "operationId": "deleteLifecycle_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the LifecycleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/lifecycles/{id}/preview": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "description": "Gets a single lifecycle by ID, as a preview.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLifecyclePreview",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/lifecycles/{id}/preview": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "description": "Gets a single lifecycle by ID, as a preview.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLifecyclePreview_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/lifecycles/{id}/projects": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "description": "Gets a all projects that use this lifecycle.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLifecycleProjects",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[ProjectResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/lifecycles/{id}/projects": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "description": "Gets a all projects that use this lifecycle.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLifecycleProjects_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[ProjectResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/lifecycles": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Get a list of LifecycleResources",
        "description": "Lists all of the lifecycles in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexLifecycles",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[LifecycleResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[LifecycleResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Create a LifecycleResource",
        "description": "Creates a new lifecycle.",
        "operationId": "createLifecycle",
        "parameters": [
          {
            "name": "LifecycleResource",
            "in": "body",
            "description": "The LifecycleResource resource to create",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LifecycleResource Created",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/lifecycles": {
      "get": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Get a list of LifecycleResources",
        "description": "Lists all of the lifecycles in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexLifecycles_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[LifecycleResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[LifecycleResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Lifecycles"
        ],
        "summary": "Create a LifecycleResource",
        "description": "Creates a new lifecycle.",
        "operationId": "createLifecycle_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "LifecycleResource",
            "in": "body",
            "description": "The LifecycleResource resource to create",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LifecycleResource Created",
            "schema": {
              "$ref": "#/definitions/LifecycleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machinepolicies/{id}/machines": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the machines that belong to the given machine policy.",
        "operationId": "indexDeploymentTargets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachinePolicy",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentTargetResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentTargetResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machinepolicies/{id}/machines": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the machines that belong to the given machine policy.",
        "operationId": "indexDeploymentTargets_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachinePolicy",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentTargetResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentTargetResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machinepolicies/{id}/workers": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the workers that belong to the given machine policy.",
        "operationId": "indexWorkers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachinePolicy",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[WorkerResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[WorkerResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machinepolicies/{id}/workers": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the workers that belong to the given machine policy.",
        "operationId": "indexWorkers_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachinePolicy",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[WorkerResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[WorkerResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machinepolicies/all": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of MachinePolicyResources",
        "description": "Lists all the machine policies in the supplied Octopus Deploy Space.",
        "operationId": "listAllMachinePolicies",
        "responses": {
          "200": {
            "description": "Load all MachinePolicyResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MachinePolicyResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machinepolicies/all": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of MachinePolicyResources",
        "description": "Lists all the machine policies in the supplied Octopus Deploy Space.",
        "operationId": "listAllMachinePolicies_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all MachinePolicyResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MachinePolicyResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machinepolicies/template": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "description": "Gets a template for a new Machine Policy, which includes any defaults.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getMachinePolicyTemplate",
        "responses": {
          "200": {
            "description": "MachinePolicyResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machinepolicies/template": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "description": "Gets a template for a new Machine Policy, which includes any defaults.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getMachinePolicyTemplate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachinePolicyResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machinepolicies/{id}": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a MachinePolicyResource by ID",
        "description": "Gets a single machine policy by ID.",
        "operationId": "getMachinePolicyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachinePolicyResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load MachinePolicyResource by ID",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Modify a MachinePolicyResource by ID",
        "description": "Modifies an existing machine policy.",
        "operationId": "updateMachinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachinePolicyResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "MachinePolicyResource",
            "in": "body",
            "description": "The MachinePolicyResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MachinePolicyResource Modified",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MachinePolicies"
        ],
        "description": "Deletes an existing machine policy.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deleteMachinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed to find the default machine policy (Octopus needs this to exist as a fallback policy for machines).\r\nNo id parameter was provided.\r\nYou cannot delete your default machine policy."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machinepolicies/{id}": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a MachinePolicyResource by ID",
        "description": "Gets a single machine policy by ID.",
        "operationId": "getMachinePolicyById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachinePolicyResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load MachinePolicyResource by ID",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Modify a MachinePolicyResource by ID",
        "description": "Modifies an existing machine policy.",
        "operationId": "updateMachinePolicy_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MachinePolicyResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "MachinePolicyResource",
            "in": "body",
            "description": "The MachinePolicyResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MachinePolicyResource Modified",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MachinePolicies"
        ],
        "description": "Deletes an existing machine policy.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deleteMachinePolicy_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed to find the default machine policy (Octopus needs this to exist as a fallback policy for machines).\r\nNo id parameter was provided.\r\nYou cannot delete your default machine policy."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machinepolicies": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of MachinePolicyResources",
        "description": "Lists all of the machine policies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexMachinePolicies",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[MachinePolicyResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[MachinePolicyResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Create a MachinePolicyResource",
        "description": "Creates a new machine policy.",
        "operationId": "createMachinePolicy",
        "parameters": [
          {
            "name": "MachinePolicyResource",
            "in": "body",
            "description": "The MachinePolicyResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MachinePolicyResource Created",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machinepolicies": {
      "get": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Get a list of MachinePolicyResources",
        "description": "Lists all of the machine policies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexMachinePolicies_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[MachinePolicyResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[MachinePolicyResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "MachinePolicies"
        ],
        "summary": "Create a MachinePolicyResource",
        "description": "Creates a new machine policy.",
        "operationId": "createMachinePolicy_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "MachinePolicyResource",
            "in": "body",
            "description": "The MachinePolicyResource resource to create",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MachinePolicyResource Created",
            "schema": {
              "$ref": "#/definitions/MachinePolicyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machineroles/all": {
      "get": {
        "tags": [
          "MachineRoles"
        ],
        "description": "Gets all machine roles that have been defined in this Octopus installation. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getMachineRolesListAll",
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machineroles/all": {
      "get": {
        "tags": [
          "MachineRoles"
        ],
        "description": "Gets all machine roles that have been defined in this Octopus installation. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getMachineRolesListAll_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/all": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the deployment targets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllDeploymentTargets",
        "responses": {
          "200": {
            "description": "Load all DeploymentTargetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentTargetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machines/all": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the deployment targets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllDeploymentTargets_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all DeploymentTargetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentTargetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/{id}": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Get a DeploymentTargetResource by ID",
        "description": "Gets a single machine by ID.",
        "operationId": "getDeploymentTargetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentTargetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load DeploymentTargetResource by ID",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Machines"
        ],
        "summary": "Modify a DeploymentTargetResource by ID",
        "description": "Modifies an existing machine.",
        "operationId": "updateDeploymentTarget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentTargetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "DeploymentTargetResource",
            "in": "body",
            "description": "The DeploymentTargetResource resource to create",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentTargetResource Modified",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Machines"
        ],
        "summary": "Delete a DeploymentTargetResource by ID",
        "description": "Deletes an existing machine.",
        "operationId": "deleteDeploymentTarget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentTargetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machines/{id}": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Get a DeploymentTargetResource by ID",
        "description": "Gets a single machine by ID.",
        "operationId": "getDeploymentTargetById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentTargetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load DeploymentTargetResource by ID",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Machines"
        ],
        "summary": "Modify a DeploymentTargetResource by ID",
        "description": "Modifies an existing machine.",
        "operationId": "updateDeploymentTarget_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentTargetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "DeploymentTargetResource",
            "in": "body",
            "description": "The DeploymentTargetResource resource to create",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentTargetResource Modified",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Machines"
        ],
        "summary": "Delete a DeploymentTargetResource by ID",
        "description": "Deletes an existing machine.",
        "operationId": "deleteDeploymentTarget_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentTargetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/{id}/connection": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Get the status of the network connection between the Octopus server and a machine.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentTargetConnectionStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineConnectionStatus resource returned",
            "schema": {
              "$ref": "#/definitions/MachineConnectionStatus"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machines/{id}/connection": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Get the status of the network connection between the Octopus server and a machine.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentTargetConnectionStatus_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineConnectionStatus resource returned",
            "schema": {
              "$ref": "#/definitions/MachineConnectionStatus"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/{id}/tasks": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Get a list of TaskResources",
        "description": "Get the history of related tasks for a machine.",
        "operationId": "indexTasks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentTarget",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TaskResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TaskResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machines/{id}/tasks": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Get a list of TaskResources",
        "description": "Get the history of related tasks for a machine.",
        "operationId": "indexTasks_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DeploymentTarget",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TaskResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TaskResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the registered machines in the supplied Octopus Deploy Space, from all environments. The results will be sorted alphabetically by name.",
        "operationId": "indexDeploymentTargets",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentTargetResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentTargetResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Machines"
        ],
        "summary": "Create a DeploymentTargetResource",
        "description": "Creates a new machine.",
        "operationId": "createDeploymentTarget",
        "parameters": [
          {
            "name": "DeploymentTargetResource",
            "in": "body",
            "description": "The DeploymentTargetResource resource to create",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "DeploymentTargetResource Created",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machines": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Get a list of DeploymentTargetResources",
        "description": "Lists all of the registered machines in the supplied Octopus Deploy Space, from all environments. The results will be sorted alphabetically by name.",
        "operationId": "indexDeploymentTargets_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentTargetResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentTargetResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Machines"
        ],
        "summary": "Create a DeploymentTargetResource",
        "description": "Creates a new machine.",
        "operationId": "createDeploymentTarget_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "DeploymentTargetResource",
            "in": "body",
            "description": "The DeploymentTargetResource resource to create",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "DeploymentTargetResource Created",
            "schema": {
              "$ref": "#/definitions/DeploymentTargetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/discover": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Interrogate a machine for communication details so that it may be added to the installation.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDiscoverDeploymentTarget",
        "responses": {
          "200": {
            "description": "MachineResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          },
          "400": {
            "description": "The hostname of the machine to discover must be supplied as URI parameter named 'host'.\r\nThere was a controlled failure."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machines/discover": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Interrogate a machine for communication details so that it may be added to the installation.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDiscoverDeploymentTarget_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          },
          "400": {
            "description": "The hostname of the machine to discover must be supplied as URI parameter named 'host'.\r\nThere was a controlled failure."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/operatingsystem/names/all": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Gets all operating system names for deployment targets. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentTargetOperatingSystemNamesListAll",
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machines/operatingsystem/names/all": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Gets all operating system names for deployment targets. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentTargetOperatingSystemNamesListAll_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/machines/operatingsystem/shells/all": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Gets all operating system shell names for deployment targets. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentTargetOperatingSystemShellNameListAll",
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/machines/operatingsystem/shells/all": {
      "get": {
        "tags": [
          "Machines"
        ],
        "description": "Gets all operating system shell names for deployment targets. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentTargetOperatingSystemShellNameListAll_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/maintenanceconfiguration": {
      "get": {
        "tags": [
          "MaintenanceConfiguration"
        ],
        "description": "Gets information about the maintenance configuration in use by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getMaintenanceConfiguration",
        "responses": {
          "200": {
            "description": "MaintenanceConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/MaintenanceConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "MaintenanceConfiguration"
        ],
        "description": "Updates the maintenance configuration used by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateMaintenanceConfiguration",
        "responses": {
          "200": {
            "description": "MaintenanceConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/MaintenanceConfigurationResource"
            }
          },
          "400": {
            "description": "No request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/migrations/partialexport": {
      "post": {
        "tags": [
          "Migration"
        ],
        "description": "Returns HTTP OK (200) when a partial-export migration has been queued.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createMigrationPartialExport",
        "responses": {
          "200": {
            "description": "MigrationPartialExportResource resource returned",
            "schema": {
              "$ref": "#/definitions/MigrationPartialExportResource"
            }
          },
          "400": {
            "description": "Missing expected 'Password' parameter.\r\nMissing expected 'Projects' parameter.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/migrations/import": {
      "post": {
        "tags": [
          "Migration"
        ],
        "description": "Returns HTTP OK (200) when an import migration has been queued.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createMigrationImport",
        "responses": {
          "200": {
            "description": "MigrationImportResource resource returned",
            "schema": {
              "$ref": "#/definitions/MigrationImportResource"
            }
          },
          "400": {
            "description": "Missing expected 'PackageId' parameter.\r\nMissing expected 'PackageVersion' parameter.\r\nMissing expected 'Password' parameter.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/nuget/packages": {
      "put": {
        "tags": [
          "NuGet"
        ],
        "description": "Octopus allows NuGet.exe and compatible tools to push packages to this endpoint.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "pushNuGetPackage",
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "A package file must be provided\r\nPackage Name is too long.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/{baseSpaceId}/nuget/packages": {
      "put": {
        "tags": [
          "NuGet"
        ],
        "description": "Octopus allows NuGet.exe and compatible tools to push packages to this endpoint.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "pushNuGetPackage_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "A package file must be provided\r\nPackage Name is too long.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/package-metadata/{id}": {
      "get": {
        "tags": [
          "OctopusPackageMetadata"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getOctopusPackageMetadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageMetadataMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageMetadataMappedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/package-metadata/{id}": {
      "get": {
        "tags": [
          "OctopusPackageMetadata"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getOctopusPackageMetadata_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageMetadataMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageMetadataMappedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/package-metadata": {
      "post": {
        "tags": [
          "OctopusPackageMetadata"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createOctopusPackageMetadata",
        "responses": {
          "200": {
            "description": "OctopusPackageMetadataMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageMetadataMappedResource"
            }
          },
          "400": {
            "description": "Invalid package metadata"
          },
          "409": {
            "description": "Metadata for the specified Package ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/package-metadata": {
      "post": {
        "tags": [
          "OctopusPackageMetadata"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createOctopusPackageMetadata_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusPackageMetadataMappedResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusPackageMetadataMappedResource"
            }
          },
          "400": {
            "description": "Invalid package metadata"
          },
          "409": {
            "description": "Metadata for the specified Package ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/octopusservernodes/all": {
      "get": {
        "tags": [
          "OctopusServerNodes"
        ],
        "summary": "Get a list of OctopusServerNodeResources",
        "description": "Lists the name and ID of all Octopus Server nodes.",
        "operationId": "listAllOctopusServerNodes",
        "responses": {
          "200": {
            "description": "Load all OctopusServerNodeResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OctopusServerNodeResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/octopusservernodes": {
      "get": {
        "tags": [
          "OctopusServerNodes"
        ],
        "summary": "Get a list of OctopusServerNodeResources",
        "description": "List all of the Octopus Server nodes participating in the current Octopus Server cluster.",
        "operationId": "indexOctopusServerNodes",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[OctopusServerNodeResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[OctopusServerNodeResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/octopusservernodes/ping": {
      "get": {
        "tags": [
          "OctopusServerNodes"
        ],
        "description": "Returns HTTP ImATeapot (418) when the Octopus Server node is draining or offline, otherwise HTTP OK (200). Always returns the node information in the body.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getLoadBalancerPing",
        "responses": {
          "200": {
            "description": "OK"
          },
          "418": {
            "description": "ImATeapot"
          }
        }
      }
    },
    "/api/octopusservernodes/{id}/details": {
      "get": {
        "tags": [
          "OctopusServerNodes"
        ],
        "description": "A count of the running tasks per node.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getOctopusServerNodeDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusServerNodeDetailsResource resource returned",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeDetailsResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/octopusservernodes/{id}": {
      "get": {
        "tags": [
          "OctopusServerNodes"
        ],
        "summary": "Get a OctopusServerNodeResource by ID",
        "description": "Gets an Octopus Server node by ID.",
        "operationId": "getOctopusServerNodeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OctopusServerNodeResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load OctopusServerNodeResource by ID",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "OctopusServerNodes"
        ],
        "summary": "Modify a OctopusServerNodeResource by ID",
        "description": "Modifies an Octopus Server node.",
        "operationId": "updateOctopusServerNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OctopusServerNodeResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "OctopusServerNodeResource",
            "in": "body",
            "description": "The OctopusServerNodeResource resource to create",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OctopusServerNodeResource Modified",
            "schema": {
              "$ref": "#/definitions/OctopusServerNodeResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "OctopusServerNodes"
        ],
        "summary": "Delete a OctopusServerNodeResource by ID",
        "description": "Deletes an Octopus Server node.",
        "operationId": "deleteOctopusServerNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OctopusServerNodeResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/octopusservernodes/summary": {
      "get": {
        "tags": [
          "OctopusServerNodes"
        ],
        "description": "Returns all nodes, with status information\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getOctopusServerClusterSummary",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}/packages": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageSearchActionOld",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[PackageResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThe 'versionRange' parameter was not a valid NuGet version-range (see http://g.octopushq.com/NuGetVersioning)"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/feeds/{id}/packages": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageSearchActionOld_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[PackageResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThe 'versionRange' parameter was not a valid NuGet version-range (see http://g.octopushq.com/NuGetVersioning)"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/feeds/{id}/packages/notes": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageNotes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageId",
            "in": "query",
            "description": "Package Id",
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Package Version",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/feeds/{id}/packages/notes": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageNotes_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the feed",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageId",
            "in": "query",
            "description": "Package Id",
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Package Version",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/notes": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageListNotes",
        "responses": {
          "200": {
            "description": "PackageNoteListResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageNoteListResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/packages/notes": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageListNotes_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageNoteListResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageNoteListResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageRepository",
        "responses": {
          "200": {
            "description": "ResourceCollection[PackageResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[PackageResource]"
            }
          },
          "400": {
            "description": "Only one of either nuGetPackageId or filter may be specified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/packages": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageRepository_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[PackageResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[PackageResource]"
            }
          },
          "400": {
            "description": "Only one of either nuGetPackageId or filter may be specified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/{id}": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageRepository",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deletePackageRepositoryDeleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/packages/{id}": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageRepository_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deletePackageRepositoryDeleteById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the package",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/bulk": {
      "delete": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deletePackageRepositoryDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of IDs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No ids parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/packages/bulk": {
      "delete": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deletePackageRepositoryDeleteByIds_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of IDs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No ids parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/{id}/raw": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageRepositoryGetRaw",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid package specified.\r\nNo id parameter was provided.\r\nPackage was not found in the index of the built-in package repository.\r\nPackage was not found on disk, although metadata was found in the built-in package repository index. This could mean that the file was manually deleted from disk after being indexed."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/packages/{id}/raw": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageRepositoryGetRaw_Spaces",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid package specified.\r\nNo id parameter was provided.\r\nPackage was not found in the index of the built-in package repository.\r\nPackage was not found on disk, although metadata was found in the built-in package repository index. This could mean that the file was manually deleted from disk after being indexed."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/raw": {
      "post": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createPackageRepositoryUpload",
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "A package file must be provided\r\nPackage Name is too long.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/packages/raw": {
      "post": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createPackageRepositoryUpload_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "A package file must be provided\r\nPackage Name is too long.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/{packageId}/{version}/delta-signature": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageRepositoryDeltaSignature",
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "Package ID of the package to be uploaded",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the package to be uploaded",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageSignatureResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageSignatureResource"
            }
          },
          "400": {
            "description": "No packageId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/packages/{packageId}/{version}/delta-signature": {
      "get": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPackageRepositoryDeltaSignature_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package ID of the package to be uploaded",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the package to be uploaded",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "PackageSignatureResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageSignatureResource"
            }
          },
          "400": {
            "description": "No packageId parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/packages/{packageId}/{baseVersion}/delta": {
      "post": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createPackageRepositoryDeltaUpload",
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "Package ID of the package to be uploaded",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseVersion",
            "in": "path",
            "description": "The version of the package that was used to create the signature",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "A delta file must be provided\r\nA package file must be provided\r\nInvalid semantic version supplied\r\nNo baseVersion parameter was provided.\r\nNo packageId parameter was provided.\r\nPackage Name is too long.\r\nThe uploaded delta file had length equal to 0. Please upload a non-empty file.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/packages/{packageId}/{baseVersion}/delta": {
      "post": {
        "tags": [
          "Packages"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createPackageRepositoryDeltaUpload_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package ID of the package to be uploaded",
            "required": true,
            "type": "string"
          },
          {
            "name": "baseVersion",
            "in": "path",
            "description": "The version of the package that was used to create the signature",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "PackageFromBuiltInFeedResource resource returned",
            "schema": {
              "$ref": "#/definitions/PackageFromBuiltInFeedResource"
            }
          },
          "400": {
            "description": "A delta file must be provided\r\nA package file must be provided\r\nInvalid semantic version supplied\r\nNo baseVersion parameter was provided.\r\nNo packageId parameter was provided.\r\nPackage Name is too long.\r\nThe uploaded delta file had length equal to 0. Please upload a non-empty file.\r\nThe uploaded package file had length equal to 0. Please upload a non-empty file."
          },
          "409": {
            "description": "A package with the same ID and version already exists. To proceed anyway, specify an overwriteMode of OverwriteExisting or IgnoreIfExists."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/performanceconfiguration": {
      "get": {
        "tags": [
          "PerformanceConfiguration"
        ],
        "description": "Get performance settings for the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPerformanceConfiguration",
        "responses": {
          "200": {
            "description": "PerformanceConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/PerformanceConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "PerformanceConfiguration"
        ],
        "description": "Updates the performance settings for the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updatePerformanceConfiguration",
        "responses": {
          "200": {
            "description": "PerformanceConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/PerformanceConfigurationResource"
            }
          },
          "400": {
            "description": "Model is invalid.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/permissions/all": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "description": "Gets a dictionary of available permissions and their descriptions and restrictions\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getPermissionDefinitions",
        "responses": {
          "200": {
            "description": "Dictionary[Permission,PermissionDescription] resource returned",
            "schema": {
              "type": "object",
              "properties": {
                "AdministerSystem": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProcessView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProcessEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableEditUnscoped": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "VariableViewUnscoped": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ReleaseDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DefectReport": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DefectResolve": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DeploymentCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DeploymentDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "DeploymentView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EnvironmentDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachineDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ArtifactDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "FeedView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "EventView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LibraryVariableSetDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProjectGroupDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TeamDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserInvite": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserRoleView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserRoleEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskCancel": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TaskEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "InterruptionView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "InterruptionSubmit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "InterruptionViewSubmitResponsible": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuiltInFeedPush": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuiltInFeedAdminister": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuiltInFeedDownload": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ActionTemplateDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "LifecycleDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "AccountDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TenantDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TagSetCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TagSetEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TagSetDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "MachinePolicyDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ProxyDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SubscriptionDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "TriggerDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "CertificateExportPrivateKey": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "UserEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "ConfigureServer": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "FeedEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "WorkerView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "WorkerEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SpaceEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SpaceView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SpaceDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "SpaceCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuildInformationPush": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "BuildInformationAdminister": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "RunbookView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "RunbookEdit": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "RunbookRunView": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "RunbookRunDelete": {
                  "$ref": "#/definitions/PermissionDescription"
                },
                "RunbookRunCreate": {
                  "$ref": "#/definitions/PermissionDescription"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/progression/{id}": {
      "get": {
        "tags": [
          "Progression"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getProgressionView",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/progression/{id}": {
      "get": {
        "tags": [
          "Progression"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getProgressionView_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/ProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/progression/runbooks/{id}": {
      "get": {
        "tags": [
          "Progression"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbooksProgressionView",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbooksProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbooksProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/progression/runbooks/{id}": {
      "get": {
        "tags": [
          "Progression"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbooksProgressionView_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbooksProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbooksProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/progression/runbooks/taskRuns": {
      "get": {
        "tags": [
          "Progression"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookTaskRunDashboardItems",
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbooksDashboardItemResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbooksDashboardItemResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/progression/runbooks/taskRuns": {
      "get": {
        "tags": [
          "Progression"
        ],
        "description": "\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookTaskRunDashboardItems_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbooksDashboardItemResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbooksDashboardItemResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projectgroups/all": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a list of ProjectGroupResources",
        "description": "Lists the name and ID of all of the project groups in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllProjectGroups",
        "responses": {
          "200": {
            "description": "Load all ProjectGroupResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectGroupResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projectgroups/all": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a list of ProjectGroupResources",
        "description": "Lists the name and ID of all of the project groups in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllProjectGroups_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all ProjectGroupResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectGroupResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projectgroups/{id}": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a ProjectGroupResource by ID",
        "description": "Gets a single project group by ID.",
        "operationId": "getProjectGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroupResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectGroupResource by ID",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Modify a ProjectGroupResource by ID",
        "description": "Modifies an existing project group.",
        "operationId": "updateProjectGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroupResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectGroupResource",
            "in": "body",
            "description": "The ProjectGroupResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectGroupResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Delete a ProjectGroupResource by ID",
        "description": "Deletes an existing project group.",
        "operationId": "deleteProjectGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroupResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projectgroups/{id}": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a ProjectGroupResource by ID",
        "description": "Gets a single project group by ID.",
        "operationId": "getProjectGroupById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroupResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectGroupResource by ID",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Modify a ProjectGroupResource by ID",
        "description": "Modifies an existing project group.",
        "operationId": "updateProjectGroup_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroupResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectGroupResource",
            "in": "body",
            "description": "The ProjectGroupResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectGroupResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Delete a ProjectGroupResource by ID",
        "description": "Deletes an existing project group.",
        "operationId": "deleteProjectGroup_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroupResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projectgroups": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a list of ProjectGroupResources",
        "description": "Lists all of the project groups in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexProjectGroups",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProjectGroupResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectGroupResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Create a ProjectGroupResource",
        "description": "Creates a new project group.",
        "operationId": "createProjectGroup",
        "parameters": [
          {
            "name": "ProjectGroupResource",
            "in": "body",
            "description": "The ProjectGroupResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectGroupResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projectgroups": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a list of ProjectGroupResources",
        "description": "Lists all of the project groups in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexProjectGroups_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProjectGroupResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectGroupResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Create a ProjectGroupResource",
        "description": "Creates a new project group.",
        "operationId": "createProjectGroup_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectGroupResource",
            "in": "body",
            "description": "The ProjectGroupResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectGroupResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectGroupResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projectgroups/{id}/projects": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a list of ProjectResources",
        "description": "Lists all of the projects that belong to the given project group.",
        "operationId": "indexProjects",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroup",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProjectResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projectgroups/{id}/projects": {
      "get": {
        "tags": [
          "ProjectGroups"
        ],
        "summary": "Get a list of ProjectResources",
        "description": "Lists all of the projects that belong to the given project group.",
        "operationId": "indexProjects_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectGroup",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProjectResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/all": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a list of ProjectResources",
        "description": "Lists the name and ID of all of the projects in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllProjects",
        "responses": {
          "200": {
            "description": "Load all ProjectResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/all": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a list of ProjectResources",
        "description": "Lists the name and ID of all of the projects in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllProjects_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all ProjectResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{idOrSlug}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a ProjectResource by ID or slug",
        "description": "Gets a single project by ID or Slug.",
        "operationId": "getProjectByIdOrSlug",
        "parameters": [
          {
            "name": "idOrSlug",
            "in": "path",
            "description": "ID or slug of the ProjectResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectResource by ID or slug",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "No idOrSlug parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{idOrSlug}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a ProjectResource by ID or slug",
        "description": "Gets a single project by ID or Slug.",
        "operationId": "getProjectByIdOrSlug_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "idOrSlug",
            "in": "path",
            "description": "ID or slug of the ProjectResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectResource by ID or slug",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "No idOrSlug parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/logo": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Gets the logo associated with the project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getProjectLogo",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "description": "Updates the logo associated with the project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateProjectLogo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "Updates the logo associated with the project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createProjectLogo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{id}/logo": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Gets the logo associated with the project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getProjectLogo_Spaces",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "description": "Updates the logo associated with the project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateProjectLogo_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "Updates the logo associated with the project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createProjectLogo_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/metadata": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Gets the custom settings metadata from the extensions.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getProjectSettingsMetadata",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List[ProjectSettingsMetadata] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectSettingsMetadata"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{id}/metadata": {
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Gets the custom settings metadata from the extensions.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getProjectSettingsMetadata_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List[ProjectSettingsMetadata] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectSettingsMetadata"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a list of ProjectResources",
        "description": "Lists all of the projects in the supplied Octopus Deploy Space, from all project groups. The results will be sorted alphabetically by name.",
        "operationId": "indexProjects",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProjectResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a ProjectResource",
        "description": "Creates a new project.",
        "operationId": "createProject",
        "parameters": [
          {
            "name": "ProjectResource",
            "in": "body",
            "description": "The ProjectResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a list of ProjectResources",
        "description": "Lists all of the projects in the supplied Octopus Deploy Space, from all project groups. The results will be sorted alphabetically by name.",
        "operationId": "indexProjects_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProjectResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a ProjectResource",
        "description": "Creates a new project.",
        "operationId": "createProject_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectResource",
            "in": "body",
            "description": "The ProjectResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Modify a ProjectResource by ID",
        "description": "Modifies an existing project.",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectResource",
            "in": "body",
            "description": "The ProjectResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a ProjectResource by ID",
        "description": "Deletes an existing project.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{id}": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Modify a ProjectResource by ID",
        "description": "Modifies an existing project.",
        "operationId": "updateProject_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectResource",
            "in": "body",
            "description": "The ProjectResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a ProjectResource by ID",
        "description": "Deletes an existing project.",
        "operationId": "deleteProject_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projecttriggers/{id}": {
      "get": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Get a ProjectTriggerResource by ID",
        "description": "Get a project trigger",
        "operationId": "getProjectTriggerById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectTriggerResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectTriggerResource by ID",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Modify a ProjectTriggerResource by ID",
        "description": "Updates an existing project trigger",
        "operationId": "updateProjectTrigger",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectTriggerResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectTriggerResource",
            "in": "body",
            "description": "The ProjectTriggerResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectTriggerResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Delete a ProjectTriggerResource by ID",
        "description": "Deletes an existing project trigger.",
        "operationId": "deleteProjectTrigger",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectTriggerResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projecttriggers/{id}": {
      "get": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Get a ProjectTriggerResource by ID",
        "description": "Get a project trigger",
        "operationId": "getProjectTriggerById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectTriggerResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProjectTriggerResource by ID",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Modify a ProjectTriggerResource by ID",
        "description": "Updates an existing project trigger",
        "operationId": "updateProjectTrigger_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectTriggerResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectTriggerResource",
            "in": "body",
            "description": "The ProjectTriggerResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectTriggerResource Modified",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Delete a ProjectTriggerResource by ID",
        "description": "Deletes an existing project trigger.",
        "operationId": "deleteProjectTrigger_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProjectTriggerResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projecttriggers": {
      "get": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Get a list of ProjectTriggerResources",
        "description": "Gets all the project triggers in the supplied Octopus Deploy Space, sorted by Id",
        "operationId": "indexProjectTriggers",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProjectTriggerResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectTriggerResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Create a ProjectTriggerResource",
        "description": "Creates a new project trigger",
        "operationId": "createProjectTrigger",
        "parameters": [
          {
            "name": "ProjectTriggerResource",
            "in": "body",
            "description": "The ProjectTriggerResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectTriggerResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projecttriggers": {
      "get": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Get a list of ProjectTriggerResources",
        "description": "Gets all the project triggers in the supplied Octopus Deploy Space, sorted by Id",
        "operationId": "indexProjectTriggers_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProjectTriggerResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectTriggerResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Create a ProjectTriggerResource",
        "description": "Creates a new project trigger",
        "operationId": "createProjectTrigger_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProjectTriggerResource",
            "in": "body",
            "description": "The ProjectTriggerResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProjectTriggerResource Created",
            "schema": {
              "$ref": "#/definitions/ProjectTriggerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/triggers": {
      "get": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Get a list of ProjectTriggerResources",
        "description": "Lists all the project triggers for the given project",
        "operationId": "indexProjectTriggers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProjectTriggerResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectTriggerResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{id}/triggers": {
      "get": {
        "tags": [
          "ProjectTriggers"
        ],
        "summary": "Get a list of ProjectTriggerResources",
        "description": "Lists all the project triggers for the given project",
        "operationId": "indexProjectTriggers_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProjectTriggerResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProjectTriggerResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/proxies/{id}": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "summary": "Get a ProxyResource by ID",
        "description": "Gets a proxy by ID.",
        "operationId": "getProxyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProxyResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProxyResource by ID",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Proxies"
        ],
        "summary": "Modify a ProxyResource by ID",
        "description": "Modifies an existing proxy.",
        "operationId": "updateProxy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProxyResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProxyResource",
            "in": "body",
            "description": "The ProxyResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProxyResource Modified",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Proxies"
        ],
        "summary": "Delete a ProxyResource by ID",
        "description": "Deletes an existing proxy.",
        "operationId": "deleteProxy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProxyResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/proxies/{id}": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "summary": "Get a ProxyResource by ID",
        "description": "Gets a proxy by ID.",
        "operationId": "getProxyById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProxyResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ProxyResource by ID",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Proxies"
        ],
        "summary": "Modify a ProxyResource by ID",
        "description": "Modifies an existing proxy.",
        "operationId": "updateProxy_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProxyResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProxyResource",
            "in": "body",
            "description": "The ProxyResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ProxyResource Modified",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Proxies"
        ],
        "summary": "Delete a ProxyResource by ID",
        "description": "Deletes an existing proxy.",
        "operationId": "deleteProxy_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ProxyResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/proxies": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "summary": "Get a list of ProxyResources",
        "description": "Lists all of the proxies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexProxies",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProxyResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProxyResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Proxies"
        ],
        "summary": "Create a ProxyResource",
        "description": "Creates a proxy.",
        "operationId": "createProxy",
        "parameters": [
          {
            "name": "ProxyResource",
            "in": "body",
            "description": "The ProxyResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProxyResource Created",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/proxies": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "summary": "Get a list of ProxyResources",
        "description": "Lists all of the proxies in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexProxies_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ProxyResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ProxyResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Proxies"
        ],
        "summary": "Create a ProxyResource",
        "description": "Creates a proxy.",
        "operationId": "createProxy_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProxyResource",
            "in": "body",
            "description": "The ProxyResource resource to create",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ProxyResource Created",
            "schema": {
              "$ref": "#/definitions/ProxyResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/proxies/all": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "summary": "Get a list of ProxyResources",
        "description": "Lists the name and ID of all of the proxies in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "listAllProxies",
        "responses": {
          "200": {
            "description": "Load all ProxyResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProxyResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/proxies/all": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "summary": "Get a list of ProxyResources",
        "description": "Lists the name and ID of all of the proxies in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "listAllProxies_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all ProxyResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProxyResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a list of ReleaseResources",
        "description": "Lists all of the releases in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent release.",
        "operationId": "indexReleases",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ReleaseResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ReleaseResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Releases"
        ],
        "summary": "Create a ReleaseResource",
        "description": "Creates a new release.",
        "operationId": "createRelease",
        "parameters": [
          {
            "name": "ignoreChannelRules",
            "in": "query",
            "description": "Ignore channel rules.",
            "type": "boolean"
          },
          {
            "name": "ReleaseResource",
            "in": "body",
            "description": "The ReleaseResource resource to create",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ReleaseResource Created",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "A channelId must be provided for a release when more than one exists for that project and no default channel has been specified.\r\nA version must be specified for every included package.\r\nModel validation failed.\r\nNo project ID was specified.\r\nNo request body was supplied.\r\nRelease '{release.Version}' already exists for this project. Please use a different version, or look at using a mask to auto-increment the number.\r\nThe channel {channel.Name} specified for this release belongs to the project {channel.ProjectId}. It does not belong to the same project as the release.\r\nThe project is disabled, so releases cannot be created\r\nThe release number '{release.Version}' does not appear to be a valid semantic version number. The version must consist of between 1 and 4 number only parts (separated by '.') before the optional pre-release part (after the '-'). e.g. 2, 2.1, 2.4.0.23, 2.4-beta and 1-beta.2\r\nThe requested package versions for the following steps violate the channel version rules: {0}. Please specify a different package version, channel or provide the `ignoreChannelRules` parameter to override this check."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/releases": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a list of ReleaseResources",
        "description": "Lists all of the releases in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent release.",
        "operationId": "indexReleases_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ReleaseResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ReleaseResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Releases"
        ],
        "summary": "Create a ReleaseResource",
        "description": "Creates a new release.",
        "operationId": "createRelease_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ignoreChannelRules",
            "in": "query",
            "description": "Ignore channel rules.",
            "type": "boolean"
          },
          {
            "name": "ReleaseResource",
            "in": "body",
            "description": "The ReleaseResource resource to create",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ReleaseResource Created",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "A channelId must be provided for a release when more than one exists for that project and no default channel has been specified.\r\nA version must be specified for every included package.\r\nModel validation failed.\r\nNo project ID was specified.\r\nNo request body was supplied.\r\nRelease '{release.Version}' already exists for this project. Please use a different version, or look at using a mask to auto-increment the number.\r\nThe channel {channel.Name} specified for this release belongs to the project {channel.ProjectId}. It does not belong to the same project as the release.\r\nThe project is disabled, so releases cannot be created\r\nThe release number '{release.Version}' does not appear to be a valid semantic version number. The version must consist of between 1 and 4 number only parts (separated by '.') before the optional pre-release part (after the '-'). e.g. 2, 2.1, 2.4.0.23, 2.4-beta and 1-beta.2\r\nThe requested package versions for the following steps violate the channel version rules: {0}. Please specify a different package version, channel or provide the `ignoreChannelRules` parameter to override this check."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/releases": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a list of ReleaseResources",
        "description": "Lists all of the releases that belong to the given project. Releases will be ordered from most recent to least recent.",
        "operationId": "indexReleases",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ReleaseResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ReleaseResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{id}/releases": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a list of ReleaseResources",
        "description": "Lists all of the releases that belong to the given project. Releases will be ordered from most recent to least recent.",
        "operationId": "indexReleases_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ReleaseResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ReleaseResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/releases/{version}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets a single release by project ID and version number.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getReleaseByProjectAndVersion",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "Release version number",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo version parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{id}/releases/{version}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets a single release by project ID and version number.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getReleaseByProjectAndVersion_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Release version number",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo version parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a ReleaseResource by ID",
        "description": "Gets a release by ID.",
        "operationId": "getReleaseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ReleaseResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ReleaseResource by ID",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Releases"
        ],
        "summary": "Modify a ReleaseResource by ID",
        "description": "Updates an existing release.",
        "operationId": "updateRelease",
        "parameters": [
          {
            "name": "ignoreChannelRules",
            "in": "query",
            "description": "Ignore channel rules.",
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ReleaseResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ReleaseResource",
            "in": "body",
            "description": "The ReleaseResource resource to create",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource Modified",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "A version must be specified for every included package.\r\nModel validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nRelease '{release.Version}' already exists for this project. Please use a different version, or look at using a mask to auto-increment the number.\r\nThe channel {channel.Name} specified for this release belongs to the project {channel.ProjectId}. It does not belong to the same project as the release.\r\nThe release `{0}` currently contains deployments with step(s) {1} that would be skipped due the updated channel. Please select a different channel or delete and recreate this release.\r\nThe release number '{release.Version}' does not appear to be a valid semantic version number. The version must consist of between 1 and 4 number only parts (separated by '.') before the optional pre-release part (after the '-'). e.g. 2, 2.1, 2.4.0.23, 2.4-beta and 1-beta.2\r\nThe requested package versions for the following steps violate the channel version rules: {0}. Please specify a different package version, channel or provide the `ignoreChannelRules` parameter to override this check.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Releases"
        ],
        "summary": "Delete a ReleaseResource by ID",
        "description": "Deletes an existing release, along with all of the deployments, tasks and other associated resources belonging to the release.",
        "operationId": "deleteRelease",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ReleaseResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/releases/{id}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a ReleaseResource by ID",
        "description": "Gets a release by ID.",
        "operationId": "getReleaseById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ReleaseResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ReleaseResource by ID",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Releases"
        ],
        "summary": "Modify a ReleaseResource by ID",
        "description": "Updates an existing release.",
        "operationId": "updateRelease_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ignoreChannelRules",
            "in": "query",
            "description": "Ignore channel rules.",
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ReleaseResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ReleaseResource",
            "in": "body",
            "description": "The ReleaseResource resource to create",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource Modified",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "A version must be specified for every included package.\r\nModel validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nRelease '{release.Version}' already exists for this project. Please use a different version, or look at using a mask to auto-increment the number.\r\nThe channel {channel.Name} specified for this release belongs to the project {channel.ProjectId}. It does not belong to the same project as the release.\r\nThe release `{0}` currently contains deployments with step(s) {1} that would be skipped due the updated channel. Please select a different channel or delete and recreate this release.\r\nThe release number '{release.Version}' does not appear to be a valid semantic version number. The version must consist of between 1 and 4 number only parts (separated by '.') before the optional pre-release part (after the '-'). e.g. 2, 2.1, 2.4.0.23, 2.4-beta and 1-beta.2\r\nThe requested package versions for the following steps violate the channel version rules: {0}. Please specify a different package version, channel or provide the `ignoreChannelRules` parameter to override this check.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Releases"
        ],
        "summary": "Delete a ReleaseResource by ID",
        "description": "Deletes an existing release, along with all of the deployments, tasks and other associated resources belonging to the release.",
        "operationId": "deleteRelease_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ReleaseResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/progression": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets all of the information necessary for creating or editing a deployment for this release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getReleaseLifecycleProgression",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/releases/{id}/progression": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets all of the information necessary for creating or editing a deployment for this release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getReleaseLifecycleProgression_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LifecycleProgressionResource resource returned",
            "schema": {
              "$ref": "#/definitions/LifecycleProgressionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/deployments/template": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets all of the information necessary for creating or editing a deployment for this release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "500": {
            "description": "A lifecycle has not been assigned to this project."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/releases/{id}/deployments/template": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets all of the information necessary for creating or editing a deployment for this release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentTemplate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          },
          "500": {
            "description": "A lifecycle has not been assigned to this project."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/deployments/preview/{environment}/{tenant?}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets a document that describes what steps will/won't be run during a deployment to a given environment (and tenant if supplied).\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentPreview",
        "parameters": [
          {
            "name": "environment",
            "in": "path",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "path",
            "description": "ID of the tenant",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/releases/{id}/deployments/preview/{environment}/{tenant?}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets a document that describes what steps will/won't be run during a deployment to a given environment (and tenant if supplied).\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentPreview_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "path",
            "description": "ID of the tenant",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/DeploymentPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/deployments/previews": {
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Returns an array of documents that describes what steps will/won't be run during deployments to a given set of environments and tenants.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createDeploymentPreviewCollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentPreviewResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentPreviewResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/releases/{id}/deployments/previews": {
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Returns an array of documents that describes what steps will/won't be run during deployments to a given set of environments and tenants.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createDeploymentPreviewCollection_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DeploymentPreviewResource[] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentPreviewResource"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/deployments": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a list of DeploymentResources",
        "description": "Lists all of the deployments that belong to the given release. Deployments will be ordered from most recent to least recent.",
        "operationId": "indexDeployments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Release",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/releases/{id}/deployments": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Get a list of DeploymentResources",
        "description": "Lists all of the deployments that belong to the given release. Deployments will be ordered from most recent to least recent.",
        "operationId": "indexDeployments_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Release",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DeploymentResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DeploymentResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/defects": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets all defects for a release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListDefects",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the defect",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DefectResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DefectResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Record defect in a release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createDefectReported",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResource"
            }
          },
          "400": {
            "description": "An unresolved defect already exists for this release.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nYou must provide a description."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/releases/{id}/defects": {
      "get": {
        "tags": [
          "Releases"
        ],
        "description": "Gets all defects for a release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListDefects_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the defect",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[DefectResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[DefectResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Record defect in a release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createDefectReported_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResource"
            }
          },
          "400": {
            "description": "An unresolved defect already exists for this release.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nYou must provide a description."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/defects/resolve": {
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Update or resolve defect in a release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createDefectResolved",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResource"
            }
          },
          "400": {
            "description": "Defect has already been resolved.\r\nIndex refers to an invalid defect.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/releases/{id}/defects/resolve": {
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Update or resolve defect in a release.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createDefectResolved_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DefectResource resource returned",
            "schema": {
              "$ref": "#/definitions/DefectResource"
            }
          },
          "400": {
            "description": "Defect has already been resolved.\r\nIndex refers to an invalid defect.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/releases/{id}/snapshot-variables": {
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Refresh the variable snapshots associated with the release. The project's deployment process must not have changed since the release was created.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createReleaseSnapshotVariables",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/releases/{id}/snapshot-variables": {
      "post": {
        "tags": [
          "Releases"
        ],
        "description": "Refresh the variable snapshots associated with the release. The project's deployment process must not have changed since the release was created.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createReleaseSnapshotVariables_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ReleaseResource resource returned",
            "schema": {
              "$ref": "#/definitions/ReleaseResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/reporting/deployments/xml": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "description": "Provides an XML report that contains all of the information about deployments\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentsXml",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/reporting/deployments/xml": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "description": "Provides an XML report that contains all of the information about deployments\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentsXml_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/reporting/deployments-counted-by-week": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "description": "Provides a report summarizing the weekly deployments per project over the last 6 months\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentsByProjectReport",
        "responses": {
          "200": {
            "description": "IEnumerable[ReportDeploymentCountOverTimeResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReportDeploymentCountOverTimeResource"
              }
            }
          },
          "400": {
            "description": "A projectIds query string parameter is required."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/reporting/deployments-counted-by-week": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "description": "Provides a report summarizing the weekly deployments per project over the last 6 months\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDeploymentsByProjectReport_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[ReportDeploymentCountOverTimeResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReportDeploymentCountOverTimeResource"
              }
            }
          },
          "400": {
            "description": "A projectIds query string parameter is required."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookProcesses/{id}": {
      "get": {
        "tags": [
          "RunbookProcesses"
        ],
        "summary": "Get a RunbookProcessResource by ID",
        "description": "Gets a Runbook Process by ID.",
        "operationId": "getRunbookProcessById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookProcessResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load RunbookProcessResource by ID",
            "schema": {
              "$ref": "#/definitions/RunbookProcessResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "RunbookProcesses"
        ],
        "description": "Modifies a Runbook Process. Only allowed for Runbook Processes owned by a project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateRunbookProcess",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookProcessResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookProcessResource"
            }
          },
          "400": {
            "description": "Changes to this process could not be saved, because another user has made changes to the process between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nValidation failed.\r\nYou cannot modify this process because it is frozen. You'll need to create a new process instead."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookProcesses/{id}": {
      "get": {
        "tags": [
          "RunbookProcesses"
        ],
        "summary": "Get a RunbookProcessResource by ID",
        "description": "Gets a Runbook Process by ID.",
        "operationId": "getRunbookProcessById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookProcessResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load RunbookProcessResource by ID",
            "schema": {
              "$ref": "#/definitions/RunbookProcessResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "RunbookProcesses"
        ],
        "description": "Modifies a Runbook Process. Only allowed for Runbook Processes owned by a project.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateRunbookProcess_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookProcessResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookProcessResource"
            }
          },
          "400": {
            "description": "Changes to this process could not be saved, because another user has made changes to the process between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nValidation failed.\r\nYou cannot modify this process because it is frozen. You'll need to create a new process instead."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookProcesses": {
      "get": {
        "tags": [
          "RunbookProcesses"
        ],
        "summary": "Get a list of RunbookProcessResources",
        "description": "Lists all the Runbook Processes in the supplied Octopus Deploy Space, sorted by Id",
        "operationId": "indexRunbookProcesses",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookProcessResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookProcessResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookProcesses": {
      "get": {
        "tags": [
          "RunbookProcesses"
        ],
        "summary": "Get a list of RunbookProcessResources",
        "description": "Lists all the Runbook Processes in the supplied Octopus Deploy Space, sorted by Id",
        "operationId": "indexRunbookProcesses_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookProcessResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookProcessResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookProcesses/{id}/runbookSnapshotTemplate": {
      "get": {
        "tags": [
          "RunbookProcesses"
        ],
        "description": "Gets all of the information necessary for creating or editing a Runbook Snapshot using this Runbook Process.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookSnapshotTemplateForRunbookStep",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookProcesses/{id}/runbookSnapshotTemplate": {
      "get": {
        "tags": [
          "RunbookProcesses"
        ],
        "description": "Gets all of the information necessary for creating or editing a Runbook Snapshot using this Runbook Process.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookSnapshotTemplateForRunbookStep_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookRuns": {
      "get": {
        "tags": [
          "RunbookRuns"
        ],
        "summary": "Get a list of RunbookRunResources",
        "description": "Lists all of the runbookRuns in the supplied Octopus Deploy Space, from projects, snapshots and environments accessible by the current user. The results will be sorted from most recent to least recent runbookRun.",
        "operationId": "indexRunbookRuns",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookRunResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookRunResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "RunbookRuns"
        ],
        "description": "Creates a new runbookRun.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createRunbookRunCreate",
        "responses": {
          "201": {
            "description": "RunbookRunResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunResource"
            }
          },
          "400": {
            "description": "License is not compliant.\r\nNo request body was supplied.\r\nRunbookRun creation failed.\r\nRunbookRun Schedule is invalid."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookRuns": {
      "get": {
        "tags": [
          "RunbookRuns"
        ],
        "summary": "Get a list of RunbookRunResources",
        "description": "Lists all of the runbookRuns in the supplied Octopus Deploy Space, from projects, snapshots and environments accessible by the current user. The results will be sorted from most recent to least recent runbookRun.",
        "operationId": "indexRunbookRuns_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookRunResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookRunResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "RunbookRuns"
        ],
        "description": "Creates a new runbookRun.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createRunbookRunCreate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookRunResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunResource"
            }
          },
          "400": {
            "description": "License is not compliant.\r\nNo request body was supplied.\r\nRunbookRun creation failed.\r\nRunbookRun Schedule is invalid."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookRuns/{id}": {
      "get": {
        "tags": [
          "RunbookRuns"
        ],
        "summary": "Get a RunbookRunResource by ID",
        "description": "Gets a runbookRun by ID.",
        "operationId": "getRunbookRunById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookRunResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load RunbookRunResource by ID",
            "schema": {
              "$ref": "#/definitions/RunbookRunResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "RunbookRuns"
        ],
        "summary": "Delete a RunbookRunResource by ID",
        "description": "Deletes a runbookRun.",
        "operationId": "deleteRunbookRun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookRunResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookRuns/{id}": {
      "get": {
        "tags": [
          "RunbookRuns"
        ],
        "summary": "Get a RunbookRunResource by ID",
        "description": "Gets a runbookRun by ID.",
        "operationId": "getRunbookRunById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookRunResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load RunbookRunResource by ID",
            "schema": {
              "$ref": "#/definitions/RunbookRunResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "RunbookRuns"
        ],
        "summary": "Delete a RunbookRunResource by ID",
        "description": "Deletes a runbookRun.",
        "operationId": "deleteRunbookRun_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookRunResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbooks": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Get a list of RunbookResources",
        "description": "Lists all the Runbooks in the supplied Octopus Deploy Space, sorted by Name",
        "operationId": "indexRunbooks",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Create a RunbookResource",
        "description": "Creates a new process.",
        "operationId": "createRunbook",
        "parameters": [
          {
            "name": "RunbookResource",
            "in": "body",
            "description": "The RunbookResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookResource Created",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbooks": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Get a list of RunbookResources",
        "description": "Lists all the Runbooks in the supplied Octopus Deploy Space, sorted by Name",
        "operationId": "indexRunbooks_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Create a RunbookResource",
        "description": "Creates a new process.",
        "operationId": "createRunbook_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "RunbookResource",
            "in": "body",
            "description": "The RunbookResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookResource Created",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbooks/{id}": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Get a RunbookResource by ID",
        "description": "Gets a process by ID.",
        "operationId": "getRunbookById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load RunbookResource by ID",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Modify a RunbookResource by ID",
        "description": "Modifies a process. Only allowed for processes owned by a project (cannot be used to change the process owned by a release).",
        "operationId": "updateRunbook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "RunbookResource",
            "in": "body",
            "description": "The RunbookResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookResource Modified",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Delete a RunbookResource by ID",
        "description": "Deletes an existing Runbook.",
        "operationId": "deleteRunbook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbooks/{id}": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Get a RunbookResource by ID",
        "description": "Gets a process by ID.",
        "operationId": "getRunbookById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load RunbookResource by ID",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Modify a RunbookResource by ID",
        "description": "Modifies a process. Only allowed for processes owned by a project (cannot be used to change the process owned by a release).",
        "operationId": "updateRunbook_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "RunbookResource",
            "in": "body",
            "description": "The RunbookResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookResource Modified",
            "schema": {
              "$ref": "#/definitions/RunbookResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Delete a RunbookResource by ID",
        "description": "Deletes an existing Runbook.",
        "operationId": "deleteRunbook_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbooks/all": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Get a list of RunbookResources",
        "description": "Lists all of the runbooks in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllRunbooks",
        "responses": {
          "200": {
            "description": "Load all RunbookResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RunbookResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbooks/all": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Get a list of RunbookResources",
        "description": "Lists all of the runbooks in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllRunbooks_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all RunbookResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RunbookResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbooks/{id}/runbookSnapshotTemplate": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "description": "Gets all of the information necessary for creating or editing a release using this Runbook.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookSnapshotTemplateForRunbook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbooks/{id}/runbookSnapshotTemplate": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "description": "Gets all of the information necessary for creating or editing a release using this Runbook.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookSnapshotTemplateForRunbook_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbooks/{id}/runbookRunTemplate": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "description": "Gets all of the information necessary for creating or editing a Runbook Run for this Runbook (when you do not have a snapshot).\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookRunTemplateForRunbook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbooks/{id}/runbookRunTemplate": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "description": "Gets all of the information necessary for creating or editing a Runbook Run for this Runbook (when you do not have a snapshot).\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookRunTemplateForRunbook_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbooks/{id}/runbookRuns/preview/{environment}/{tenant?}": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "description": "Gets a document that describes what steps will/won't be run during a Runbook Run on a given environment (and tenant if supplied) for a Runbook.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookRunPreviewForRunbook",
        "parameters": [
          {
            "name": "environment",
            "in": "path",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "path",
            "description": "ID of the tenant",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbooks/{id}/runbookRuns/preview/{environment}/{tenant?}": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "description": "Gets a document that describes what steps will/won't be run during a Runbook Run on a given environment (and tenant if supplied) for a Runbook.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookRunPreviewForRunbook_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "path",
            "description": "ID of the tenant",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbooks/{id}/run": {
      "post": {
        "tags": [
          "Runbooks"
        ],
        "description": "Runs the published version of this Runbook.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createRunbookRunForPublishedRunbookCreate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookRunResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunResource"
            }
          },
          "400": {
            "description": "License is not compliant.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nRunbook has no published snapshot.\r\nRunbookRun creation failed.\r\nRunbookRun Schedule is invalid."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbooks/{id}/run": {
      "post": {
        "tags": [
          "Runbooks"
        ],
        "description": "Runs the published version of this Runbook.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createRunbookRunForPublishedRunbookCreate_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookRunResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunResource"
            }
          },
          "400": {
            "description": "License is not compliant.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nRunbook has no published snapshot.\r\nRunbookRun creation failed.\r\nRunbookRun Schedule is invalid."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/runbooks": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Get a list of RunbookResources",
        "description": "Lists all of the Runbooks that belong to the given project.",
        "operationId": "indexRunbooks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{id}/runbooks": {
      "get": {
        "tags": [
          "Runbooks"
        ],
        "summary": "Get a list of RunbookResources",
        "description": "Lists all of the Runbooks that belong to the given project.",
        "operationId": "indexRunbooks_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookSnapshots": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Get a list of RunbookSnapshotResources",
        "description": "Lists all of the snapshots in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent snapshot.",
        "operationId": "indexRunbookSnapshots",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookSnapshotResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookSnapshotResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Create a RunbookSnapshotResource",
        "description": "Creates a new snapshot.",
        "operationId": "createRunbookSnapshot",
        "parameters": [
          {
            "name": "RunbookSnapshotResource",
            "in": "body",
            "description": "The RunbookSnapshotResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookSnapshotResource Created",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookSnapshots": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Get a list of RunbookSnapshotResources",
        "description": "Lists all of the snapshots in the supplied Octopus Deploy Space, from all projects. The results will be sorted from most recent to least recent snapshot.",
        "operationId": "indexRunbookSnapshots_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookSnapshotResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookSnapshotResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Create a RunbookSnapshotResource",
        "description": "Creates a new snapshot.",
        "operationId": "createRunbookSnapshot_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "RunbookSnapshotResource",
            "in": "body",
            "description": "The RunbookSnapshotResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RunbookSnapshotResource Created",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookSnapshots/{id}": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Get a RunbookSnapshotResource by ID",
        "description": "Gets a snapshot by ID.",
        "operationId": "getRunbookSnapshotById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookSnapshotResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load RunbookSnapshotResource by ID",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Modify a RunbookSnapshotResource by ID",
        "description": "Updates an existing snapshot.",
        "operationId": "updateRunbookSnapshot",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookSnapshotResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "RunbookSnapshotResource",
            "in": "body",
            "description": "The RunbookSnapshotResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource Modified",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Delete a RunbookSnapshotResource by ID",
        "description": "Deletes an existing snapshot, along with all of the runs, tasks and other associated resources belonging to the snapshot.",
        "operationId": "deleteRunbookSnapshot",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookSnapshotResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookSnapshots/{id}": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Get a RunbookSnapshotResource by ID",
        "description": "Gets a snapshot by ID.",
        "operationId": "getRunbookSnapshotById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookSnapshotResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load RunbookSnapshotResource by ID",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Modify a RunbookSnapshotResource by ID",
        "description": "Updates an existing snapshot.",
        "operationId": "updateRunbookSnapshot_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookSnapshotResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "RunbookSnapshotResource",
            "in": "body",
            "description": "The RunbookSnapshotResource resource to create",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource Modified",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Delete a RunbookSnapshotResource by ID",
        "description": "Deletes an existing snapshot, along with all of the runs, tasks and other associated resources belonging to the snapshot.",
        "operationId": "deleteRunbookSnapshot_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookSnapshotResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookSnapshots/{id}/runbookRuns/template": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "description": "Gets all of the information necessary for creating or editing a run for this snapshot.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookRunTemplateForRunbookSnapshot",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns/template": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "description": "Gets all of the information necessary for creating or editing a run for this snapshot.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookRunTemplateForRunbookSnapshot_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunTemplateResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunTemplateResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookSnapshots/{id}/runbookRuns/preview/{environment}/{tenant?}": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "description": "Gets a document that describes what steps will/won't be run during a run to a given environment (and tenant if supplied).\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookRunPreviewForRunbookSnapshot",
        "parameters": [
          {
            "name": "environment",
            "in": "path",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "path",
            "description": "ID of the tenant",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns/preview/{environment}/{tenant?}": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "description": "Gets a document that describes what steps will/won't be run during a run to a given environment (and tenant if supplied).\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookRunPreviewForRunbookSnapshot_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "description": "ID of the environment",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "path",
            "description": "ID of the tenant",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookRunPreviewResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookRunPreviewResource"
            }
          },
          "400": {
            "description": "No environment parameter was provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookSnapshots/{id}/runbookRuns": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Get a list of RunbookRunResources",
        "description": "Lists all of the runs that belong to the given snapshot. Runs will be ordered from most recent to least recent.",
        "operationId": "indexRunbookRuns",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookSnapshot",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookRunResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookRunResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookSnapshots/{id}/runbookRuns": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Get a list of RunbookRunResources",
        "description": "Lists all of the runs that belong to the given snapshot. Runs will be ordered from most recent to least recent.",
        "operationId": "indexRunbookRuns_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the RunbookSnapshot",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookRunResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookRunResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbookSnapshots/{id}/snapshot-variables": {
      "post": {
        "tags": [
          "RunbookSnapshots"
        ],
        "description": "Refresh the variable snapshots associated with the runbook snapshot. The runbook's process must not have changed since the snapshot was created.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createRunbookSnapshotSnapshotVariables",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbookSnapshots/{id}/snapshot-variables": {
      "post": {
        "tags": [
          "RunbookSnapshots"
        ],
        "description": "Refresh the variable snapshots associated with the runbook snapshot. The runbook's process must not have changed since the snapshot was created.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createRunbookSnapshotSnapshotVariables_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/runbookSnapshots": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Get a list of RunbookSnapshotResources",
        "description": "Lists all of the runbookSnapshots that belong to the given project. RunbookSnapshots will be ordered from most recent to least recent.",
        "operationId": "indexRunbookSnapshots",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookSnapshotResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookSnapshotResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{id}/runbookSnapshots": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Get a list of RunbookSnapshotResources",
        "description": "Lists all of the runbookSnapshots that belong to the given project. RunbookSnapshots will be ordered from most recent to least recent.",
        "operationId": "indexRunbookSnapshots_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookSnapshotResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookSnapshotResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/projects/{id}/runbookSnapshots/{name}": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "description": "Gets a single runbookSnapshot by project ID and name.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookSnapshotByProjectAndName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the runbook",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo name parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/projects/{id}/runbookSnapshots/{name}": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "description": "Gets a single runbookSnapshot by project ID and name.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRunbookSnapshotByProjectAndName_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the runbook",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "RunbookSnapshotResource resource returned",
            "schema": {
              "$ref": "#/definitions/RunbookSnapshotResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo name parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/runbooks/{id}/runbookSnapshots": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Get a list of RunbookSnapshotResources",
        "description": "Lists all of the runbookSnapshots that belong to the given runbook. RunbookSnapshots will be ordered from most recent to least recent.",
        "operationId": "indexRunbookSnapshots",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Runbook",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookSnapshotResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookSnapshotResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/runbooks/{id}/runbookSnapshots": {
      "get": {
        "tags": [
          "RunbookSnapshots"
        ],
        "summary": "Get a list of RunbookSnapshotResources",
        "description": "Lists all of the runbookSnapshots that belong to the given runbook. RunbookSnapshots will be ordered from most recent to least recent.",
        "operationId": "indexRunbookSnapshots_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Runbook",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[RunbookSnapshotResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[RunbookSnapshotResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Returns status of Octopus scheduled tasks.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getScheduler",
        "responses": {
          "200": {
            "description": "SchedulerStatusResource resource returned",
            "schema": {
              "$ref": "#/definitions/SchedulerStatusResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler/stop": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Returns HTTP OK (200) when the Octopus Server scheduler has been stopped.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getSchedulerStop",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler/start": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Returns HTTP OK (200) when the Octopus Server scheduler has been started.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getSchedulerStart",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler/trigger": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Returns HTTP OK (200) when the Octopus Server scheduler has been triggered.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getSchedulerTrigger",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler/{name}/logs": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Get the details of a scheduled task.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getScheduledTaskDetails",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the task",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ScheduledTaskDetailsResource resource returned",
            "schema": {
              "$ref": "#/definitions/ScheduledTaskDetailsResource"
            }
          },
          "400": {
            "description": "No name parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scheduler/{name}/logs/raw": {
      "get": {
        "tags": [
          "Scheduler"
        ],
        "description": "Get the details of a scheduled task as raw text.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getScheduledTaskRawDetails",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scopeduserroles/{id}": {
      "get": {
        "tags": [
          "ScopedUserRole"
        ],
        "summary": "Get a ScopedUserRoleResource by ID",
        "description": "Gets a scoped user role by ID.",
        "operationId": "getScopedUserRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ScopedUserRoleResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ScopedUserRoleResource by ID",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ScopedUserRole"
        ],
        "summary": "Modify a ScopedUserRoleResource by ID",
        "description": "Modifies an existing scoped user role.",
        "operationId": "updateScopedUserRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ScopedUserRoleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ScopedUserRoleResource",
            "in": "body",
            "description": "The ScopedUserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ScopedUserRoleResource Modified",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ScopedUserRole"
        ],
        "summary": "Delete a ScopedUserRoleResource by ID",
        "description": "Deletes an existing scoped user role.",
        "operationId": "deleteScopedUserRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ScopedUserRoleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/scopeduserroles/{id}": {
      "get": {
        "tags": [
          "ScopedUserRole"
        ],
        "summary": "Get a ScopedUserRoleResource by ID",
        "description": "Gets a scoped user role by ID.",
        "operationId": "getScopedUserRoleById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ScopedUserRoleResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load ScopedUserRoleResource by ID",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ScopedUserRole"
        ],
        "summary": "Modify a ScopedUserRoleResource by ID",
        "description": "Modifies an existing scoped user role.",
        "operationId": "updateScopedUserRole_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ScopedUserRoleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "ScopedUserRoleResource",
            "in": "body",
            "description": "The ScopedUserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ScopedUserRoleResource Modified",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ScopedUserRole"
        ],
        "summary": "Delete a ScopedUserRoleResource by ID",
        "description": "Deletes an existing scoped user role.",
        "operationId": "deleteScopedUserRole_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ScopedUserRoleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/scopeduserroles": {
      "get": {
        "tags": [
          "ScopedUserRole"
        ],
        "description": "Lists the name and ID of all of the scoped user roles in the supplied Octopus Deploy Space. The results will be sorted by name.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListScopedUserRole",
        "responses": {
          "200": {
            "description": "ResourceCollection[ScopedUserRoleResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ScopedUserRoleResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ScopedUserRole"
        ],
        "summary": "Create a ScopedUserRoleResource",
        "description": "Creates a scoped user role.",
        "operationId": "createScopedUserRole",
        "parameters": [
          {
            "name": "ScopedUserRoleResource",
            "in": "body",
            "description": "The ScopedUserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ScopedUserRoleResource Created",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/scopeduserroles": {
      "get": {
        "tags": [
          "ScopedUserRole"
        ],
        "description": "Lists the name and ID of all of the scoped user roles in the supplied Octopus Deploy Space. The results will be sorted by name.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListScopedUserRole_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ScopedUserRoleResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ScopedUserRoleResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "ScopedUserRole"
        ],
        "summary": "Create a ScopedUserRoleResource",
        "description": "Creates a scoped user role.",
        "operationId": "createScopedUserRole_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "ScopedUserRoleResource",
            "in": "body",
            "description": "The ScopedUserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ScopedUserRoleResource Created",
            "schema": {
              "$ref": "#/definitions/ScopedUserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverconfiguration": {
      "get": {
        "tags": [
          "ServerConfiguration"
        ],
        "description": "Gets information about the editable server configuration in use by the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getServerConfiguration",
        "responses": {
          "200": {
            "description": "ServerConfigurationResource resource returned",
            "schema": {
              "$ref": "#/definitions/ServerConfigurationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "ServerConfiguration"
        ],
        "description": "Updates the server configuration used by the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateServerConfiguration",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverconfiguration/settings": {
      "get": {
        "tags": [
          "ServerConfiguration"
        ],
        "description": "Gets information about the server configuration in use by the Octopus Server\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getServerConfigurationSettings",
        "responses": {
          "200": {
            "description": "IEnumerable[ServerConfigurationSettingsResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerConfigurationSettingsResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus": {
      "get": {
        "tags": [
          "ServerStatus"
        ],
        "description": "Shows information about the status of the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getServerStatus",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/health": {
      "get": {
        "tags": [
          "ServerStatus"
        ],
        "description": "Provides a super simple interface perfect for checking the general health of your entire Octopus Server cluster.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getServerStatusHealth",
        "responses": {
          "200": {
            "description": "ServerStatusHealthResource resource returned",
            "schema": {
              "$ref": "#/definitions/ServerStatusHealthResource"
            }
          },
          "418": {
            "description": "ServerStatusHealthResource resource returned",
            "schema": {
              "$ref": "#/definitions/ServerStatusHealthResource"
            }
          }
        }
      }
    },
    "/api/serverstatus/logs": {
      "get": {
        "tags": [
          "ServerStatus"
        ],
        "description": "Retrieves the most recent high-priority log messages from this execution of the Octopus Server process.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getRecentLogs",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/system-info": {
      "get": {
        "tags": [
          "ServerStatus"
        ],
        "description": "Provides information about the Octopus Server process and the machine on which it is running.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getSystemInfo",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/gc-collect": {
      "post": {
        "tags": [
          "ServerStatus"
        ],
        "description": "Forces a GC collect.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createSystemGarbageCollect",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/system-report": {
      "get": {
        "tags": [
          "ServerStatus"
        ],
        "description": "Creates a .zip archive containing an aggregate of the other system information APIs.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getSystemReport",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/extensions": {
      "get": {
        "tags": [
          "ServerStatus"
        ],
        "description": "Provides statistics for the loaded server extensions.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getExtensionStats",
        "responses": {
          "200": {
            "description": "IEnumerable[ExtensionsInfoResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtensionsInfoResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/serverstatus/timezones": {
      "get": {
        "tags": [
          "ServerStatus"
        ],
        "description": "Lists timezones supported by the server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListServerTimezones",
        "responses": {
          "200": {
            "description": "IEnumerable[ServerTimezoneResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerTimezoneResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/smtpconfiguration": {
      "get": {
        "tags": [
          "SmtpConfiguration"
        ],
        "description": "Gets information about the SMTP (email) settings in use by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getSmtpConfiguration",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "SmtpConfiguration"
        ],
        "description": "Updates the SMTP settings used by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateSmtpConfiguration",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/smtpconfiguration/isconfigured": {
      "get": {
        "tags": [
          "SmtpConfiguration"
        ],
        "description": "A low privilege check to determine if SMTP is configured\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getSmtpIsConfigured",
        "responses": {
          "200": {
            "description": "SmtpIsConfiguredResource resource returned",
            "schema": {
              "$ref": "#/definitions/SmtpIsConfiguredResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/(?<spaceId>Spaces-\\d+)": {
      "get": {
        "tags": [
          "SpaceHome"
        ],
        "description": "Returns a document describing the specified Space and links to other parts of the API that apply to the Space.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getSpaceHome",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "ID of the space",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "SpaceRootResource resource returned",
            "schema": {
              "$ref": "#/definitions/SpaceRootResource"
            }
          }
        }
      }
    },
    "/api/spaces": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Get a list of SpaceResources",
        "description": "Lists all of the spaces in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexSpaces",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[SpaceResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[SpaceResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Spaces"
        ],
        "description": "Creates a new Space.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createSpace",
        "responses": {
          "201": {
            "description": "SpaceResource resource returned",
            "schema": {
              "$ref": "#/definitions/SpaceResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nYou cannot create another space. This will exceed the limits of your current license. Please contact sales@octopus.com to upgrade your licence."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/spaces/all": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Get a list of SpaceResources",
        "description": "Lists all of the spaces in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllSpaces",
        "responses": {
          "200": {
            "description": "Load all SpaceResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpaceResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/spaces/{id}": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Get a SpaceResource by ID",
        "description": "Get a space",
        "operationId": "getSpaceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SpaceResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load SpaceResource by ID",
            "schema": {
              "$ref": "#/definitions/SpaceResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Spaces"
        ],
        "description": "Modifies an existing space.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateModifySpace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "SpaceResource resource returned",
            "schema": {
              "$ref": "#/definitions/SpaceResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nRequest has bad data"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Spaces"
        ],
        "description": "Deletes an existing space.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "deleteSpace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/spaces/{id}/logo": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "description": "Gets the logo associated with the space.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getSpaceLogo",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Spaces"
        ],
        "description": "Updates the logo associated with the space.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateSpaceLogo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Spaces"
        ],
        "description": "Updates the logo associated with the space.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createSpaceLogo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/subscriptions/{id}": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a SubscriptionResource by ID",
        "description": "Get a subscription",
        "operationId": "getSubscriptionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SubscriptionResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load SubscriptionResource by ID",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Subscription"
        ],
        "summary": "Modify a SubscriptionResource by ID",
        "description": "Updates an existing subscription",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SubscriptionResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "SubscriptionResource",
            "in": "body",
            "description": "The SubscriptionResource resource to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SubscriptionResource Modified",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Subscription"
        ],
        "summary": "Delete a SubscriptionResource by ID",
        "description": "Deletes an existing subscription.",
        "operationId": "deleteSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SubscriptionResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/subscriptions/{id}": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a SubscriptionResource by ID",
        "description": "Get a subscription",
        "operationId": "getSubscriptionById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SubscriptionResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load SubscriptionResource by ID",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Subscription"
        ],
        "summary": "Modify a SubscriptionResource by ID",
        "description": "Updates an existing subscription",
        "operationId": "updateSubscription_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SubscriptionResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "SubscriptionResource",
            "in": "body",
            "description": "The SubscriptionResource resource to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SubscriptionResource Modified",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Subscription"
        ],
        "summary": "Delete a SubscriptionResource by ID",
        "description": "Deletes an existing subscription.",
        "operationId": "deleteSubscription_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SubscriptionResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/subscriptions": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of SubscriptionResources",
        "description": "Lists all of the subscriptions in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexSubscriptions",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[SubscriptionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[SubscriptionResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Create a SubscriptionResource",
        "description": "Creates a new subscription",
        "operationId": "createSubscription",
        "parameters": [
          {
            "name": "SubscriptionResource",
            "in": "body",
            "description": "The SubscriptionResource resource to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SubscriptionResource Created",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/subscriptions": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of SubscriptionResources",
        "description": "Lists all of the subscriptions in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexSubscriptions_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[SubscriptionResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[SubscriptionResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Create a SubscriptionResource",
        "description": "Creates a new subscription",
        "operationId": "createSubscription_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "SubscriptionResource",
            "in": "body",
            "description": "The SubscriptionResource resource to create",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SubscriptionResource Created",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/subscriptions/all": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of SubscriptionResources",
        "description": "Lists all the subscriptions in the supplied Octopus Deploy Space.",
        "operationId": "listAllSubscriptions",
        "responses": {
          "200": {
            "description": "Load all SubscriptionResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/subscriptions/all": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of SubscriptionResources",
        "description": "Lists all the subscriptions in the supplied Octopus Deploy Space.",
        "operationId": "listAllSubscriptions_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all SubscriptionResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tagsets": {
      "get": {
        "tags": [
          "TagSets"
        ],
        "summary": "Get a list of TagSetResources",
        "description": "Lists all of the tag sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by the `SortOrder` field on each tag set.",
        "operationId": "indexTagSets",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TagSetResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TagSetResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "TagSets"
        ],
        "summary": "Create a TagSetResource",
        "description": "Creates a new tag set.",
        "operationId": "createTagSet",
        "parameters": [
          {
            "name": "TagSetResource",
            "in": "body",
            "description": "The TagSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TagSetResource Created",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tagsets": {
      "get": {
        "tags": [
          "TagSets"
        ],
        "summary": "Get a list of TagSetResources",
        "description": "Lists all of the tag sets in the supplied Octopus Deploy Space. The results will be sorted alphabetically by the `SortOrder` field on each tag set.",
        "operationId": "indexTagSets_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TagSetResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TagSetResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "TagSets"
        ],
        "summary": "Create a TagSetResource",
        "description": "Creates a new tag set.",
        "operationId": "createTagSet_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "TagSetResource",
            "in": "body",
            "description": "The TagSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TagSetResource Created",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tagsets/all": {
      "get": {
        "tags": [
          "TagSets"
        ],
        "summary": "Get a list of TagSetResources",
        "description": "Lists the details of all of the tag sets in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each tag set.",
        "operationId": "listAllTagSets",
        "responses": {
          "200": {
            "description": "Load all TagSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tagsets/all": {
      "get": {
        "tags": [
          "TagSets"
        ],
        "summary": "Get a list of TagSetResources",
        "description": "Lists the details of all of the tag sets in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each tag set.",
        "operationId": "listAllTagSets_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all TagSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tagsets/{id}": {
      "get": {
        "tags": [
          "TagSets"
        ],
        "summary": "Get a TagSetResource by ID",
        "description": "Gets a tag set by ID.",
        "operationId": "getTagSetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TagSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TagSetResource by ID",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "TagSets"
        ],
        "summary": "Modify a TagSetResource by ID",
        "description": "Modifies an existing tag set.",
        "operationId": "updateTagSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TagSetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TagSetResource",
            "in": "body",
            "description": "The TagSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TagSetResource Modified",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TagSets"
        ],
        "summary": "Delete a TagSetResource by ID",
        "description": "Deletes an existing tag set.",
        "operationId": "deleteTagSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TagSetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tagsets/{id}": {
      "get": {
        "tags": [
          "TagSets"
        ],
        "summary": "Get a TagSetResource by ID",
        "description": "Gets a tag set by ID.",
        "operationId": "getTagSetById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TagSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TagSetResource by ID",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "TagSets"
        ],
        "summary": "Modify a TagSetResource by ID",
        "description": "Modifies an existing tag set.",
        "operationId": "updateTagSet_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TagSetResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TagSetResource",
            "in": "body",
            "description": "The TagSetResource resource to create",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TagSetResource Modified",
            "schema": {
              "$ref": "#/definitions/TagSetResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TagSets"
        ],
        "summary": "Delete a TagSetResource by ID",
        "description": "Deletes an existing tag set.",
        "operationId": "deleteTagSet_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TagSetResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tagsets/sortorder": {
      "put": {
        "tags": [
          "TagSets"
        ],
        "description": "Takes an array of tag set IDs as the request body, uses the order of items in the array to sort the tag sets on the server. The ID of every tag set must be specified.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateSortTagSets",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tagsets/sortorder": {
      "put": {
        "tags": [
          "TagSets"
        ],
        "description": "Takes an array of tag set IDs as the request body, uses the order of items in the array to sort the tag sets on the server. The ID of every tag set must be specified.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateSortTagSets_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}/details": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Gets a single task by ID, including the full task log as a tree of activity elements.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTaskDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskDetailsResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskDetailsResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tasks/{id}/details": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Gets a single task by ID, including the full task log as a tree of activity elements.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTaskDetails_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskDetailsResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskDetailsResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}/raw": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Gets the full task log of a given resource as plain text. Useful when the log needs to be rendered to a console or sent as an email attachment.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTaskRaw",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tasks/{id}/raw": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Gets the full task log of a given resource as plain text. Useful when the log needs to be rendered to a console or sent as an email attachment.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTaskRaw_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a TaskResource by ID",
        "description": "Gets a single task by ID.",
        "operationId": "getTaskById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TaskResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TaskResource by ID",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a TaskResource by ID",
        "description": "Gets a single task by ID.",
        "operationId": "getTaskById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TaskResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TaskResource by ID",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}/queued-behind": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a list of TaskResources",
        "description": "Gets a list of tasks that this task is currently queued behind.",
        "operationId": "indexTasks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Task",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TaskResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TaskResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tasks/{id}/queued-behind": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a list of TaskResources",
        "description": "Gets a list of tasks that this task is currently queued behind.",
        "operationId": "indexTasks_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Task",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TaskResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TaskResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Lists all of the tasks in the supplied Octopus Deploy Space. The results will be sorted from newest to oldest.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListTasks",
        "responses": {
          "200": {
            "description": "ResourceCollection[TaskResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TaskResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a TaskResource",
        "description": "Creates a new task.",
        "operationId": "createTask",
        "parameters": [
          {
            "name": "TaskResource",
            "in": "body",
            "description": "The TaskResource resource to create",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TaskResource Created",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Lists all of the tasks in the supplied Octopus Deploy Space. The results will be sorted from newest to oldest.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListTasks_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TaskResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TaskResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a TaskResource",
        "description": "Creates a new task.",
        "operationId": "createTask_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "TaskResource",
            "in": "body",
            "description": "The TaskResource resource to create",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TaskResource Created",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/rerun/{id}": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Creates a new task and executes it, using a given task as the input. Note that deployment tasks cannot be re-run.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createTaskRerun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis task cannot be re-run."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tasks/rerun/{id}": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Creates a new task and executes it, using a given task as the input. Note that deployment tasks cannot be re-run.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createTaskRerun_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nThis task cannot be re-run."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}/cancel": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Marks the given task as canceled.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createTaskCancel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tasks/{id}/cancel": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Marks the given task as canceled.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createTaskCancel_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/{id}/state": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Change the state of a task\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createTaskState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No body was provided.\r\nNo id parameter was provided.\r\nNo reason was provided.\r\nNo state was provided.\r\nThe task can not be put into the state.  Valid states are: Canceled, Failed, Success.\r\nThe task is already in the state.\r\nThe task state can not be changed to the selected state.  It can only be changed out of the states: Canceled, Failed, Success."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tasks/{id}/state": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Change the state of a task\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createTaskState_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskResource resource returned",
            "schema": {
              "$ref": "#/definitions/TaskResource"
            }
          },
          "400": {
            "description": "No body was provided.\r\nNo id parameter was provided.\r\nNo reason was provided.\r\nNo state was provided.\r\nThe task can not be put into the state.  Valid states are: Canceled, Failed, Success.\r\nThe task is already in the state.\r\nThe task state can not be changed to the selected state.  It can only be changed out of the states: Canceled, Failed, Success."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tasks/tasktypes": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Lists supported task types.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListTaskTypes",
        "responses": {
          "200": {
            "description": "IEnumerable[TaskTypeResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskTypeResource"
              }
            }
          }
        }
      }
    },
    "/api/{baseSpaceId}/tasks/tasktypes": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Lists supported task types.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListTaskTypes_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[TaskTypeResource] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskTypeResource"
              }
            }
          }
        }
      }
    },
    "/api/teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a TeamResource by ID",
        "description": "Gets a team by ID.",
        "operationId": "getTeamById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TeamResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TeamResource by ID",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Modify a TeamResource by ID",
        "description": "Modifies an existing team. The Everyone team is treated as a special case and its members and external groups may not be changed.",
        "operationId": "updateTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TeamResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TeamResource",
            "in": "body",
            "description": "The TeamResource resource to create",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TeamResource Modified",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Delete a TeamResource by ID",
        "description": "Deletes an existing team.",
        "operationId": "deleteTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TeamResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a TeamResource by ID",
        "description": "Gets a team by ID.",
        "operationId": "getTeamById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TeamResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TeamResource by ID",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Modify a TeamResource by ID",
        "description": "Modifies an existing team. The Everyone team is treated as a special case and its members and external groups may not be changed.",
        "operationId": "updateTeam_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TeamResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TeamResource",
            "in": "body",
            "description": "The TeamResource resource to create",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TeamResource Modified",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Delete a TeamResource by ID",
        "description": "Deletes an existing team.",
        "operationId": "deleteTeam_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TeamResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a list of TeamResources",
        "description": "Lists all of the teams in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexTeams",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TeamResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TeamResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create a TeamResource",
        "description": "Creates a team.",
        "operationId": "createTeam",
        "parameters": [
          {
            "name": "TeamResource",
            "in": "body",
            "description": "The TeamResource resource to create",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TeamResource Created",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a list of TeamResources",
        "description": "Lists all of the teams in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexTeams_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TeamResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TeamResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create a TeamResource",
        "description": "Creates a team.",
        "operationId": "createTeam_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "TeamResource",
            "in": "body",
            "description": "The TeamResource resource to create",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TeamResource Created",
            "schema": {
              "$ref": "#/definitions/TeamResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/teams/all": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a list of TeamResources",
        "description": "Lists the name and ID of all of the teams in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "listAllTeams",
        "responses": {
          "200": {
            "description": "Load all TeamResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/teams/all": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a list of TeamResources",
        "description": "Lists the name and ID of all of the teams in the supplied Octopus Deploy Space. The results will be sorted by name.",
        "operationId": "listAllTeams_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all TeamResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/teams/{id}/scopeduserroles": {
      "get": {
        "tags": [
          "Teams"
        ],
        "description": "Lists the name and ID of all of the teams in the supplied Octopus Deploy Space. The results will be sorted by name.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListScopedUserRoleForTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the team",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ScopedUserRoleResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ScopedUserRoleResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/teams/{id}/scopeduserroles": {
      "get": {
        "tags": [
          "Teams"
        ],
        "description": "Lists the name and ID of all of the teams in the supplied Octopus Deploy Space. The results will be sorted by name.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getListScopedUserRoleForTeam_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the team",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[ScopedUserRoleResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[ScopedUserRoleResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/status": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Reports back the status of multi-tenancy\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantsConfiguration",
        "responses": {
          "200": {
            "description": "MultiTenancyStatusResource resource returned",
            "schema": {
              "$ref": "#/definitions/MultiTenancyStatusResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tenants/status": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Reports back the status of multi-tenancy\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantsConfiguration_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MultiTenancyStatusResource resource returned",
            "schema": {
              "$ref": "#/definitions/MultiTenancyStatusResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/all": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a list of TenantResources",
        "description": "Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllTenants",
        "responses": {
          "200": {
            "description": "Load all TenantResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TenantResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tenants/all": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a list of TenantResources",
        "description": "Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllTenants_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all TenantResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TenantResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/variableset-test": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Checks tenants for matching variable set rule\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantVariableSetTest",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tenants/variableset-test": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Checks tenants for matching variable set rule\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantVariableSetTest_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/variables-missing": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Returns list of tenants who are missing required variables\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantVariablesMissing",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tenants/variables-missing": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Returns list of tenants who are missing required variables\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantVariablesMissing_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/{id}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a TenantResource by ID",
        "description": "Gets a single tenant by ID.",
        "operationId": "getTenantById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TenantResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TenantResource by ID",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Modify a TenantResource by ID",
        "description": "Modifies an existing tenant.",
        "operationId": "updateTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TenantResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TenantResource",
            "in": "body",
            "description": "The TenantResource resource to create",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TenantResource Modified",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Delete a TenantResource by ID",
        "description": "Deletes an existing tenant.",
        "operationId": "deleteTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TenantResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tenants/{id}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a TenantResource by ID",
        "description": "Gets a single tenant by ID.",
        "operationId": "getTenantById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TenantResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load TenantResource by ID",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Modify a TenantResource by ID",
        "description": "Modifies an existing tenant.",
        "operationId": "updateTenant_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TenantResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TenantResource",
            "in": "body",
            "description": "The TenantResource resource to create",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TenantResource Modified",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Delete a TenantResource by ID",
        "description": "Deletes an existing tenant.",
        "operationId": "deleteTenant_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TenantResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a list of TenantResources",
        "description": "Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name, and returned 30 at a time.",
        "operationId": "indexTenants",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TenantResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TenantResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create a TenantResource",
        "description": "Creates a new tenant.",
        "operationId": "createTenant",
        "parameters": [
          {
            "name": "TenantResource",
            "in": "body",
            "description": "The TenantResource resource to create",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TenantResource Created",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tenants": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a list of TenantResources",
        "description": "Lists all of the tenants in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name, and returned 30 at a time.",
        "operationId": "indexTenants_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[TenantResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[TenantResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create a TenantResource",
        "description": "Creates a new tenant.",
        "operationId": "createTenant_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "TenantResource",
            "in": "body",
            "description": "The TenantResource resource to create",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TenantResource Created",
            "schema": {
              "$ref": "#/definitions/TenantResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/{id}/logo": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Gets the logo associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantLogo",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the logo associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateTenantLogo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the logo associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createTenantLogo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tenants/{id}/logo": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Gets the logo associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantLogo_Spaces",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "304": {
            "description": "NotModified"
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the logo associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateTenantLogo_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the logo associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createTenantLogo_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Action rejected.\r\nInvalid image provided.\r\nNo id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/{id}/variables": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Gets all the available variables associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantVariables",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TenantVariableResource resource returned",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the variables associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateTenantVariables",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TenantVariableResource resource returned",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the variables associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createTenantVariables",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TenantVariableResource resource returned",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tenants/{id}/variables": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Gets all the available variables associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantVariables_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TenantVariableResource resource returned",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the variables associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateTenantVariables_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TenantVariableResource resource returned",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "description": "Updates the variables associated with the tenant.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createTenantVariables_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "TenantVariableResource resource returned",
            "schema": {
              "$ref": "#/definitions/TenantVariableResource"
            }
          },
          "400": {
            "description": "No id parameter was provided.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenants/tag-test": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Checks tenants for matching tags rule\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantTagTest",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tenants/tag-test": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "description": "Checks tenants for matching tags rule\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantTagTest_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/tenantvariables/all": {
      "get": {
        "tags": [
          "TenantVariables"
        ],
        "description": "Lists all of the tenant variables in the supplied Octopus Deploy Space. The results will be sorted alphabetically by id.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantVariablesAll",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/tenantvariables/all": {
      "get": {
        "tags": [
          "TenantVariables"
        ],
        "description": "Lists all of the tenant variables in the supplied Octopus Deploy Space. The results will be sorted alphabetically by id.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getTenantVariablesAll_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/upgradeconfiguration": {
      "get": {
        "tags": [
          "UpgradeConfiguration"
        ],
        "description": "Gets information about the upgrade configuration in use by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUpgradeConfiguration",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "UpgradeConfiguration"
        ],
        "description": "Updates the upgrade configuration used by the Octopus Server.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateUpgradeConfiguration",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/useronboarding": {
      "get": {
        "tags": [
          "UserOnboarding"
        ],
        "description": "Gets information about how far the Octopus Server is towards having its first release deployed.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getOnboarding",
        "responses": {
          "200": {
            "description": "OnboardingResource resource returned",
            "schema": {
              "$ref": "#/definitions/OnboardingResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/useronboarding": {
      "get": {
        "tags": [
          "UserOnboarding"
        ],
        "description": "Gets information about how far the Octopus Server is towards having its first release deployed.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getOnboarding_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OnboardingResource resource returned",
            "schema": {
              "$ref": "#/definitions/OnboardingResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{id}/permissions": {
      "get": {
        "tags": [
          "UserPermissions"
        ],
        "description": "Gets summarized permission information. Available for the current authenticated user only.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserGetPermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserPermissionSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserPermissionSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/users/{id}/permissions": {
      "get": {
        "tags": [
          "UserPermissions"
        ],
        "description": "Gets summarized permission information. Available for the current authenticated user only.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserGetPermissions_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserPermissionSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserPermissionSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{id}/permissions/configuration": {
      "get": {
        "tags": [
          "UserPermissions"
        ],
        "description": "Gets a summary of the configuration of the user's permissions information. Available for the current authenticated user only.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserGetPermissionsConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserPermissionSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserPermissionSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/users/{id}/permissions/configuration": {
      "get": {
        "tags": [
          "UserPermissions"
        ],
        "description": "Gets a summary of the configuration of the user's permissions information. Available for the current authenticated user only.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserGetPermissionsConfiguration_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserPermissionSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserPermissionSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{id}/permissions/export": {
      "get": {
        "tags": [
          "UserPermissions"
        ],
        "description": "Gets list of permissions as a csv file. Available for the current authenticated user only.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserPermissionsExport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/users/{id}/permissions/export": {
      "get": {
        "tags": [
          "UserPermissions"
        ],
        "description": "Gets list of permissions as a csv file. Available for the current authenticated user only.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserPermissionsExport_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/userroles/{id}": {
      "get": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Get a UserRoleResource by ID",
        "description": "Gets a single user role by ID.",
        "operationId": "getUserRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserRoleResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load UserRoleResource by ID",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Modify a UserRoleResource by ID",
        "description": "Modifies an existing user role definition.",
        "operationId": "updateUserRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserRoleResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "UserRoleResource",
            "in": "body",
            "description": "The UserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserRoleResource Modified",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Delete a UserRoleResource by ID",
        "description": "Deletes an existing user role.",
        "operationId": "deleteUserRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserRoleResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/userroles": {
      "get": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Get a list of UserRoleResources",
        "description": "Lists all of the user roles in the current Octopus Deploy instance. The results will be sorted alphabetically by name.",
        "operationId": "indexUserRoles",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[UserRoleResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[UserRoleResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Create a UserRoleResource",
        "description": "Creates a custom user role definition.",
        "operationId": "createUserRole",
        "parameters": [
          {
            "name": "UserRoleResource",
            "in": "body",
            "description": "The UserRoleResource resource to create",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "UserRoleResource Created",
            "schema": {
              "$ref": "#/definitions/UserRoleResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/userroles/all": {
      "get": {
        "tags": [
          "UserRoles"
        ],
        "summary": "Get a list of UserRoleResources",
        "description": "Lists all of the user roles in the current Octopus Deploy instance. The results will be sorted alphabetically by name.",
        "operationId": "listAllUserRoles",
        "responses": {
          "200": {
            "description": "Load all UserRoleResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRoleResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Authenticates a user and returns a response with a cookie for the current user. This cookie can be submitted with future requests to avoid re-authentication.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createUserLogin",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Revokes the authentication cookie from the current session.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createUserLogout",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        }
      }
    },
    "/api/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Registers a new user and responds with an authentication cookie. Unless the first administrator user is being registered, an invitation code must be provided.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createUserRegister",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Gets information about the current user.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserGetCurrent",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{id}/spaces": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Gets a list of spaces available to the current authenticated user only.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserGetSpaces",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of UserResources",
        "description": "Lists all of the users in the current Octopus Deploy instance, from all teams. The results will be sorted alphabetically by username.",
        "operationId": "indexUsers",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[UserResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[UserResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Creates a new user.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "createUserCreate",
        "responses": {
          "201": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied.\r\nUser creation failed.\r\nUsername is reserved and can't be used to create new users.\r\nYou cannot add multiple logins for the same identity provider."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a UserResource by ID",
        "description": "Gets a single user by ID.",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load UserResource by ID",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Modifies an existing user.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserResource"
            }
          },
          "400": {
            "description": "A user with a matching external login already exists.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nPasswords cannot be set for service user accounts.\r\nYou cannot add multiple logins for the same identity provider."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a UserResource by ID",
        "description": "Delete an existing user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/all": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of UserResources",
        "description": "Lists all of the users in the supplied Octopus Deploy Space. The results will be sorted alphabetically by `Username`.",
        "operationId": "listAllUsers",
        "responses": {
          "200": {
            "description": "Load all UserResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/authentication/{userId?}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Provides the details of the enabled authentication providers and whether the current user can edit logins for the given user.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserAuthentication",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the resource being edited",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UserAuthenticationResource resource returned",
            "schema": {
              "$ref": "#/definitions/UserAuthenticationResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/identity-metadata": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Gets the metadata to describe the claims/fields used by authentication providers that support identities.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserIdentityMetadata",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/external-search": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Searches for users, using the authentication providers.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserExternalSearch",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/users/{id}/teams": {
      "get": {
        "tags": [
          "UserTeams"
        ],
        "description": "Gets a list of teams (id and name only) for the specified user, including any from external auth-provider security groups.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserGetTeams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[ProjectedTeamReferenceDataItem] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectedTeamReferenceDataItem"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/users/{id}/teams": {
      "get": {
        "tags": [
          "UserTeams"
        ],
        "description": "Gets a list of teams (id and name only) for the specified user, including any from external auth-provider security groups.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getUserGetTeams_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[ProjectedTeamReferenceDataItem] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectedTeamReferenceDataItem"
              }
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/variables/all": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get a list of VariableSetResources",
        "description": "Lists all the variable sets in the supplied Octopus Deploy Space.",
        "operationId": "listAllVariableSets",
        "responses": {
          "200": {
            "description": "Load all VariableSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/variables/all": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get a list of VariableSetResources",
        "description": "Lists all the variable sets in the supplied Octopus Deploy Space.",
        "operationId": "listAllVariableSets_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all VariableSetResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableSetResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/variables/{id}": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get a VariableSetResource by ID",
        "description": "Gets a variable set by Id.",
        "operationId": "getVariableSetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the VariableSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load VariableSetResource by ID",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Variables"
        ],
        "description": "Updates a variable set.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateVariableSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "Changes to these variables could not be saved, because another user has made changes to the variables between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nChanges to these variables could not be saved, because your available environment scopes changed while you were editing the variables. Please reload or open a new tab to make your changes.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nPrompted variables cannot be scoped to anything except an environment.\r\nVariable ids must be unique.\r\nVariable set only scoped to owner.\r\nVariable validation failed.\r\nYou cannot modify this variable set because the set is frozen. You'll need to create a new variable set instead."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/variables/{id}": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Get a VariableSetResource by ID",
        "description": "Gets a variable set by Id.",
        "operationId": "getVariableSetById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the VariableSetResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load VariableSetResource by ID",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Variables"
        ],
        "description": "Updates a variable set.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateVariableSet_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "Changes to these variables could not be saved, because another user has made changes to the variables between when you started editing and when you saved your changes. Please reload or open a new tab to make your changes.\r\nChanges to these variables could not be saved, because your available environment scopes changed while you were editing the variables. Please reload or open a new tab to make your changes.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nPrompted variables cannot be scoped to anything except an environment.\r\nVariable ids must be unique.\r\nVariable set only scoped to owner.\r\nVariable validation failed.\r\nYou cannot modify this variable set because the set is frozen. You'll need to create a new variable set instead."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/variables/names": {
      "get": {
        "tags": [
          "Variables"
        ],
        "description": "List the names of variables that can be used in deployment actions. If a project is specified, this will include variables in that project.  If a project environments filter is specified, project variables only scoped to the environment will be excluded. \r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getVariableNames",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/variables/names": {
      "get": {
        "tags": [
          "Variables"
        ],
        "description": "List the names of variables that can be used in deployment actions. If a project is specified, this will include variables in that project.  If a project environments filter is specified, project variables only scoped to the environment will be excluded. \r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getVariableNames_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/variables/preview": {
      "get": {
        "tags": [
          "Variables"
        ],
        "description": "List the evaluated variables for a deployment. \r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getVariablePreview",
        "responses": {
          "200": {
            "description": "VariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "No project was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/variables/preview": {
      "get": {
        "tags": [
          "Variables"
        ],
        "description": "List the evaluated variables for a deployment. \r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getVariablePreview_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "VariableSetResource resource returned",
            "schema": {
              "$ref": "#/definitions/VariableSetResource"
            }
          },
          "400": {
            "description": "No project was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workerpools/all": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Get a list of WorkerPoolResources",
        "description": "Lists the name and ID of all of the worker pools in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each pool.",
        "operationId": "listAllWorkerPools",
        "responses": {
          "200": {
            "description": "Load all WorkerPoolResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkerPoolResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workerpools/all": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Get a list of WorkerPoolResources",
        "description": "Lists the name and ID of all of the worker pools in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each pool.",
        "operationId": "listAllWorkerPools_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all WorkerPoolResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkerPoolResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workerpools/{id}": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Get a WorkerPoolResource by ID",
        "description": "Gets a single worker pool by ID.",
        "operationId": "getWorkerPoolById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerPoolResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load WorkerPoolResource by ID",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Modify a WorkerPoolResource by ID",
        "description": "Modifies an existing worker pool.",
        "operationId": "updateWorkerPool",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerPoolResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "WorkerPoolResource",
            "in": "body",
            "description": "The WorkerPoolResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerPoolResource Modified",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Delete a WorkerPoolResource by ID",
        "description": "Deletes an existing pool.",
        "operationId": "deleteWorkerPool",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerPoolResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workerpools/{id}": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Get a WorkerPoolResource by ID",
        "description": "Gets a single worker pool by ID.",
        "operationId": "getWorkerPoolById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerPoolResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load WorkerPoolResource by ID",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Modify a WorkerPoolResource by ID",
        "description": "Modifies an existing worker pool.",
        "operationId": "updateWorkerPool_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerPoolResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "WorkerPoolResource",
            "in": "body",
            "description": "The WorkerPoolResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerPoolResource Modified",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Delete a WorkerPoolResource by ID",
        "description": "Deletes an existing pool.",
        "operationId": "deleteWorkerPool_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerPoolResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workerpools": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Get a list of WorkerPoolResources",
        "description": "Lists all of the worker pools in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "indexWorkerPools",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[WorkerPoolResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[WorkerPoolResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Create a WorkerPoolResource",
        "description": "Creates a new worker pool.",
        "operationId": "createWorkerPool",
        "parameters": [
          {
            "name": "WorkerPoolResource",
            "in": "body",
            "description": "The WorkerPoolResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "WorkerPoolResource Created",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workerpools": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Get a list of WorkerPoolResources",
        "description": "Lists all of the worker pools in the supplied Octopus Deploy Space. The results will be sorted by the `SortOrder` field on each environment.",
        "operationId": "indexWorkerPools_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[WorkerPoolResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[WorkerPoolResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Create a WorkerPoolResource",
        "description": "Creates a new worker pool.",
        "operationId": "createWorkerPool_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "WorkerPoolResource",
            "in": "body",
            "description": "The WorkerPoolResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "WorkerPoolResource Created",
            "schema": {
              "$ref": "#/definitions/WorkerPoolResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workerpools/summary": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "description": "Lists all worker pools, including a summary of machine information\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerPoolsSummary",
        "responses": {
          "200": {
            "description": "WorkerPoolsSummaryResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolsSummaryResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workerpools/summary": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "description": "Lists all worker pools, including a summary of machine information\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerPoolsSummary_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerPoolsSummaryResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolsSummaryResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workerpools/{id}/workers": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the machines that belong to the given worker pool.",
        "operationId": "indexWorkers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerPool",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[WorkerResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[WorkerResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workerpools/{id}/workers": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the machines that belong to the given worker pool.",
        "operationId": "indexWorkers_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerPool",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[WorkerResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[WorkerResource]"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workerpools/supportedtypes": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "description": "Lists the available Worker Pool types.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerPoolSupportedTypes",
        "responses": {
          "200": {
            "description": "WorkerPoolSupportedTypesResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolSupportedTypesResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workerpools/supportedtypes": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "description": "Lists the available Worker Pool types.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerPoolSupportedTypes_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerPoolSupportedTypesResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolSupportedTypesResource"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workerpools/dynamicworkertypes": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "description": "Lists the available Worker Types for the Dynamic Worker Pool\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerPoolDynamicWorkerTypes",
        "responses": {
          "200": {
            "description": "WorkerPoolDynamicWorkerTypesResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolDynamicWorkerTypesResource"
            }
          },
          "500": {
            "description": "Dynamic Worker API Error"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workerpools/dynamicworkertypes": {
      "get": {
        "tags": [
          "WorkerPools"
        ],
        "description": "Lists the available Worker Types for the Dynamic Worker Pool\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerPoolDynamicWorkerTypes_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerPoolDynamicWorkerTypesResource resource returned",
            "schema": {
              "$ref": "#/definitions/WorkerPoolDynamicWorkerTypesResource"
            }
          },
          "500": {
            "description": "Dynamic Worker API Error"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workerpools/sortorder": {
      "put": {
        "tags": [
          "WorkerPools"
        ],
        "description": "Takes an array of work pool IDs as the request body, uses the order of items in the array to sort the worker pools on the server. The ID of every worker pool must be specified.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateSortWorkerPools",
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workerpools/sortorder": {
      "put": {
        "tags": [
          "WorkerPools"
        ],
        "description": "Takes an array of work pool IDs as the request body, uses the order of items in the array to sort the worker pools on the server. The ID of every worker pool must be specified.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "updateSortWorkerPools_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Default"
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workers/all": {
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the workers in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllWorkers",
        "responses": {
          "200": {
            "description": "Load all WorkerResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkerResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workers/all": {
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the workers in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "listAllWorkers_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load all WorkerResource",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkerResource"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workers/{id}": {
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "Get a WorkerResource by ID",
        "description": "Gets a single worker machine by ID.",
        "operationId": "getWorkerById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load WorkerResource by ID",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Workers"
        ],
        "summary": "Modify a WorkerResource by ID",
        "description": "Modifies an existing worker machine.",
        "operationId": "updateWorker",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "WorkerResource",
            "in": "body",
            "description": "The WorkerResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerResource Modified",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Workers"
        ],
        "summary": "Delete a WorkerResource by ID",
        "description": "Deletes an existing worker machine.",
        "operationId": "deleteWorker",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workers/{id}": {
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "Get a WorkerResource by ID",
        "description": "Gets a single worker machine by ID.",
        "operationId": "getWorkerById_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerResource to load",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Load WorkerResource by ID",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Workers"
        ],
        "summary": "Modify a WorkerResource by ID",
        "description": "Modifies an existing worker machine.",
        "operationId": "updateWorker_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerResource to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "WorkerResource",
            "in": "body",
            "description": "The WorkerResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WorkerResource Modified",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo id parameter was provided.\r\nNo request body was supplied.\r\nThis resource is read-only and cannot be modified."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Workers"
        ],
        "summary": "Delete a WorkerResource by ID",
        "description": "Deletes an existing worker machine.",
        "operationId": "deleteWorker_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WorkerResource to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest\r\nNo id parameter was provided.\r\nThis resource is read-only and cannot be deleted."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workers/{id}/connection": {
      "get": {
        "tags": [
          "Workers"
        ],
        "description": "Get the status of the network connection between the Octopus server and a worker.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerConnectionStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineConnectionStatus resource returned",
            "schema": {
              "$ref": "#/definitions/MachineConnectionStatus"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workers/{id}/connection": {
      "get": {
        "tags": [
          "Workers"
        ],
        "description": "Get the status of the network connection between the Octopus server and a worker.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerConnectionStatus_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineConnectionStatus resource returned",
            "schema": {
              "$ref": "#/definitions/MachineConnectionStatus"
            }
          },
          "400": {
            "description": "No id parameter was provided."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workers": {
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the registered worker machines in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexWorkers",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[WorkerResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[WorkerResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workers"
        ],
        "summary": "Create a WorkerResource",
        "description": "Creates a new worker.",
        "operationId": "createWorker",
        "parameters": [
          {
            "name": "WorkerResource",
            "in": "body",
            "description": "The WorkerResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "WorkerResource Created",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workers": {
      "get": {
        "tags": [
          "Workers"
        ],
        "summary": "Get a list of WorkerResources",
        "description": "Lists all of the registered worker machines in the supplied Octopus Deploy Space. The results will be sorted alphabetically by name.",
        "operationId": "indexWorkers_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of items to skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of items to take",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ResourceCollection[WorkerResource] resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceCollection[WorkerResource]"
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workers"
        ],
        "summary": "Create a WorkerResource",
        "description": "Creates a new worker.",
        "operationId": "createWorker_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          },
          {
            "name": "WorkerResource",
            "in": "body",
            "description": "The WorkerResource resource to create",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "WorkerResource Created",
            "schema": {
              "$ref": "#/definitions/WorkerResource"
            }
          },
          "400": {
            "description": "Model validation failed.\r\nNo request body was supplied."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workers/discover": {
      "get": {
        "tags": [
          "Workers"
        ],
        "description": "Interrogate a machine for communication details so that it may be added to the installation.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDiscoverWorker",
        "responses": {
          "200": {
            "description": "MachineResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          },
          "400": {
            "description": "The hostname of the machine to discover must be supplied as URI parameter named 'host'.\r\nThere was a controlled failure."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workers/discover": {
      "get": {
        "tags": [
          "Workers"
        ],
        "description": "Interrogate a machine for communication details so that it may be added to the installation.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getDiscoverWorker_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "MachineResource resource returned",
            "schema": {
              "$ref": "#/definitions/MachineResource"
            }
          },
          "400": {
            "description": "The hostname of the machine to discover must be supplied as URI parameter named 'host'.\r\nThere was a controlled failure."
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workers/operatingsystem/names/all": {
      "get": {
        "tags": [
          "Workers"
        ],
        "description": "Gets all operating system names for workers. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerOperatingSystemNamesListAll",
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workers/operatingsystem/names/all": {
      "get": {
        "tags": [
          "Workers"
        ],
        "description": "Gets all operating system names for workers. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerOperatingSystemNamesListAll_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/workers/operatingsystem/shells/all": {
      "get": {
        "tags": [
          "Workers"
        ],
        "description": "Gets all operating system shell names for workers. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerOperatingSystemShellNameListAll",
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    },
    "/api/{baseSpaceId}/workers/operatingsystem/shells/all": {
      "get": {
        "tags": [
          "Workers"
        ],
        "description": "Gets all operating system shell names for workers. The result will be a string array.\r\nNOTE: This definition is not complete. We will be adding more detail in future releases of Octopus.",
        "operationId": "getWorkerOperatingSystemShellNameListAll_Spaces",
        "parameters": [
          {
            "name": "baseSpaceId",
            "in": "path",
            "description": "ID of the space",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "IEnumerable[String] resource returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": [],
            "APIKeyQuery": [],
            "NugetApiKeyHeader": []
          }
        ]
      }
    }
  },
  "definitions": {
    "AccountResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantedDeploymentParticipation": {
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "string"
        },
        "TenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AccountType": {
          "enum": [
            "None",
            "UsernamePassword",
            "SshKeyPair",
            "Token",
            "AzureSubscription",
            "AzureServicePrincipal",
            "AmazonWebServicesAccount",
            "AmazonWebServicesRoleAccount"
          ],
          "type": "string",
          "readOnly": true
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AccountUsageResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetUsageEntry"
          }
        },
        "DeploymentProcesses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepUsage"
          }
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseUsage"
          }
        },
        "ProjectVariableSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectVariableSetUsage"
          }
        },
        "LibraryVariableSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetUsageEntry"
          }
        },
        "RunbookProcesses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookStepUsage"
          }
        },
        "RunbookSnapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookSnapshotUsage"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionTemplateCategoryResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "DisplayOrder": {
          "format": "int32",
          "type": "integer"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionTemplateParameterResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "HelpText": {
          "type": "string"
        },
        "DefaultValue": {
          "$ref": "#/definitions/PropertyValueResource"
        },
        "DisplaySettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionTemplateResource": {
      "required": [
        "Name",
        "ActionType"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ActionType": {
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "CommunityActionTemplateId": {
          "type": "string"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageReference"
          }
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "Parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          },
          "readOnly": true
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionTemplateSearchResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Keywords": {
          "type": "string"
        },
        "Author": {
          "type": "string"
        },
        "Website": {
          "type": "string"
        },
        "IsInstalled": {
          "type": "boolean"
        },
        "IsBuiltIn": {
          "type": "boolean"
        },
        "Category": {
          "type": "string"
        },
        "Categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CommunityActionTemplateId": {
          "type": "string"
        },
        "HasUpdate": {
          "type": "boolean"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionTemplateUsageResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ActionTemplateId": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "ProcessType": {
          "enum": [
            "Deployment",
            "Runbook"
          ],
          "type": "string"
        },
        "ProcessId": {
          "type": "string"
        },
        "ActionId": {
          "type": "string"
        },
        "ActionName": {
          "type": "string"
        },
        "RunbookName": {
          "type": "string"
        },
        "StepId": {
          "type": "string"
        },
        "StepName": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectSlug": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActionUpdateRemovedPackageUsage": {
      "type": "object",
      "properties": {
        "PackageReference": {
          "type": "string",
          "readOnly": true
        },
        "UsedBy": {
          "enum": [
            "ProjectVersionStrategy",
            "ProjectReleaseCreationStrategy",
            "ChannelRule"
          ],
          "type": "string",
          "readOnly": true
        },
        "UsedById": {
          "type": "string",
          "readOnly": true
        },
        "UsedByName": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ActionUpdateResultResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Outcome": {
          "enum": [
            "Success",
            "ManualMergeRequired",
            "DefaultParamterValueMissing",
            "RemovedPackageInUse"
          ],
          "type": "string"
        },
        "ManualMergeRequiredReasonsByPropertyName": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "NamesOfNewParametersMissingDefaultValue": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RemovedPackageUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionUpdateRemovedPackageUsage"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ActivityLogElement": {
      "type": "object",
      "properties": {
        "Category": {
          "type": "string"
        },
        "OccurredAt": {
          "format": "date-time",
          "type": "string"
        },
        "MessageText": {
          "type": "string"
        },
        "Detail": {
          "type": "string"
        }
      }
    },
    "ActivityLogEntry": {
      "type": "object",
      "properties": {
        "OccurredAt": {
          "format": "date-time",
          "type": "string"
        },
        "Category": {
          "enum": [
            "Trace",
            "Verbose",
            "Info",
            "Wait",
            "Highlight",
            "Gap",
            "Alert",
            "Warning",
            "Error",
            "Fatal",
            "Planned",
            "Updated",
            "Finished",
            "Abandoned"
          ],
          "type": "string"
        },
        "MessageText": {
          "type": "string"
        },
        "Detail": {
          "type": "string"
        }
      }
    },
    "ActivityLogTreeNode": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Started": {
          "format": "date-time",
          "type": "string"
        },
        "Ended": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "enum": [
            "Pending",
            "Running",
            "Success",
            "Failed",
            "Skipped",
            "SuccessWithWarning",
            "Canceled"
          ],
          "type": "string"
        },
        "ShowAtSummaryLevel": {
          "type": "boolean",
          "readOnly": true
        },
        "ProgressPercentage": {
          "format": "int32",
          "type": "integer"
        },
        "ProgressMessage": {
          "type": "string"
        },
        "Children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogTreeNode"
          },
          "readOnly": true
        },
        "LogElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogEntry"
          },
          "readOnly": true
        }
      }
    },
    "ApiKeyResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Purpose": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "ApiKey": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ArtifactResource": {
      "required": [
        "Filename"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Filename": {
          "type": "string"
        },
        "Source": {
          "type": "string"
        },
        "ServerTaskId": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LogCorrelationId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AuthenticationProviderElement": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "IdentityType": {
          "enum": [
            "Guest",
            "UsernamePassword",
            "ActiveDirectory",
            "OAuth"
          ],
          "type": "string"
        },
        "FormsLoginEnabled": {
          "type": "boolean"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "JavascriptLinks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CSSLinks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AuthenticationProviderThatSupportsGroups": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "Name": {
          "type": "string"
        },
        "IsRoleBased": {
          "type": "boolean"
        },
        "SupportsGroupLookup": {
          "type": "boolean"
        },
        "LookupUri": {
          "type": "string"
        }
      }
    },
    "AuthenticationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AuthenticationProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthenticationProviderElement"
          }
        },
        "AutoLoginEnabled": {
          "type": "boolean"
        },
        "AnyAuthenticationProvidersSupportPasswordManagement": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AutoDeployReleaseOverrideResource": {
      "type": "object",
      "properties": {
        "EnvironmentId": {
          "type": "string",
          "readOnly": true
        },
        "TenantId": {
          "type": "string",
          "readOnly": true
        },
        "ReleaseId": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AzureEnvironmentResource": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "AuthenticationEndpoint": {
          "type": "string"
        },
        "ResourceManagerEndpoint": {
          "type": "string"
        },
        "GraphEndpoint": {
          "type": "string"
        },
        "ManagementEndpoint": {
          "type": "string"
        },
        "StorageEndpointSuffix": {
          "type": "string"
        }
      }
    },
    "AzureResourceGroupResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "AzureStorageAccountResource": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Location": {
          "type": "string"
        }
      }
    },
    "AzureWebSiteResource[AzureWebSitesListAction]": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "WebSpace": {
          "type": "string"
        },
        "ResourceGroup": {
          "type": "string"
        },
        "Region": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AzureWebSiteSlotResource": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Site": {
          "type": "string"
        },
        "ResourceGroupName": {
          "type": "string"
        },
        "Region": {
          "type": "string"
        }
      }
    },
    "BuiltInFeedStatsResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "TotalPackages": {
          "format": "int32",
          "type": "integer"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CertificateConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "SignatureAlgorithm": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CertificateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "CertificateData": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "Password": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantedDeploymentParticipation": {
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "string"
        },
        "TenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CertificateDataFormat": {
          "enum": [
            "Pkcs12",
            "Der",
            "Pem",
            "Unknown"
          ],
          "type": "string"
        },
        "Archived": {
          "format": "date-time",
          "type": "string"
        },
        "ReplacedBy": {
          "type": "string"
        },
        "SubjectDistinguishedName": {
          "type": "string"
        },
        "SubjectCommonName": {
          "type": "string"
        },
        "SubjectOrganization": {
          "type": "string"
        },
        "IssuerDistinguishedName": {
          "type": "string"
        },
        "IssuerCommonName": {
          "type": "string"
        },
        "IssuerOrganization": {
          "type": "string"
        },
        "SelfSigned": {
          "type": "boolean"
        },
        "Thumbprint": {
          "type": "string"
        },
        "NotAfter": {
          "format": "date-time",
          "type": "string"
        },
        "NotBefore": {
          "format": "date-time",
          "type": "string"
        },
        "IsExpired": {
          "type": "boolean"
        },
        "HasPrivateKey": {
          "type": "boolean"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "SerialNumber": {
          "type": "string"
        },
        "SignatureAlgorithmName": {
          "type": "string"
        },
        "SubjectAlternativeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CertificateChain": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/X509Certificate"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CertificateUsageResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProjectUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectResource"
          }
        },
        "LibraryVariableSetUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetResource"
          }
        },
        "TenantUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TenantResource"
          }
        },
        "DeploymentTargetUsages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentTargetResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ChannelResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "LifecycleId": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "Rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelVersionRuleResource"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ChannelVersionRuleResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "VersionRange": {
          "type": "string"
        },
        "Tag": {
          "type": "string"
        },
        "ActionPackages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentActionPackageResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CloudTemplateMetadata": {
      "type": "object",
      "properties": {
        "Metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "Values": {
          "type": "object"
        }
      }
    },
    "CommitDetails": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LinkUrl": {
          "type": "string"
        },
        "Comment": {
          "type": "string"
        }
      }
    },
    "CommunityActionTemplateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Author": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "Website": {
          "type": "string"
        },
        "HistoryUrl": {
          "type": "string"
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "Parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          },
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ConfigurationSectionMetadata": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ConnectivityCheck": {
      "type": "object",
      "properties": {
        "Title": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        },
        "DependsOnPropertyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Control": {
      "type": "object",
      "properties": {}
    },
    "DashboardConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IncludedProjectGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludedProjectIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludedEnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludedTenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectLimit": {
          "format": "int32",
          "type": "integer"
        },
        "IncludedTenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardEnvironmentResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardItemResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "EnvironmentId": {
          "type": "string"
        },
        "ReleaseId": {
          "type": "string"
        },
        "DeploymentId": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "ChannelId": {
          "type": "string"
        },
        "ReleaseVersion": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "CompletedTime": {
          "format": "date-time",
          "type": "string"
        },
        "State": {
          "enum": [
            "Queued",
            "Executing",
            "Failed",
            "Canceled",
            "TimedOut",
            "Success",
            "Cancelling"
          ],
          "type": "string"
        },
        "HasPendingInterruptions": {
          "type": "boolean"
        },
        "HasWarningsOrErrors": {
          "type": "boolean"
        },
        "ErrorMessage": {
          "type": "string"
        },
        "Duration": {
          "type": "string"
        },
        "IsCurrent": {
          "type": "boolean"
        },
        "IsPrevious": {
          "type": "boolean"
        },
        "IsCompleted": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardProjectGroupResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardProjectResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "Slug": {
          "type": "string"
        },
        "ProjectGroupId": {
          "type": "string"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantedDeploymentMode": {
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "string"
        },
        "CanPerformUntenantedDeployment": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardProjectResource"
          }
        },
        "ProjectGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardProjectGroupResource"
          }
        },
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardEnvironmentResource"
          }
        },
        "Tenants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardTenantResource"
          }
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardItemResource"
          }
        },
        "PreviousItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardItemResource"
          }
        },
        "ProjectLimit": {
          "format": "int32",
          "type": "integer"
        },
        "IsFiltered": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DashboardTenantResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ProjectEnvironments": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DefectResource": {
      "required": [
        "Description"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "Unresolved",
            "Resolved"
          ],
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentActionPackageResource": {
      "type": "object",
      "properties": {
        "DeploymentAction": {
          "type": "string"
        },
        "PackageReference": {
          "type": "string"
        }
      }
    },
    "DeploymentActionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ActionType": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "CanBeUsedForProjectVersioning": {
          "type": "boolean"
        },
        "IsRequired": {
          "type": "boolean"
        },
        "WorkerPoolId": {
          "type": "string"
        },
        "Environments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "ExcludedEnvironments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Channels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageReference"
          }
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentEnvironmentSettingsMetadata": {
      "type": "object",
      "properties": {
        "ExtensionId": {
          "type": "string"
        },
        "Metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "DeploymentPreviewResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseChanges"
          }
        },
        "ChangesMarkdown": {
          "type": "string"
        },
        "StepsToExecute": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentTemplateStep"
          }
        },
        "Form": {
          "$ref": "#/definitions/Form"
        },
        "UseGuidedFailureModeByDefault": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentProcessResource": {
      "required": [
        "Version"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentStepResource"
          },
          "readOnly": true
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "LastSnapshotId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentPromomotionTenant": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "PromoteTo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromotionTarget"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentPromotionTarget": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentResource": {
      "required": [
        "ReleaseId",
        "EnvironmentId"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ReleaseId": {
          "type": "string"
        },
        "ChannelId": {
          "type": "string"
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "Changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseChanges"
          }
        },
        "ChangesMarkdown": {
          "type": "string"
        },
        "EnvironmentId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "ForcePackageDownload": {
          "type": "boolean"
        },
        "ForcePackageRedeployment": {
          "type": "boolean"
        },
        "SkipActions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpecificMachineIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ExcludedMachineIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ManifestVariableSetId": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "UseGuidedFailure": {
          "type": "boolean"
        },
        "Comments": {
          "type": "string"
        },
        "FormValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTimeExpiry": {
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "TentacleRetentionPeriod": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "DeployedBy": {
          "type": "string"
        },
        "DeployedById": {
          "type": "string"
        },
        "FailureEncountered": {
          "type": "boolean"
        },
        "DeployedToMachineIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentStepResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "PackageRequirement": {
          "enum": [
            "LetOctopusDecide",
            "BeforePackageAcquisition",
            "AfterPackageAcquisition"
          ],
          "type": "string"
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          },
          "readOnly": true
        },
        "Condition": {
          "enum": [
            "Success",
            "Failure",
            "Always",
            "Variable"
          ],
          "type": "string"
        },
        "StartTrigger": {
          "enum": [
            "StartAfterPrevious",
            "StartWithPrevious"
          ],
          "type": "string"
        },
        "Actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentActionResource"
          },
          "readOnly": true
        }
      }
    },
    "DeploymentTargetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantedDeploymentParticipation": {
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "string"
        },
        "TenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "Uri": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "MachinePolicyId": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "Online",
            "Offline",
            "Unknown",
            "NeedsUpgrade",
            "CalamariNeedsUpgrade",
            "Disabled"
          ],
          "type": "string"
        },
        "HealthStatus": {
          "enum": [
            "Healthy",
            "Unavailable",
            "Unknown",
            "HasWarnings",
            "Unhealthy"
          ],
          "type": "string"
        },
        "HasLatestCalamari": {
          "type": "boolean"
        },
        "StatusSummary": {
          "type": "string"
        },
        "IsInProcess": {
          "type": "boolean"
        },
        "Endpoint": {
          "$ref": "#/definitions/EndpointResource"
        },
        "OperatingSystem": {
          "type": "string"
        },
        "ShellName": {
          "type": "string"
        },
        "ShellVersion": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentTemplateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsDeploymentProcessModified": {
          "type": "boolean"
        },
        "DeploymentNotes": {
          "type": "string"
        },
        "IsVariableSetModified": {
          "type": "boolean"
        },
        "IsLibraryVariableSetModified": {
          "type": "boolean"
        },
        "PromoteTo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromotionTarget"
          }
        },
        "TenantPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromomotionTenant"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentTemplateStep": {
      "type": "object",
      "properties": {
        "ActionId": {
          "type": "string"
        },
        "ActionName": {
          "type": "string"
        },
        "ActionNumber": {
          "type": "string"
        },
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachineNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineDeploymentPreview"
          }
        },
        "CanBeSkipped": {
          "type": "boolean"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "HasNoApplicableMachines": {
          "type": "boolean"
        },
        "UnavailableMachines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "ExcludedMachines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        }
      }
    },
    "DisplayInfo": {
      "type": "object",
      "properties": {
        "Required": {
          "type": "boolean"
        },
        "ReadOnly": {
          "type": "boolean"
        },
        "Label": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Options": {
          "$ref": "#/definitions/OptionsMetadata"
        },
        "ListApi": {
          "$ref": "#/definitions/ListApiMetadata"
        },
        "ShowCopyToClipboard": {
          "type": "boolean"
        },
        "PropertyApplicability": {
          "$ref": "#/definitions/PropertyApplicability"
        },
        "ConnectivityCheck": {
          "$ref": "#/definitions/ConnectivityCheck"
        }
      }
    },
    "DocumentTypeDocument": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "DynamicWorkerType": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "EndpointResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CommunicationStyle": {
          "enum": [
            "None",
            "TentaclePassive",
            "TentacleActive",
            "Ssh",
            "OfflineDrop",
            "AzureWebApp",
            "Ftp",
            "AzureCloudService",
            "AzureServiceFabricCluster",
            "Kubernetes"
          ],
          "type": "string",
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EnvironmentResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "UseGuidedFailure": {
          "type": "boolean"
        },
        "AllowDynamicInfrastructure": {
          "type": "boolean"
        },
        "SpaceId": {
          "type": "string"
        },
        "ExtensionSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionSettingsValues"
          },
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EnvironmentsSummaryResource": {
      "type": "object",
      "properties": {
        "TotalMachines": {
          "format": "int32",
          "type": "integer"
        },
        "TotalDisabledMachines": {
          "format": "int32",
          "type": "integer"
        },
        "MachineHealthStatusSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineEndpointSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineTenantSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineTenantTagSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "EnvironmentSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSummaryResource"
          }
        },
        "TentacleUpgradesRequired": {
          "type": "boolean"
        },
        "MachineIdsForCalamariUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EnvironmentSummaryResource": {
      "type": "object",
      "properties": {
        "Environment": {
          "$ref": "#/definitions/EnvironmentResource"
        },
        "TotalMachines": {
          "format": "int32",
          "type": "integer"
        },
        "TotalDisabledMachines": {
          "format": "int32",
          "type": "integer"
        },
        "MachineHealthStatusSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineEndpointSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineTenantSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineTenantTagSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "TentacleUpgradesRequired": {
          "type": "boolean"
        },
        "MachineIdsForCalamariUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachineIdsForTentacleUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EventAgentResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EventCategoryResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EventGroupResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "EventCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EventNotificationSubscription": {
      "type": "object",
      "properties": {
        "Filter": {
          "$ref": "#/definitions/EventNotificationSubscriptionFilter"
        },
        "EmailTeams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EmailFrequencyPeriod": {
          "type": "string"
        },
        "EmailPriority": {
          "enum": [
            "Normal",
            "Low",
            "High"
          ],
          "type": "string"
        },
        "EmailDigestLastProcessed": {
          "format": "date-time",
          "type": "string"
        },
        "EmailDigestLastProcessedEventAutoId": {
          "format": "int64",
          "type": "integer"
        },
        "EmailShowDatesInTimeZoneId": {
          "type": "string"
        },
        "WebhookURI": {
          "type": "string"
        },
        "WebhookTeams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "WebhookTimeout": {
          "type": "string"
        },
        "WebhookHeaderKey": {
          "type": "string"
        },
        "WebhookHeaderValue": {
          "type": "string"
        },
        "WebhookLastProcessed": {
          "format": "date-time",
          "type": "string"
        },
        "WebhookLastProcessedEventAutoId": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "EventNotificationSubscriptionFilter": {
      "type": "object",
      "properties": {
        "Users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Projects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Environments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EventGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EventCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EventAgents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tenants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DocumentTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EventReference": {
      "type": "object",
      "properties": {
        "ReferencedDocumentId": {
          "type": "string",
          "readOnly": true
        },
        "StartIndex": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Length": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "EventResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "RelatedDocumentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Category": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "IsService": {
          "type": "boolean"
        },
        "IdentityEstablishedWith": {
          "type": "string"
        },
        "UserAgent": {
          "type": "string"
        },
        "Occurred": {
          "format": "date-time",
          "type": "string"
        },
        "Message": {
          "type": "string"
        },
        "MessageHtml": {
          "type": "string"
        },
        "MessageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventReference"
          }
        },
        "Comments": {
          "type": "string"
        },
        "Details": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ExtensionSettingsValues": {
      "type": "object",
      "properties": {
        "ExtensionId": {
          "type": "string"
        },
        "Values": {
          "type": "object"
        }
      }
    },
    "ExtensionsInfoResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "AssemblyName": {
          "type": "string"
        },
        "Author": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "IsCustom": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FeaturesConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsBuiltInWorkerEnabled": {
          "type": "boolean"
        },
        "IsCommunityActionTemplatesEnabled": {
          "type": "boolean"
        },
        "IsKubernetesEnabled": {
          "type": "boolean"
        },
        "IsHelpSidebarEnabled": {
          "type": "boolean"
        },
        "HelpSidebarSupportLink": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FeedResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "FeedType": {
          "enum": [
            "None",
            "NuGet",
            "Docker",
            "Maven",
            "OctopusProject",
            "GitHub",
            "Helm",
            "AwsElasticContainerRegistry",
            "BuiltIn"
          ],
          "type": "string",
          "readOnly": true
        },
        "PackageAcquisitionLocationOptions": {
          "type": "array",
          "items": {
            "enum": [
              "Server",
              "ExecutionTarget",
              "NotAcquired"
            ],
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Form": {
      "type": "object",
      "properties": {
        "Values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormElement"
          }
        }
      }
    },
    "FormElement": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "Control": {
          "$ref": "#/definitions/Control",
          "readOnly": true
        },
        "IsValueRequired": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "IdentityClaimResource": {
      "type": "object",
      "properties": {
        "Value": {
          "type": "string"
        },
        "IsIdentifyingClaim": {
          "type": "boolean"
        }
      }
    },
    "IdentityResource": {
      "type": "object",
      "properties": {
        "IdentityProviderName": {
          "type": "string"
        },
        "Claims": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/IdentityClaimResource"
          },
          "readOnly": true
        }
      }
    },
    "InterruptionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "IsPending": {
          "type": "boolean"
        },
        "Form": {
          "$ref": "#/definitions/Form"
        },
        "RelatedDocumentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ResponsibleTeamIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ResponsibleUserId": {
          "type": "string"
        },
        "CanTakeResponsibility": {
          "type": "boolean"
        },
        "HasResponsibility": {
          "type": "boolean"
        },
        "TaskId": {
          "type": "string"
        },
        "CorrelationId": {
          "type": "string"
        },
        "IsLinkedToOtherInterruption": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "InvitationResource": {
      "required": [
        "AddToTeamIds"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AddToTeamIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "InvitationCode": {
          "type": "string"
        },
        "Expires": {
          "format": "date-time",
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Library": {
      "type": "object",
      "properties": {
        "LibraryVariableSetId": {
          "type": "string",
          "readOnly": true
        },
        "LibraryVariableSetName": {
          "type": "string"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "Variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValueResource"
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LibraryVariableSetProjectUsage": {
      "type": "object",
      "properties": {
        "ProjectSlug": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "RunbookSnapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetRunbookSnapshotUsageEntry"
          }
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetReleaseUsageEntry"
          }
        },
        "IsCurrentlyBeingUsedInProject": {
          "type": "boolean"
        }
      }
    },
    "LibraryVariableSetReleaseUsageEntry": {
      "type": "object",
      "properties": {
        "ReleaseId": {
          "type": "string"
        },
        "ReleaseVersion": {
          "type": "string"
        }
      }
    },
    "LibraryVariableSetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "VariableSetId": {
          "type": "string"
        },
        "ContentType": {
          "enum": [
            "Variables",
            "ScriptModule"
          ],
          "type": "string"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LibraryVariableSetRunbookSnapshotUsageEntry": {
      "type": "object",
      "properties": {
        "SnapshotId": {
          "type": "string"
        },
        "SnapshotName": {
          "type": "string"
        }
      }
    },
    "LibraryVariableSetUsageEntry": {
      "type": "object",
      "properties": {
        "LibraryVariableSetId": {
          "type": "string"
        },
        "LibraryVariableSetName": {
          "type": "string"
        }
      }
    },
    "LibraryVariableSetUsageResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetProjectUsage"
          }
        },
        "CountOfProjectsUserCannotSee": {
          "format": "int32",
          "type": "integer"
        },
        "CountOfReleasesUserCannotSee": {
          "format": "int32",
          "type": "integer"
        },
        "CountOfRunbookSnapshotsUserCannotSee": {
          "format": "int32",
          "type": "integer"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LicenseLimitStatusResource": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "EffectiveLimit": {
          "format": "int32",
          "type": "integer"
        },
        "EffectiveLimitDescription": {
          "type": "string"
        },
        "IsUnlimited": {
          "type": "boolean"
        },
        "CurrentUsage": {
          "format": "int32",
          "type": "integer"
        },
        "Message": {
          "type": "string"
        },
        "Disposition": {
          "enum": [
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string"
        }
      }
    },
    "LicenseMessageResource": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        },
        "Disposition": {
          "enum": [
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string"
        }
      }
    },
    "LicenseResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LicenseText": {
          "type": "string"
        },
        "SerialNumber": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LicenseStatusResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsCompliant": {
          "type": "boolean"
        },
        "HostingEnvironment": {
          "type": "string"
        },
        "ComplianceSummary": {
          "type": "string"
        },
        "EffectiveExpiryDate": {
          "format": "date",
          "type": "string"
        },
        "DaysToEffectiveExpiryDate": {
          "format": "int32",
          "type": "integer"
        },
        "Messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseMessageResource"
          }
        },
        "Limits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseLimitStatusResource"
          }
        },
        "EffectiveNodeTaskLimit": {
          "format": "int32",
          "type": "integer"
        },
        "EffectiveClusterTaskLimit": {
          "format": "int32",
          "type": "integer"
        },
        "IsNodeTaskLimitControlledByLicense": {
          "type": "boolean"
        },
        "IsClusterTaskLimitControlledByLicense": {
          "type": "boolean"
        },
        "PermissionsMode": {
          "enum": [
            "Unspecified",
            "Restricted",
            "Full"
          ],
          "type": "string"
        },
        "DoesExpiryBlockKeyActivities": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LifecycleProgressionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhaseProgressionResource"
          }
        },
        "NextDeployments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "NextDeploymentsMinimumRequired": {
          "format": "int32",
          "type": "integer"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LifecycleResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhaseResource"
          },
          "readOnly": true
        },
        "Name": {
          "type": "string"
        },
        "ReleaseRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "TentacleRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "Description": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ListApiMetadata": {
      "type": "object",
      "properties": {
        "SelectMode": {
          "type": "string"
        },
        "ApiEndpoint": {
          "type": "string"
        }
      }
    },
    "LoginInitiatedResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "WasLoginInitiated": {
          "type": "boolean"
        },
        "ProviderName": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MachineCleanupPolicy": {
      "type": "object",
      "properties": {
        "DeleteMachinesBehavior": {
          "enum": [
            "DoNotDelete",
            "DeleteUnavailableMachines"
          ],
          "type": "string"
        },
        "DeleteMachinesElapsedTimeSpan": {
          "type": "string"
        }
      }
    },
    "MachineConnectionStatus": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "MachineId": {
          "type": "string"
        },
        "Logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogElement"
          }
        },
        "Status": {
          "type": "string"
        },
        "CurrentTentacleVersion": {
          "type": "string"
        },
        "LastChecked": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MachineConnectivityPolicy": {
      "type": "object",
      "properties": {
        "MachineConnectivityBehavior": {
          "enum": [
            "ExpectedToBeOnline",
            "MayBeOfflineAndCanBeSkipped"
          ],
          "type": "string"
        }
      }
    },
    "MachineDeploymentPreview": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "HasLatestCalamari": {
          "type": "boolean"
        },
        "HealthStatus": {
          "enum": [
            "Healthy",
            "HasWarnings",
            "Unhealthy",
            "Unavailable"
          ],
          "type": "string"
        }
      }
    },
    "MachineHealthCheckPolicy": {
      "type": "object",
      "properties": {
        "PowerShellHealthCheckPolicy": {
          "$ref": "#/definitions/MachineScriptPolicy"
        },
        "BashHealthCheckPolicy": {
          "$ref": "#/definitions/MachineScriptPolicy"
        },
        "HealthCheckInterval": {
          "type": "string"
        },
        "HealthCheckCron": {
          "type": "string"
        },
        "HealthCheckCronTimezone": {
          "type": "string"
        },
        "HealthCheckType": {
          "enum": [
            "RunScript",
            "OnlyConnectivity"
          ],
          "type": "string"
        }
      }
    },
    "MachinePolicyResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "MachineHealthCheckPolicy": {
          "$ref": "#/definitions/MachineHealthCheckPolicy"
        },
        "MachineConnectivityPolicy": {
          "$ref": "#/definitions/MachineConnectivityPolicy"
        },
        "MachineCleanupPolicy": {
          "$ref": "#/definitions/MachineCleanupPolicy"
        },
        "MachineUpdatePolicy": {
          "$ref": "#/definitions/MachineUpdatePolicy"
        },
        "PollingRequestQueueTimeout": {
          "type": "string"
        },
        "PollingRequestMaximumMessageProcessingTimeout": {
          "type": "string"
        },
        "ConnectionRetrySleepInterval": {
          "type": "string"
        },
        "ConnectionRetryCountLimit": {
          "format": "int32",
          "type": "integer"
        },
        "ConnectionRetryTimeLimit": {
          "type": "string"
        },
        "ConnectionConnectTimeout": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MachineResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "Uri": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "MachinePolicyId": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "Online",
            "Offline",
            "Unknown",
            "NeedsUpgrade",
            "CalamariNeedsUpgrade",
            "Disabled"
          ],
          "type": "string"
        },
        "HealthStatus": {
          "enum": [
            "Healthy",
            "Unavailable",
            "Unknown",
            "HasWarnings",
            "Unhealthy"
          ],
          "type": "string"
        },
        "HasLatestCalamari": {
          "type": "boolean"
        },
        "StatusSummary": {
          "type": "string"
        },
        "IsInProcess": {
          "type": "boolean"
        },
        "Endpoint": {
          "$ref": "#/definitions/EndpointResource"
        },
        "OperatingSystem": {
          "type": "string"
        },
        "ShellName": {
          "type": "string"
        },
        "ShellVersion": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MachineScriptPolicy": {
      "type": "object",
      "properties": {
        "RunType": {
          "enum": [
            "InheritFromDefault",
            "Inline",
            "OnlyConnectivity"
          ],
          "type": "string"
        },
        "ScriptBody": {
          "type": "string"
        }
      }
    },
    "MachineUpdatePolicy": {
      "type": "object",
      "properties": {
        "CalamariUpdateBehavior": {
          "enum": [
            "UpdateOnDeployment",
            "UpdateOnNewMachine",
            "UpdateAlways"
          ],
          "type": "string"
        },
        "TentacleUpdateBehavior": {
          "enum": [
            "NeverUpdate",
            "Update"
          ],
          "type": "string"
        },
        "TentacleUpdateAccountId": {
          "type": "string"
        }
      }
    },
    "MaintenanceConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsInMaintenanceMode": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "Types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypeMetadata"
          }
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "MigrationImportResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageFeedSpaceId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "PackageVersion": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "IsEncryptedPackage": {
          "type": "boolean"
        },
        "IsDryRun": {
          "type": "boolean"
        },
        "OverwriteExisting": {
          "type": "boolean"
        },
        "DeletePackageOnCompletion": {
          "type": "boolean"
        },
        "SuccessCallbackUri": {
          "type": "string"
        },
        "FailureCallbackUri": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MigrationPartialExportResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "PackageVersion": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "Projects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IgnoreCertificates": {
          "type": "boolean"
        },
        "IgnoreMachines": {
          "type": "boolean"
        },
        "IgnoreDeployments": {
          "type": "boolean"
        },
        "IgnoreTenants": {
          "type": "boolean"
        },
        "IncludeTaskLogs": {
          "type": "boolean"
        },
        "EncryptPackage": {
          "type": "boolean"
        },
        "DestinationApiKey": {
          "type": "string"
        },
        "DestinationPackageFeed": {
          "type": "string"
        },
        "DestinationPackageFeedSpaceId": {
          "type": "string"
        },
        "SuccessCallbackUri": {
          "type": "string"
        },
        "FailureCallbackUri": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MultiTenancyStatusResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "NamedReferenceItem": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "DisplayIdAndName": {
          "type": "boolean"
        }
      }
    },
    "NumericReportData": {
      "type": "object",
      "properties": {
        "Labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Series": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NumericReportSeries"
          }
        }
      }
    },
    "NumericReportSeries": {
      "type": "object",
      "properties": {
        "Label": {
          "type": "string"
        },
        "Data": {
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        }
      }
    },
    "OctopusPackageMetadataMappedResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "BuildEnvironment": {
          "type": "string"
        },
        "BuildNumber": {
          "type": "string"
        },
        "BuildUrl": {
          "type": "string"
        },
        "VcsType": {
          "type": "string"
        },
        "VcsRoot": {
          "type": "string"
        },
        "VcsCommitNumber": {
          "type": "string"
        },
        "VcsCommitUrl": {
          "type": "string"
        },
        "IssueTrackerName": {
          "type": "string"
        },
        "WorkItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkItemLink"
          }
        },
        "Commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitDetails"
          }
        },
        "IncompleteDataWarning": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "OctopusPackageVersionBuildInformationMappedResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "BuildEnvironment": {
          "type": "string"
        },
        "BuildNumber": {
          "type": "string"
        },
        "BuildUrl": {
          "type": "string"
        },
        "Branch": {
          "type": "string"
        },
        "VcsType": {
          "type": "string"
        },
        "VcsRoot": {
          "type": "string"
        },
        "VcsCommitNumber": {
          "type": "string"
        },
        "VcsCommitUrl": {
          "type": "string"
        },
        "IssueTrackerName": {
          "type": "string"
        },
        "WorkItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkItemLink"
          }
        },
        "Commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitDetails"
          }
        },
        "IncompleteDataWarning": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "OctopusServerNodeDetailsResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "RunningTasks": {
          "format": "int32",
          "type": "integer"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "OctopusServerNodeResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "MaxConcurrentTasks": {
          "format": "int32",
          "type": "integer"
        },
        "IsInMaintenanceMode": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "OnboardingResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OnboardingTaskResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "OnboardingTaskResource": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Category": {
          "type": "string"
        },
        "IsEnabled": {
          "type": "boolean"
        },
        "IsComplete": {
          "type": "boolean"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "OptionsMetadata": {
      "type": "object",
      "properties": {
        "SelectMode": {
          "type": "string"
        },
        "Values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageDescriptionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "LatestVersion": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "PackageFromBuiltInFeedResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageSizeBytes": {
          "format": "int64",
          "type": "integer"
        },
        "Hash": {
          "type": "string"
        },
        "NuGetPackageId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "NuGetFeedId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Summary": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Published": {
          "format": "date-time",
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "FileExtension": {
          "type": "string"
        },
        "PackageVersionBuildInformation": {
          "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageNote": {
      "type": "object",
      "properties": {
        "PackageId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "Notes": {
          "$ref": "#/definitions/PackageNotesResult"
        }
      }
    },
    "PackageNoteListResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageNote"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageNotesResult": {
      "type": "object",
      "properties": {
        "Succeeded": {
          "type": "boolean"
        },
        "Notes": {
          "type": "string"
        },
        "FailureReason": {
          "type": "string"
        },
        "DisplayMessage": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PackageReference": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "Name": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "AcquisitionLocation": {
          "type": "string"
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "NuGetPackageId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "NuGetFeedId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Summary": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Published": {
          "format": "date-time",
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "FileExtension": {
          "type": "string"
        },
        "PackageVersionBuildInformation": {
          "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PackageSignatureResource": {
      "type": "object",
      "properties": {
        "Signature": {
          "format": "byte",
          "type": "string"
        },
        "BaseVersion": {
          "type": "string"
        }
      }
    },
    "PackageVersionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Version": {
          "type": "string"
        },
        "Published": {
          "format": "date-time",
          "type": "string"
        },
        "SizeBytes": {
          "format": "int64",
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        }
      }
    },
    "PerformanceConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "DefaultDashboardRenderMode": {
          "enum": [
            "VirtualizeColumns",
            "VirtualizeRowsAndColumns"
          ],
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PermissionDescription": {
      "type": "object",
      "properties": {
        "SupportedRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CanApplyAtSystemLevel": {
          "type": "boolean",
          "readOnly": true
        },
        "CanApplyAtSpaceLevel": {
          "type": "boolean",
          "readOnly": true
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "PhaseDeploymentResource": {
      "type": "object",
      "properties": {
        "Task": {
          "$ref": "#/definitions/TaskResource"
        },
        "Deployment": {
          "$ref": "#/definitions/DeploymentResource"
        }
      }
    },
    "PhaseProgressionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Blocked": {
          "type": "boolean"
        },
        "Progress": {
          "enum": [
            "Pending",
            "Current",
            "Complete"
          ],
          "type": "string"
        },
        "Deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhaseDeploymentResource"
          }
        },
        "AutomaticDeploymentTargets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OptionalDeploymentTargets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MinimumEnvironmentsBeforePromotion": {
          "format": "int32",
          "type": "integer"
        },
        "IsOptionalPhase": {
          "type": "boolean"
        }
      }
    },
    "PhaseResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "AutomaticDeploymentTargets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OptionalDeploymentTargets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MinimumEnvironmentsBeforePromotion": {
          "format": "int32",
          "type": "integer"
        },
        "IsOptionalPhase": {
          "type": "boolean"
        },
        "ReleaseRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "TentacleRetentionPolicy": {
          "$ref": "#/definitions/RetentionPeriod"
        }
      }
    },
    "ProcessReferenceDataItem": {
      "type": "object",
      "properties": {
        "ProcessType": {
          "enum": [
            "Deployment",
            "Runbook"
          ],
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ProgressionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "ChannelEnvironments": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ReferenceDataItem"
            }
          }
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseProgressionResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "ProjectId": {
          "type": "string",
          "readOnly": true
        },
        "ProjectName": {
          "type": "string"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "Variables": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/PropertyValueResource"
            }
          }
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectConnectivityPolicy": {
      "type": "object",
      "properties": {
        "SkipMachineBehavior": {
          "enum": [
            "None",
            "SkipUnavailableMachines"
          ],
          "type": "string"
        },
        "TargetRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AllowDeploymentsToNoTargets": {
          "type": "boolean"
        },
        "ExcludeUnhealthyTargets": {
          "type": "boolean"
        }
      }
    },
    "ProjectedTeamReferenceDataItem": {
      "type": "object",
      "properties": {
        "IsDirectlyAssigned": {
          "type": "boolean"
        },
        "ExternalSecurityGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedReferenceItem"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ProjectGroupResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RetentionPolicyId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "VariableSetId": {
          "type": "string"
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "ClonedFromProjectId": {
          "type": "string"
        },
        "DiscreteChannelRelease": {
          "type": "boolean"
        },
        "IncludedLibraryVariableSetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DefaultToSkipIfAlreadyInstalled": {
          "type": "boolean"
        },
        "TenantedDeploymentMode": {
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "string"
        },
        "DefaultGuidedFailureMode": {
          "enum": [
            "EnvironmentDefault",
            "Off",
            "On"
          ],
          "type": "string"
        },
        "VersioningStrategy": {
          "$ref": "#/definitions/VersioningStrategyResource"
        },
        "ReleaseCreationStrategy": {
          "$ref": "#/definitions/ReleaseCreationStrategyResource"
        },
        "Templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateParameterResource"
          }
        },
        "AutoDeployReleaseOverrides": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutoDeployReleaseOverrideResource"
          },
          "readOnly": true
        },
        "ReleaseNotesTemplate": {
          "type": "string"
        },
        "DeploymentChangesTemplate": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "ExtensionSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionSettingsValues"
          },
          "readOnly": true
        },
        "Name": {
          "type": "string"
        },
        "Slug": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "ProjectGroupId": {
          "type": "string"
        },
        "LifecycleId": {
          "type": "string"
        },
        "AutoCreateRelease": {
          "type": "boolean"
        },
        "ProjectConnectivityPolicy": {
          "$ref": "#/definitions/ProjectConnectivityPolicy"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectSettingsMetadata": {
      "type": "object",
      "properties": {
        "ExtensionId": {
          "type": "string"
        },
        "Metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "ProjectTriggerResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "Filter": {
          "$ref": "#/definitions/TriggerFilterResource"
        },
        "Action": {
          "$ref": "#/definitions/TriggerActionResource"
        },
        "SpaceId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectVariableSetUsage": {
      "type": "object",
      "properties": {
        "ProjectSlug": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseUsageEntry"
          }
        },
        "IsCurrentlyBeingUsedInProject": {
          "type": "boolean"
        },
        "RunbookSnapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookSnapshotUsageEntry"
          }
        }
      }
    },
    "PropertyApplicability": {
      "type": "object",
      "properties": {
        "Mode": {
          "enum": [
            "ApplicableIfHasAnyValue",
            "ApplicableIfHasNoValue",
            "ApplicableIfSpecificValue",
            "ApplicableIfNotSpecificValue"
          ],
          "type": "string"
        },
        "DependsOnPropertyName": {
          "type": "string"
        },
        "DependsOnPropertyValue": {
          "type": "object"
        }
      }
    },
    "PropertyMetadata": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "DisplayInfo": {
          "$ref": "#/definitions/DisplayInfo"
        }
      }
    },
    "PropertyValueResource": {
      "type": "object",
      "properties": {
        "IsSensitive": {
          "type": "boolean",
          "readOnly": true
        },
        "Value": {
          "type": "string",
          "readOnly": true
        },
        "SensitiveValue": {
          "$ref": "#/definitions/SensitiveValue",
          "readOnly": true
        }
      }
    },
    "ProxyResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Host": {
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "type": "integer"
        },
        "ProxyType": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "Password": {
          "$ref": "#/definitions/SensitiveValue"
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ReferenceDataItem": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "ReleaseChanges": {
      "type": "object",
      "properties": {
        "Version": {
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "BuildInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleasePackageVersionBuildInformation"
          }
        },
        "WorkItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkItemLink"
          }
        },
        "Commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitDetails"
          }
        }
      }
    },
    "ReleaseCreationStrategyResource": {
      "type": "object",
      "properties": {
        "ChannelId": {
          "type": "string"
        },
        "ReleaseCreationPackage": {
          "$ref": "#/definitions/DeploymentActionPackageResource"
        }
      }
    },
    "ReleasePackageVersionBuildInformation": {
      "type": "object",
      "properties": {
        "PackageId": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "BuildEnvironment": {
          "type": "string"
        },
        "BuildNumber": {
          "type": "string"
        },
        "BuildUrl": {
          "type": "string"
        },
        "Branch": {
          "type": "string"
        },
        "VcsType": {
          "type": "string"
        },
        "VcsRoot": {
          "type": "string"
        },
        "VcsCommitNumber": {
          "type": "string"
        },
        "VcsCommitUrl": {
          "type": "string"
        },
        "WorkItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkItemLink"
          }
        },
        "Commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitDetails"
          }
        }
      }
    },
    "ReleasePackageVersionBuildInformationResource": {
      "type": "object",
      "properties": {
        "PackageId": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "BuildEnvironment": {
          "type": "string"
        },
        "BuildNumber": {
          "type": "string"
        },
        "BuildUrl": {
          "type": "string"
        },
        "Branch": {
          "type": "string"
        },
        "VcsType": {
          "type": "string"
        },
        "VcsRoot": {
          "type": "string"
        },
        "VcsCommitNumber": {
          "type": "string"
        },
        "VcsCommitUrl": {
          "type": "string"
        },
        "IssueTrackerName": {
          "type": "string"
        },
        "WorkItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkItemLink"
          }
        },
        "Commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitDetails"
          }
        }
      }
    },
    "ReleaseProgressionResource": {
      "type": "object",
      "properties": {
        "Release": {
          "$ref": "#/definitions/ReleaseResource"
        },
        "Channel": {
          "$ref": "#/definitions/ChannelResource"
        },
        "Deployments": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DashboardItemResource"
            }
          }
        },
        "NextDeployments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "HasUnresolvedDefect": {
          "type": "boolean"
        },
        "ReleaseRetentionPeriod": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "TentacleRetentionPeriod": {
          "$ref": "#/definitions/RetentionPeriod"
        }
      }
    },
    "ReleaseResource": {
      "required": [
        "Version"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Version": {
          "maxLength": 349,
          "minLength": 0,
          "type": "string"
        },
        "ChannelId": {
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "ProjectDeploymentProcessSnapshotId": {
          "type": "string"
        },
        "IgnoreChannelRules": {
          "type": "boolean"
        },
        "BuildInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleasePackageVersionBuildInformationResource"
          }
        },
        "Assembled": {
          "format": "date-time",
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "LibraryVariableSetSnapshotIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SelectedPackages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectedPackage"
          }
        },
        "ProjectVariableSetSnapshotId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ReleaseTemplatePackage": {
      "type": "object",
      "properties": {
        "StepName": {
          "type": "string"
        },
        "ActionName": {
          "type": "string"
        },
        "NuGetPackageId": {
          "type": "string"
        },
        "PackageId": {
          "type": "string"
        },
        "PackageReferenceName": {
          "type": "string"
        },
        "NuGetFeedId": {
          "type": "string"
        },
        "FeedId": {
          "type": "string"
        },
        "NuGetFeedName": {
          "type": "string"
        },
        "FeedName": {
          "type": "string"
        },
        "VersionSelectedLastRelease": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "IsResolvable": {
          "type": "boolean"
        }
      }
    },
    "ReleaseTemplateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "DeploymentProcessId": {
          "type": "string"
        },
        "LastReleaseVersion": {
          "type": "string"
        },
        "NextVersionIncrement": {
          "type": "string"
        },
        "VersioningPackageStepName": {
          "type": "string"
        },
        "VersioningPackageReferenceName": {
          "type": "string"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseTemplatePackage"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ReleaseUsage": {
      "type": "object",
      "properties": {
        "ProjectName": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseUsageEntry"
          }
        }
      }
    },
    "ReleaseUsageEntry": {
      "type": "object",
      "properties": {
        "ReleaseId": {
          "type": "string"
        },
        "ReleaseVersion": {
          "type": "string"
        }
      }
    },
    "ReportDeploymentCountOverTimeResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ReportData": {
          "$ref": "#/definitions/NumericReportData"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[AccountResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ActionTemplateResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionTemplateResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ApiKeyResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiKeyResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ArtifactResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[CertificateConfigurationResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateConfigurationResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[CertificateResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ChannelResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[CommunityActionTemplateResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommunityActionTemplateResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ConfigurationSectionMetadata]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigurationSectionMetadata"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[DefectResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefectResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[DeploymentProcessResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentProcessResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[DeploymentResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[DeploymentTargetResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentTargetResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[EnvironmentResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[FeedResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeedResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[InterruptionResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterruptionResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[LibraryVariableSetResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryVariableSetResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[LifecycleResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LifecycleResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[MachinePolicyResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachinePolicyResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[OctopusPackageVersionBuildInformationMappedResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OctopusPackageVersionBuildInformationMappedResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[OctopusServerNodeResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OctopusServerNodeResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[PackageDescriptionResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageDescriptionResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[PackageResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[PackageVersionResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageVersionResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ProjectGroupResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectGroupResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ProjectResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ProjectTriggerResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectTriggerResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ProxyResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProxyResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ReleaseResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[RunbookProcessResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookProcessResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[RunbookResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[RunbookRunResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookRunResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[RunbooksDashboardItemResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbooksDashboardItemResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[RunbookSnapshotResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookSnapshotResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[ScopedUserRoleResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScopedUserRoleResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[SpaceResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpaceResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[SubscriptionResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[TagSetResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagSetResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[TaskResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[TeamResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[TenantResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TenantResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[UserResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[UserRoleResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[WorkerPoolResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkerPoolResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollection[WorkerResource]": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemType": {
          "type": "string",
          "readOnly": true
        },
        "TotalResults": {
          "format": "int32",
          "type": "integer"
        },
        "ItemsPerPage": {
          "format": "int32",
          "type": "integer"
        },
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "LastPageNumber": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkerResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RetentionPeriod": {
      "type": "object",
      "properties": {
        "Unit": {
          "enum": [
            "Days",
            "Items"
          ],
          "type": "string",
          "readOnly": true
        },
        "QuantityToKeep": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "ShouldKeepForever": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "RootResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Application": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "ApiVersion": {
          "type": "string"
        },
        "InstallationId": {
          "format": "uuid",
          "type": "string"
        },
        "IsEarlyAccessProgram": {
          "default": false,
          "type": "boolean"
        },
        "HasLongTermSupport": {
          "default": false,
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RunbookProcessResource": {
      "required": [
        "Version"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentStepResource"
          },
          "readOnly": true
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "LastSnapshotId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RunbookResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "RunbookProcessId": {
          "type": "string"
        },
        "PublishedRunbookSnapshotId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "MultiTenancyMode": {
          "enum": [
            "Untenanted",
            "TenantedOrUntenanted",
            "Tenanted"
          ],
          "type": "string"
        },
        "ConnectivityPolicy": {
          "$ref": "#/definitions/ProjectConnectivityPolicy"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RunbookRunPreviewResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "StepsToExecute": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentTemplateStep"
          }
        },
        "Form": {
          "$ref": "#/definitions/Form"
        },
        "UseGuidedFailureModeByDefault": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RunbookRunResource": {
      "required": [
        "RunbookSnapshotId",
        "RunbookId",
        "EnvironmentId"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "RunbookSnapshotId": {
          "type": "string"
        },
        "FrozenRunbookProcessId": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "EnvironmentId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "ForcePackageDownload": {
          "type": "boolean"
        },
        "SkipActions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpecificMachineIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ExcludedMachineIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ManifestVariableSetId": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "UseGuidedFailure": {
          "type": "boolean"
        },
        "Comments": {
          "type": "string"
        },
        "FormValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTimeExpiry": {
          "format": "date-time",
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "TentacleRetentionPeriod": {
          "$ref": "#/definitions/RetentionPeriod"
        },
        "DeployedBy": {
          "type": "string"
        },
        "DeployedById": {
          "type": "string"
        },
        "FailureEncountered": {
          "type": "boolean"
        },
        "DeployedToMachineIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RunbookRunTemplateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsRunbookProcessModified": {
          "type": "boolean"
        },
        "IsVariableSetModified": {
          "type": "boolean"
        },
        "IsLibraryVariableSetModified": {
          "type": "boolean"
        },
        "PromoteTo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromotionTarget"
          }
        },
        "TenantPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentPromomotionTenant"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RunbooksDashboardItemResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "EnvironmentId": {
          "type": "string"
        },
        "RunbookSnapshotId": {
          "type": "string"
        },
        "RunbookSnapshotName": {
          "type": "string"
        },
        "RunbookSnapshotNotes": {
          "type": "string"
        },
        "RunBy": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "TaskId": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "CompletedTime": {
          "format": "date-time",
          "type": "string"
        },
        "State": {
          "enum": [
            "Queued",
            "Executing",
            "Failed",
            "Canceled",
            "TimedOut",
            "Success",
            "Cancelling"
          ],
          "type": "string"
        },
        "HasPendingInterruptions": {
          "type": "boolean"
        },
        "HasWarningsOrErrors": {
          "type": "boolean"
        },
        "ErrorMessage": {
          "type": "string"
        },
        "Duration": {
          "type": "string"
        },
        "IsCompleted": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RunbookSnapshotResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "Notes": {
          "type": "string"
        },
        "FrozenRunbookProcessId": {
          "type": "string"
        },
        "FrozenProjectVariableSetId": {
          "type": "string"
        },
        "Assembled": {
          "format": "date-time",
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "LibraryVariableSetSnapshotIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SelectedPackages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectedPackage"
          }
        },
        "ProjectVariableSetSnapshotId": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RunbookSnapshotTemplateResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "RunbookProcessId": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "NextNameIncrement": {
          "type": "string"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseTemplatePackage"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RunbookSnapshotUsage": {
      "type": "object",
      "properties": {
        "RunbookId": {
          "type": "string"
        },
        "RunbookName": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "Snapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunbookSnapshotUsageEntry"
          }
        }
      }
    },
    "RunbookSnapshotUsageEntry": {
      "type": "object",
      "properties": {
        "SnapshotId": {
          "type": "string"
        },
        "SnapshotName": {
          "type": "string"
        }
      }
    },
    "RunbooksProgressionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "RunbookRuns": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RunbooksDashboardItemResource"
            }
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RunbookStepUsage": {
      "type": "object",
      "properties": {
        "ProcessId": {
          "type": "string"
        },
        "RunbookId": {
          "type": "string"
        },
        "RunbookName": {
          "type": "string"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectSlug": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepUsageEntry"
          }
        }
      }
    },
    "ScheduledTaskDetailsResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ActivityLog": {
          "$ref": "#/definitions/ActivityLogTreeNode"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ScheduledTaskStatusResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "IsEnabled": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SchedulerStatusResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsRunning": {
          "type": "boolean"
        },
        "TaskStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledTaskStatusResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ScopedUserRoleResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "UserRoleId": {
          "type": "string"
        },
        "TeamId": {
          "type": "string"
        },
        "ProjectIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "EnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "TenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "ProjectGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SelectedPackage": {
      "type": "object",
      "properties": {
        "StepName": {
          "type": "string"
        },
        "ActionName": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "PackageReferenceName": {
          "type": "string"
        }
      }
    },
    "SensitiveValue": {
      "type": "object",
      "properties": {
        "HasValue": {
          "type": "boolean"
        },
        "NewValue": {
          "type": "string"
        }
      }
    },
    "ServerConfigurationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ServerUri": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ServerConfigurationSettingsResource": {
      "type": "object",
      "properties": {
        "ConfigurationSet": {
          "type": "string"
        },
        "ConfigurationValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServerConfigurationValueResource"
          }
        }
      }
    },
    "ServerConfigurationValueResource": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "object"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "ServerStatusHealthResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsOperatingNormally": {
          "type": "boolean",
          "readOnly": true
        },
        "Description": {
          "type": "string",
          "readOnly": true
        },
        "IsEntireClusterReadOnly": {
          "type": "boolean"
        },
        "IsEntireClusterDrainingTasks": {
          "type": "boolean"
        },
        "IsCompliantWithLicense": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ServerTimezoneResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "IsLocal": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SmtpIsConfiguredResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "IsConfigured": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SpaceResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "TaskQueueStopped": {
          "type": "boolean"
        },
        "SpaceManagersTeams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceManagersTeamMembers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SpaceRootResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "StepUsage": {
      "type": "object",
      "properties": {
        "ProjectName": {
          "type": "string"
        },
        "ProjectId": {
          "type": "string"
        },
        "ProjectSlug": {
          "type": "string"
        },
        "Steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepUsageEntry"
          }
        }
      }
    },
    "StepUsageEntry": {
      "type": "object",
      "properties": {
        "StepName": {
          "type": "string"
        },
        "StepId": {
          "type": "string"
        }
      }
    },
    "SubscriptionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "EventNotificationSubscription": {
          "$ref": "#/definitions/EventNotificationSubscription"
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TagResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "CanonicalTagName": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Color": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TagSetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagResource"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TargetUsageEntry": {
      "type": "object",
      "properties": {
        "TargetName": {
          "type": "string"
        },
        "TargetId": {
          "type": "string"
        }
      }
    },
    "TaskDetailsResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Task": {
          "$ref": "#/definitions/TaskResource"
        },
        "ActivityLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogTreeNode"
          }
        },
        "PhysicalLogSize": {
          "format": "int64",
          "type": "integer"
        },
        "Progress": {
          "$ref": "#/definitions/TaskProgress"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TaskProgress": {
      "type": "object",
      "properties": {
        "ProgressPercentage": {
          "format": "int32",
          "type": "integer"
        },
        "EstimatedTimeRemaining": {
          "type": "string"
        }
      }
    },
    "TaskResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "SpaceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Arguments": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "State": {
          "enum": [
            "Queued",
            "Executing",
            "Failed",
            "Canceled",
            "TimedOut",
            "Success",
            "Cancelling"
          ],
          "type": "string"
        },
        "Completed": {
          "type": "string"
        },
        "QueueTime": {
          "format": "date-time",
          "type": "string"
        },
        "QueueTimeExpiry": {
          "format": "date-time",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string"
        },
        "CompletedTime": {
          "format": "date-time",
          "type": "string"
        },
        "ServerNode": {
          "type": "string"
        },
        "Duration": {
          "type": "string"
        },
        "ErrorMessage": {
          "type": "string"
        },
        "HasBeenPickedUpByProcessor": {
          "type": "boolean"
        },
        "IsCompleted": {
          "type": "boolean",
          "readOnly": true
        },
        "FinishedSuccessfully": {
          "type": "boolean",
          "readOnly": true
        },
        "HasPendingInterruptions": {
          "type": "boolean"
        },
        "CanRerun": {
          "type": "boolean"
        },
        "HasWarningsOrErrors": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TaskTypeResource": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TeamResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "MemberUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ExternalSecurityGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedReferenceItem"
          }
        },
        "CanBeDeleted": {
          "type": "boolean"
        },
        "CanBeRenamed": {
          "type": "boolean"
        },
        "CanChangeRoles": {
          "type": "boolean"
        },
        "CanChangeMembers": {
          "type": "boolean"
        },
        "SpaceId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TenantResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProjectEnvironments": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "ClonedFromTenantId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TenantVariableResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "TenantId": {
          "type": "string"
        },
        "TenantName": {
          "type": "string"
        },
        "ProjectVariables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Project"
          }
        },
        "LibraryVariables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Library"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TriggerActionResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ActionType": {
          "enum": [
            "AutoDeploy",
            "DeployLatestRelease",
            "DeployNewRelease",
            "RunRunbook"
          ],
          "type": "string",
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TriggerFilterResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "FilterType": {
          "enum": [
            "MachineFilter",
            "DailySchedule",
            "DaysPerWeekSchedule",
            "DaysPerMonthSchedule",
            "CronExpressionSchedule",
            "OnceDailySchedule",
            "ContinuousDailySchedule"
          ],
          "type": "string",
          "readOnly": true
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TypeMetadata": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyMetadata"
          }
        }
      }
    },
    "UserAuthenticationResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "AuthenticationProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthenticationProviderElement"
          }
        },
        "CanCurrentUserEditIdentitiesForUser": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UserPermissionRestriction": {
      "type": "object",
      "properties": {
        "RestrictedToProjectIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RestrictedToEnvironmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RestrictedToTenantIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RestrictedToProjectGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        }
      }
    },
    "UserPermissionSetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "SpacePermissions": {
          "type": "object",
          "properties": {
            "AdministerSystem": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProcessView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProcessEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableEditUnscoped": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "VariableViewUnscoped": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ReleaseDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DefectReport": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DefectResolve": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DeploymentCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DeploymentDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "DeploymentView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EnvironmentDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachineDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ArtifactDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "FeedView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "EventView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LibraryVariableSetDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProjectGroupDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TeamDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserInvite": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserRoleView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserRoleEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskCancel": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TaskEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "InterruptionView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "InterruptionSubmit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "InterruptionViewSubmitResponsible": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuiltInFeedPush": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuiltInFeedAdminister": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuiltInFeedDownload": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ActionTemplateDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "LifecycleDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "AccountDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TenantDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TagSetCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TagSetEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TagSetDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "MachinePolicyDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ProxyDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SubscriptionDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "TriggerDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "CertificateExportPrivateKey": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "UserEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "ConfigureServer": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "FeedEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "WorkerView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "WorkerEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SpaceEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SpaceView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SpaceDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "SpaceCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuildInformationPush": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "BuildInformationAdminister": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "RunbookView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "RunbookEdit": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "RunbookRunView": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "RunbookRunDelete": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            },
            "RunbookRunCreate": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserPermissionRestriction"
              }
            }
          }
        },
        "SystemPermissions": {
          "type": "array",
          "items": {
            "enum": [
              "AdministerSystem",
              "ProjectEdit",
              "ProjectView",
              "ProjectCreate",
              "ProjectDelete",
              "ProcessView",
              "ProcessEdit",
              "VariableEdit",
              "VariableEditUnscoped",
              "VariableView",
              "VariableViewUnscoped",
              "ReleaseCreate",
              "ReleaseView",
              "ReleaseEdit",
              "ReleaseDelete",
              "DefectReport",
              "DefectResolve",
              "DeploymentCreate",
              "DeploymentDelete",
              "DeploymentView",
              "EnvironmentView",
              "EnvironmentCreate",
              "EnvironmentEdit",
              "EnvironmentDelete",
              "MachineCreate",
              "MachineEdit",
              "MachineView",
              "MachineDelete",
              "ArtifactView",
              "ArtifactCreate",
              "ArtifactEdit",
              "ArtifactDelete",
              "FeedView",
              "EventView",
              "LibraryVariableSetView",
              "LibraryVariableSetCreate",
              "LibraryVariableSetEdit",
              "LibraryVariableSetDelete",
              "ProjectGroupView",
              "ProjectGroupCreate",
              "ProjectGroupEdit",
              "ProjectGroupDelete",
              "TeamCreate",
              "TeamView",
              "TeamEdit",
              "TeamDelete",
              "UserView",
              "UserInvite",
              "UserRoleView",
              "UserRoleEdit",
              "TaskView",
              "TaskCreate",
              "TaskCancel",
              "TaskEdit",
              "InterruptionView",
              "InterruptionSubmit",
              "InterruptionViewSubmitResponsible",
              "BuiltInFeedPush",
              "BuiltInFeedAdminister",
              "BuiltInFeedDownload",
              "ActionTemplateView",
              "ActionTemplateCreate",
              "ActionTemplateEdit",
              "ActionTemplateDelete",
              "LifecycleCreate",
              "LifecycleView",
              "LifecycleEdit",
              "LifecycleDelete",
              "AccountView",
              "AccountEdit",
              "AccountCreate",
              "AccountDelete",
              "TenantCreate",
              "TenantEdit",
              "TenantView",
              "TenantDelete",
              "TagSetCreate",
              "TagSetEdit",
              "TagSetDelete",
              "MachinePolicyCreate",
              "MachinePolicyView",
              "MachinePolicyEdit",
              "MachinePolicyDelete",
              "ProxyCreate",
              "ProxyView",
              "ProxyEdit",
              "ProxyDelete",
              "SubscriptionCreate",
              "SubscriptionView",
              "SubscriptionEdit",
              "SubscriptionDelete",
              "TriggerCreate",
              "TriggerView",
              "TriggerEdit",
              "TriggerDelete",
              "CertificateView",
              "CertificateCreate",
              "CertificateEdit",
              "CertificateDelete",
              "CertificateExportPrivateKey",
              "UserEdit",
              "ConfigureServer",
              "FeedEdit",
              "WorkerView",
              "WorkerEdit",
              "SpaceEdit",
              "SpaceView",
              "SpaceDelete",
              "SpaceCreate",
              "BuildInformationPush",
              "BuildInformationAdminister",
              "RunbookView",
              "RunbookEdit",
              "RunbookRunView",
              "RunbookRunDelete",
              "RunbookRunCreate"
            ],
            "type": "string"
          }
        },
        "Teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectedTeamReferenceDataItem"
          }
        },
        "IsTeamsComplete": {
          "type": "boolean"
        },
        "IsPermissionsComplete": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UserResource": {
      "required": [
        "DisplayName"
      ],
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Username": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "DisplayName": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "IsService": {
          "type": "boolean"
        },
        "EmailAddress": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "CanPasswordBeEdited": {
          "type": "boolean"
        },
        "IsRequestor": {
          "type": "boolean"
        },
        "Password": {
          "type": "string"
        },
        "Identities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityResource"
          }
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UserRoleResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "SupportedRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpacePermissionDescriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SystemPermissionDescriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "GrantedSpacePermissions": {
          "type": "array",
          "items": {
            "enum": [
              "AdministerSystem",
              "ProjectEdit",
              "ProjectView",
              "ProjectCreate",
              "ProjectDelete",
              "ProcessView",
              "ProcessEdit",
              "VariableEdit",
              "VariableEditUnscoped",
              "VariableView",
              "VariableViewUnscoped",
              "ReleaseCreate",
              "ReleaseView",
              "ReleaseEdit",
              "ReleaseDelete",
              "DefectReport",
              "DefectResolve",
              "DeploymentCreate",
              "DeploymentDelete",
              "DeploymentView",
              "EnvironmentView",
              "EnvironmentCreate",
              "EnvironmentEdit",
              "EnvironmentDelete",
              "MachineCreate",
              "MachineEdit",
              "MachineView",
              "MachineDelete",
              "ArtifactView",
              "ArtifactCreate",
              "ArtifactEdit",
              "ArtifactDelete",
              "FeedView",
              "EventView",
              "LibraryVariableSetView",
              "LibraryVariableSetCreate",
              "LibraryVariableSetEdit",
              "LibraryVariableSetDelete",
              "ProjectGroupView",
              "ProjectGroupCreate",
              "ProjectGroupEdit",
              "ProjectGroupDelete",
              "TeamCreate",
              "TeamView",
              "TeamEdit",
              "TeamDelete",
              "UserView",
              "UserInvite",
              "UserRoleView",
              "UserRoleEdit",
              "TaskView",
              "TaskCreate",
              "TaskCancel",
              "TaskEdit",
              "InterruptionView",
              "InterruptionSubmit",
              "InterruptionViewSubmitResponsible",
              "BuiltInFeedPush",
              "BuiltInFeedAdminister",
              "BuiltInFeedDownload",
              "ActionTemplateView",
              "ActionTemplateCreate",
              "ActionTemplateEdit",
              "ActionTemplateDelete",
              "LifecycleCreate",
              "LifecycleView",
              "LifecycleEdit",
              "LifecycleDelete",
              "AccountView",
              "AccountEdit",
              "AccountCreate",
              "AccountDelete",
              "TenantCreate",
              "TenantEdit",
              "TenantView",
              "TenantDelete",
              "TagSetCreate",
              "TagSetEdit",
              "TagSetDelete",
              "MachinePolicyCreate",
              "MachinePolicyView",
              "MachinePolicyEdit",
              "MachinePolicyDelete",
              "ProxyCreate",
              "ProxyView",
              "ProxyEdit",
              "ProxyDelete",
              "SubscriptionCreate",
              "SubscriptionView",
              "SubscriptionEdit",
              "SubscriptionDelete",
              "TriggerCreate",
              "TriggerView",
              "TriggerEdit",
              "TriggerDelete",
              "CertificateView",
              "CertificateCreate",
              "CertificateEdit",
              "CertificateDelete",
              "CertificateExportPrivateKey",
              "UserEdit",
              "ConfigureServer",
              "FeedEdit",
              "WorkerView",
              "WorkerEdit",
              "SpaceEdit",
              "SpaceView",
              "SpaceDelete",
              "SpaceCreate",
              "BuildInformationPush",
              "BuildInformationAdminister",
              "RunbookView",
              "RunbookEdit",
              "RunbookRunView",
              "RunbookRunDelete",
              "RunbookRunCreate"
            ],
            "type": "string"
          }
        },
        "GrantedSystemPermissions": {
          "type": "array",
          "items": {
            "enum": [
              "AdministerSystem",
              "ProjectEdit",
              "ProjectView",
              "ProjectCreate",
              "ProjectDelete",
              "ProcessView",
              "ProcessEdit",
              "VariableEdit",
              "VariableEditUnscoped",
              "VariableView",
              "VariableViewUnscoped",
              "ReleaseCreate",
              "ReleaseView",
              "ReleaseEdit",
              "ReleaseDelete",
              "DefectReport",
              "DefectResolve",
              "DeploymentCreate",
              "DeploymentDelete",
              "DeploymentView",
              "EnvironmentView",
              "EnvironmentCreate",
              "EnvironmentEdit",
              "EnvironmentDelete",
              "MachineCreate",
              "MachineEdit",
              "MachineView",
              "MachineDelete",
              "ArtifactView",
              "ArtifactCreate",
              "ArtifactEdit",
              "ArtifactDelete",
              "FeedView",
              "EventView",
              "LibraryVariableSetView",
              "LibraryVariableSetCreate",
              "LibraryVariableSetEdit",
              "LibraryVariableSetDelete",
              "ProjectGroupView",
              "ProjectGroupCreate",
              "ProjectGroupEdit",
              "ProjectGroupDelete",
              "TeamCreate",
              "TeamView",
              "TeamEdit",
              "TeamDelete",
              "UserView",
              "UserInvite",
              "UserRoleView",
              "UserRoleEdit",
              "TaskView",
              "TaskCreate",
              "TaskCancel",
              "TaskEdit",
              "InterruptionView",
              "InterruptionSubmit",
              "InterruptionViewSubmitResponsible",
              "BuiltInFeedPush",
              "BuiltInFeedAdminister",
              "BuiltInFeedDownload",
              "ActionTemplateView",
              "ActionTemplateCreate",
              "ActionTemplateEdit",
              "ActionTemplateDelete",
              "LifecycleCreate",
              "LifecycleView",
              "LifecycleEdit",
              "LifecycleDelete",
              "AccountView",
              "AccountEdit",
              "AccountCreate",
              "AccountDelete",
              "TenantCreate",
              "TenantEdit",
              "TenantView",
              "TenantDelete",
              "TagSetCreate",
              "TagSetEdit",
              "TagSetDelete",
              "MachinePolicyCreate",
              "MachinePolicyView",
              "MachinePolicyEdit",
              "MachinePolicyDelete",
              "ProxyCreate",
              "ProxyView",
              "ProxyEdit",
              "ProxyDelete",
              "SubscriptionCreate",
              "SubscriptionView",
              "SubscriptionEdit",
              "SubscriptionDelete",
              "TriggerCreate",
              "TriggerView",
              "TriggerEdit",
              "TriggerDelete",
              "CertificateView",
              "CertificateCreate",
              "CertificateEdit",
              "CertificateDelete",
              "CertificateExportPrivateKey",
              "UserEdit",
              "ConfigureServer",
              "FeedEdit",
              "WorkerView",
              "WorkerEdit",
              "SpaceEdit",
              "SpaceView",
              "SpaceDelete",
              "SpaceCreate",
              "BuildInformationPush",
              "BuildInformationAdminister",
              "RunbookView",
              "RunbookEdit",
              "RunbookRunView",
              "RunbookRunDelete",
              "RunbookRunCreate"
            ],
            "type": "string"
          }
        },
        "CanBeDeleted": {
          "type": "boolean"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VariablePromptOptions": {
      "type": "object",
      "properties": {
        "Label": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Required": {
          "type": "boolean"
        },
        "DisplaySettings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VariableResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Scope": {
          "type": "object",
          "properties": {
            "Project": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Environment": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Machine": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Role": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "TargetRole": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Action": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "User": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Trigger": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ParentDeployment": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Private": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Channel": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "TenantTag": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Tenant": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ProcessOwner": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "IsEditable": {
          "type": "boolean"
        },
        "Prompt": {
          "$ref": "#/definitions/VariablePromptOptions"
        },
        "Type": {
          "enum": [
            "String",
            "Sensitive",
            "Certificate",
            "AmazonWebServicesAccount",
            "AzureAccount"
          ],
          "type": "string"
        },
        "IsSensitive": {
          "type": "boolean"
        }
      }
    },
    "VariableScopeValues": {
      "type": "object",
      "properties": {
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "TenantTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDataItem"
          }
        },
        "Processes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessReferenceDataItem"
          }
        }
      }
    },
    "VariableSetResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "OwnerId": {
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "Variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableResource"
          }
        },
        "ScopeValues": {
          "$ref": "#/definitions/VariableScopeValues"
        },
        "SpaceId": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VariablesScopedToEnvironmentResponse": {
      "type": "object",
      "properties": {
        "HasUnauthorizedProjectVariables": {
          "type": "boolean"
        },
        "HasUnauthorizedLibraryVariableSetVariables": {
          "type": "boolean"
        },
        "VariableMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      }
    },
    "VersioningStrategyResource": {
      "type": "object",
      "properties": {
        "Template": {
          "type": "string"
        },
        "DonorPackage": {
          "$ref": "#/definitions/DeploymentActionPackageResource"
        }
      }
    },
    "WorkerPoolDynamicWorkerTypesResource": {
      "type": "object",
      "properties": {
        "WorkerTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynamicWorkerType"
          }
        },
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "WorkerPoolResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "SpaceId": {
          "type": "string"
        },
        "CanAddWorkers": {
          "type": "boolean"
        },
        "WorkerPoolType": {
          "enum": [
            "StaticWorkerPool",
            "DynamicWorkerPool"
          ],
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "WorkerPoolsSummaryResource": {
      "type": "object",
      "properties": {
        "TotalMachines": {
          "format": "int32",
          "type": "integer"
        },
        "TotalDisabledMachines": {
          "format": "int32",
          "type": "integer"
        },
        "MachineHealthStatusSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineEndpointSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "WorkerPoolSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkerPoolSummaryResource"
          }
        },
        "TentacleUpgradesRequired": {
          "type": "boolean"
        },
        "MachineIdsForCalamariUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachineIdsForTentacleUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkerPoolSummaryResource": {
      "type": "object",
      "properties": {
        "WorkerPool": {
          "$ref": "#/definitions/WorkerPoolResource"
        },
        "TotalMachines": {
          "format": "int32",
          "type": "integer"
        },
        "TotalDisabledMachines": {
          "format": "int32",
          "type": "integer"
        },
        "MachineHealthStatusSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "MachineEndpointSummaries": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "TentacleUpgradesRequired": {
          "type": "boolean"
        },
        "MachineIdsForCalamariUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MachineIdsForTentacleUpgrade": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkerPoolSupportedTypesResource": {
      "type": "object",
      "properties": {
        "SupportedPoolTypes": {
          "type": "array",
          "items": {
            "enum": [
              "StaticWorkerPool",
              "DynamicWorkerPool"
            ],
            "type": "string"
          }
        },
        "Id": {
          "type": "string",
          "readOnly": true
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "WorkerResource": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "WorkerPoolIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SpaceId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "Uri": {
          "type": "string"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "MachinePolicyId": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "Online",
            "Offline",
            "Unknown",
            "NeedsUpgrade",
            "CalamariNeedsUpgrade",
            "Disabled"
          ],
          "type": "string"
        },
        "HealthStatus": {
          "enum": [
            "Healthy",
            "Unavailable",
            "Unknown",
            "HasWarnings",
            "Unhealthy"
          ],
          "type": "string"
        },
        "HasLatestCalamari": {
          "type": "boolean"
        },
        "StatusSummary": {
          "type": "string"
        },
        "IsInProcess": {
          "type": "boolean"
        },
        "Endpoint": {
          "$ref": "#/definitions/EndpointResource"
        },
        "OperatingSystem": {
          "type": "string"
        },
        "ShellName": {
          "type": "string"
        },
        "ShellVersion": {
          "type": "string"
        },
        "LastModifiedOn": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifiedBy": {
          "type": "string"
        },
        "Links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "WorkItemLink": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LinkUrl": {
          "type": "string"
        },
        "Source": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "X509Certificate": {
      "type": "object",
      "properties": {
        "SubjectDistinguishedName": {
          "type": "string"
        },
        "IssuerDistinguishedName": {
          "type": "string"
        },
        "Thumbprint": {
          "type": "string"
        },
        "NotAfter": {
          "format": "date-time",
          "type": "string"
        },
        "NotBefore": {
          "format": "date-time",
          "type": "string"
        },
        "Version": {
          "format": "int32",
          "type": "integer"
        },
        "SerialNumber": {
          "type": "string"
        },
        "SignatureAlgorithmName": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "name": "X-Octopus-ApiKey",
      "in": "header",
      "type": "apiKey"
    },
    "APIKeyQuery": {
      "name": "ApiKey",
      "in": "query",
      "type": "apiKey"
    },
    "NugetApiKeyHeader": {
      "name": "X-NuGet-ApiKey",
      "in": "header",
      "type": "apiKey"
    }
  },
  "externalDocs": {
    "description": "Further API Documentation",
    "url": "https://g.octopushq.com/ApiDocs"
  }
}